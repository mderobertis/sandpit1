<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="9d3409a7-d3c5-4952-be27-140f8e4d7264" activeEnvironment="Default" name="concepts" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" defaultScriptLanguage="Groovy" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="ProjectSettings@hermesConfig">\\central.health\dfsuserenv\Users\User_01\derobm\.hermes</con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" id="1c791836-c4fd-41d8-82ae-b4fa57ca16a0" wsaVersion="NONE" name="MDRDataServiceSoap12" type="wsdl" bindingName="{http://improve.org.au/}MDRDataServiceSoap12" soapVersion="1_2" anonymous="optional" definition="file:/U:/Documents/soapui/projects/concepts/mdrdummy-v1.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/U:/Documents/soapui/projects/concepts/mdrdummy-v1.wsdl"><con:part><con:url>file:/U:/Documents/soapui/projects/concepts/mdrdummy-v1.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://improve.org.au/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:s1="urn:improve-org-au:xsd" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:tns="http://improve.org.au/">
  <wsdl:types>
    <s:schema elementFormDefault="qualified" targetNamespace="http://improve.org.au/">
      <s:import namespace="urn:improve-org-au:xsd"/>
      <s:element name="SubmitDummyData">
        <s:complexType>
          <s:sequence>
            <s:element maxOccurs="1" minOccurs="0" name="DummySummaryData">
              <s:complexType mixed="true">
                <s:sequence>
                  <s:any/>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="SubmitDummyDataResponse">
        <s:complexType>
          <s:sequence>
            <s:element maxOccurs="1" minOccurs="0" ref="s1:SubmitDummyDataResult"/>
          </s:sequence>
        </s:complexType>
      </s:element>
    </s:schema>
    <s:schema elementFormDefault="qualified" targetNamespace="urn:improve-org-au:xsd">
      <s:element name="SubmitDummyDataResult">
        <s:complexType>
          <s:sequence>
            <s:element maxOccurs="1" minOccurs="0" name="ResponseContent">
              <s:complexType>
                <s:sequence>
                  <s:choice maxOccurs="1" minOccurs="1">
                    <s:element maxOccurs="1" minOccurs="0" name="Error">
                      <s:complexType>
                        <s:attribute name="message" type="s:string"/>
                      </s:complexType>
                    </s:element>
                    <s:element maxOccurs="1" minOccurs="0" name="Success">
                      <s:complexType>
                        <s:attribute name="message" type="s:string"/>
                      </s:complexType>
                    </s:element>
                  </s:choice>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
    </s:schema>
  </wsdl:types>
  <wsdl:message name="SubmitDummyDataSoapIn">
    <wsdl:part element="tns:SubmitDummyData" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="SubmitDummyDataSoapOut">
    <wsdl:part element="tns:SubmitDummyDataResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:portType name="MDRDataServiceSoap">
    <wsdl:operation name="SubmitDummyData">
      <wsdl:input message="tns:SubmitDummyDataSoapIn"/>
      <wsdl:output message="tns:SubmitDummyDataSoapOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="MDRDataServiceSoap" type="tns:MDRDataServiceSoap">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="SubmitDummyData">
      <soap:operation soapAction="http://improve.org.au/SubmitDummyData" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="MDRDataServiceSoap12" type="tns:MDRDataServiceSoap">
    <soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="SubmitDummyData">
      <soap12:operation soapAction="http://improve.org.au/SubmitDummyData" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="MDRDataService">
    <wsdl:port binding="tns:MDRDataServiceSoap" name="MDRDataServiceSoap">
      <soap:address location="https://localhost/mdrdummy-service-web-v1/MDRDataServiceSoap"/>
    </wsdl:port>
    <wsdl:port binding="tns:MDRDataServiceSoap12" name="MDRDataServiceSoap12">
      <soap12:address location="https://localhost/mdrdummy-service-web-v1/MDRDataServiceSoap"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://localhost:8080/</con:endpoint></con:endpoints><con:operation id="765dd6a9-b322-407f-ae38-005cd5671821" isOneWay="false" action="http://improve.org.au/SubmitDummyData" name="SubmitDummyData" bindingOperationName="SubmitDummyData" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="3ae0cd86-12b7-4bf6-9cd1-ed777262e6fb" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:imp="http://improve.org.au/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <imp:SubmitDummyData>\r
         <!--Optional:-->\r
         <imp:DummySummaryData>\r
            e\r
            <!--You may enter ANY elements at this point-->\r
            gero\r
         </imp:DummySummaryData>\r
      </imp:SubmitDummyData>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://improve.org.au/MDRDataServiceSoap/SubmitDummyDataRequest"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="dcb20c93-2e65-4a10-99aa-2fba64af26d9" wsaVersion="NONE" name="MDRDataServiceSoap" type="wsdl" bindingName="{http://improve.org.au/}MDRDataServiceSoap" soapVersion="1_1" anonymous="optional" definition="file:/U:/Documents/soapui/projects/concepts/mdrdummy-v1.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/U:/Documents/soapui/projects/concepts/mdrdummy-v1.wsdl"><con:part><con:url>file:/U:/Documents/soapui/projects/concepts/mdrdummy-v1.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://improve.org.au/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:s1="urn:improve-org-au:xsd" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:tns="http://improve.org.au/">
  <wsdl:types>
    <s:schema elementFormDefault="qualified" targetNamespace="http://improve.org.au/">
      <s:import namespace="urn:improve-org-au:xsd"/>
      <s:element name="SubmitDummyData">
        <s:complexType>
          <s:sequence>
            <s:element maxOccurs="1" minOccurs="0" name="DummySummaryData">
              <s:complexType mixed="true">
                <s:sequence>
                  <s:any/>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="SubmitDummyDataResponse">
        <s:complexType>
          <s:sequence>
            <s:element maxOccurs="1" minOccurs="0" ref="s1:SubmitDummyDataResult"/>
          </s:sequence>
        </s:complexType>
      </s:element>
    </s:schema>
    <s:schema elementFormDefault="qualified" targetNamespace="urn:improve-org-au:xsd">
      <s:element name="SubmitDummyDataResult">
        <s:complexType>
          <s:sequence>
            <s:element maxOccurs="1" minOccurs="0" name="ResponseContent">
              <s:complexType>
                <s:sequence>
                  <s:choice maxOccurs="1" minOccurs="1">
                    <s:element maxOccurs="1" minOccurs="0" name="Error">
                      <s:complexType>
                        <s:attribute name="message" type="s:string"/>
                      </s:complexType>
                    </s:element>
                    <s:element maxOccurs="1" minOccurs="0" name="Success">
                      <s:complexType>
                        <s:attribute name="message" type="s:string"/>
                      </s:complexType>
                    </s:element>
                  </s:choice>
                </s:sequence>
              </s:complexType>
            </s:element>
          </s:sequence>
        </s:complexType>
      </s:element>
    </s:schema>
  </wsdl:types>
  <wsdl:message name="SubmitDummyDataSoapIn">
    <wsdl:part element="tns:SubmitDummyData" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="SubmitDummyDataSoapOut">
    <wsdl:part element="tns:SubmitDummyDataResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:portType name="MDRDataServiceSoap">
    <wsdl:operation name="SubmitDummyData">
      <wsdl:input message="tns:SubmitDummyDataSoapIn"/>
      <wsdl:output message="tns:SubmitDummyDataSoapOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="MDRDataServiceSoap" type="tns:MDRDataServiceSoap">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="SubmitDummyData">
      <soap:operation soapAction="http://improve.org.au/SubmitDummyData" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="MDRDataServiceSoap12" type="tns:MDRDataServiceSoap">
    <soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="SubmitDummyData">
      <soap12:operation soapAction="http://improve.org.au/SubmitDummyData" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="MDRDataService">
    <wsdl:port binding="tns:MDRDataServiceSoap" name="MDRDataServiceSoap">
      <soap:address location="https://localhost/mdrdummy-service-web-v1/MDRDataServiceSoap"/>
    </wsdl:port>
    <wsdl:port binding="tns:MDRDataServiceSoap12" name="MDRDataServiceSoap12">
      <soap12:address location="https://localhost/mdrdummy-service-web-v1/MDRDataServiceSoap"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#TestCase#endpoint}</con:endpoint><con:endpoint>http://localhost:591/</con:endpoint><con:endpoint>http://localhost:8080/</con:endpoint></con:endpoints><con:operation id="0feb3331-a7ac-42fb-9366-3c41028008a1" isOneWay="false" action="http://improve.org.au/SubmitDummyData" name="SubmitDummyData" bindingOperationName="SubmitDummyData" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="c7de1485-d0d6-441e-a3d9-318a16ba7b1b" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:imp="http://improve.org.au/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <imp:SubmitDummyData>\r
         <!--Optional:-->\r
         <imp:DummySummaryData>\r
            e\r
            <!--You may enter ANY elements at this point-->\r
            gero\r
         </imp:DummySummaryData>\r
      </imp:SubmitDummyData>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://improve.org.au/SubmitDummyData"/></con:call></con:operation></con:interface><con:interface xsi:type="con:RestService" id="7d85a29c-a7a4-4bb0-872a-bc29b638ed87" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://10.11.21.128:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.11.21.128:8080</con:endpoint></con:endpoints><con:resource name="" path="/person" id="bb576b8d-6816-4bd8-9d2f-6c42ed3fda99"><con:settings/><con:parameters/><con:method name="" id="11ed90a0-a794-460b-807f-a96968dcce18" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:per="http://10.11.21.128/person">per:Response</con:element></con:representation><con:request name="person" id="faa439a1-0870-4c07-a1fe-1f8620434359" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:8080</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/person</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="datetime" path="/datetime" id="e86ada32-e439-4306-9bd8-d795b15751c0"><con:settings/><con:parameters/><con:method name="Method 1" id="e4ee562d-c775-424a-bd7c-b51065aad08d" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dat="http://10.11.21.128/datetime">dat:Response</con:element></con:representation><con:request name="datetime" id="35f204fe-d85a-4fa0-a62d-fdddf336a8c2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:8080</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/datetime</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="f57f2100-9304-4a8b-88cc-c3c839b78f31" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://10.11.21.128:9090" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://10.11.21.128:9090</con:endpoint></con:endpoints><con:resource name="people" path="/person" id="1444abf1-8313-4e1b-aecf-b4f5b37a3135"><con:settings/><con:parameters><con:parameter><con:name>name</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:resource name="1" path="1" id="00189268-71e4-4598-a0e1-1280506d9771"><con:settings/><con:parameters/><con:method name="PutPeople" id="f2db3acc-39d9-430d-97c0-a02222b612f4" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:ns="http://10.11.21.128/people/1">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Update whole Person 1" id="94fa0cf0-1d8d-4275-95d0-dc4fe34c9167" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
     "firstName": "Grodos", 
     "lastName": "Baggins" 
}</con:request><con:originalUri>http://10.11.21.128/people/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:request></con:method><con:method name="PatchPeople" id="e1f1bc34-68bb-42a0-8e4d-945c2fb6fdf1" method="PATCH"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:ns="http://10.11.21.128/people/1">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Update part of Person 1" id="d23093b9-f7c2-4184-a72d-f9e907dd284c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{
	"dob" : "11111911"
}
</con:request><con:originalUri>http://10.11.21.128/people/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:request></con:method><con:method name="DeletePeople" id="98e65f94-88ca-4cb4-a0f6-85505eec8852" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Delete whole Person 1" id="b57895dc-33ec-4d2b-8979-3af5d2b15051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="name" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:request></con:method><con:method name="GetPeople" id="15bdfc0d-28e5-472c-a57c-e6cf166305de" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:ns="http://10.11.21.128/people/1">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/hal+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://10.11.21.128/people/1">ns:Response</con:element></con:representation><con:request name="Get Person 1" id="577e5461-1192-4b29-bc15-153e1f96c8bb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/people/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:request></con:method><con:method name="PostPeople" id="200e0081-ba76-474b-9655-3fdab9dfdf3c" method="POST"><con:settings/><con:parameters/><con:request name="Post new Person 1" id="0700df5c-51e7-40a2-9fc5-e37c6d0b7f9e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="{id}" path="{id}" id="3b252232-dcef-4ecf-b68c-c310db982646"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="GetPeople" id="7f579163-7e72-4738-a1d8-a255c99f3454" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/hal+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://10.11.21.128/people/0">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Get Person by id" id="834fd842-1a59-452d-acf3-a1327ab63d3e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/people/0</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry><con:entry>name</con:entry></con:parameterOrder></con:request></con:method><con:method name="PostPeople **not working**" id="2ce34890-b9f0-4f6d-b7ad-d0d264a661e7" method="POST"><con:settings/><con:parameters/><con:request name="Post new Person by id" id="cbe712dd-0b95-4aa8-a9f7-8bb10b39e7ea" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry><con:entry>name</con:entry></con:parameterOrder></con:request></con:method><con:method name="PutPeople" id="22ef76d2-9fe9-401a-b442-bb4ef81ecb5f" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:id="http://10.11.21.128/people/id">id:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Update whole Person by id" id="2942372c-b5c7-4cb3-ba62-0223a9121e20" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/people/id</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry><con:entry>name</con:entry></con:parameterOrder></con:request></con:method><con:method name="PatchPeople" id="ffc78808-7a06-4370-9953-da13663e5bca" method="PATCH"><con:settings/><con:parameters/><con:request name="Update part of Person by id" id="3a7d680e-fd43-4689-b450-664c2b7b3c07" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry><con:entry>name</con:entry></con:parameterOrder></con:request></con:method><con:method name="DeletePeople" id="e3fd304a-ded0-4382-838f-d67f16591f61" method="DELETE"><con:settings/><con:parameters/><con:request name="Delete whole Person by id" id="540cd7a2-c661-4573-bfc4-cedde51a5d28" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry><con:entry>name</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="findByLastName" path="search/findByLastName" id="0aff147e-d14e-4a0a-81d5-7fae9d14ccca"><con:settings/><con:parameters/><con:method name="FindPeople" id="69245152-a3a7-418c-892f-cab2ad50002e" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/hal+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:fin="http://10.11.21.128/people/search/findByLastName">fin:Response</con:element></con:representation><con:request name="Find People by LastName" id="924d1169-3132-4e29-817d-b1239511df36" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/people/search/findByLastName</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="name" value="Baggins" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:method name="GetPerson" id="7c32d587-cd4d-4377-be45-b90c48a31bd0" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/hal+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://10.11.21.128/">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/hal+json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://10.11.21.128/">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Get existing Persons" id="1d531a2e-6b3f-4811-849b-9332234edad1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="name" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:request></con:method><con:method name="PostPerson" id="245b3cc6-c454-4d48-a0c0-a2468c9fa309" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 409 404</con:status><con:params/><con:element xmlns:ns="http://10.11.21.128/people/1">ns:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Create new Person (H2 Database)" id="0aea9f5d-eebd-4308-a29b-d222878f825c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="hppgeneral" path="/hpp" id="40af067e-291a-4800-afc3-bf81ec97ca4a"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}" id="b0d9a801-28c7-4226-8aff-adc544f0c0c4"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="PutHPPGeneralById" id="a8d949ea-605d-431d-92fb-7f6bf3bc1d64" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Add data to HPPGeneral by Id (mongodb)" id="4b106d1a-bd26-40b7-b5d6-517385324832" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="GetHPPGeneral" id="a325bf66-6899-492b-99df-b0ee00a177bc" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/hal+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:hpp="http://10.11.21.128/hppgeneral">hpp:Response</con:element></con:representation><con:request name="Get HPPGeneral data" id="f2ad2a83-0fad-4a1a-9080-70b675c6f062" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/hppgeneral</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PostHPPGeneral" id="55cdc124-4214-4295-a9b0-de8aa679c422" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>409 500</con:status><con:params/><con:element xmlns:hpp="http://10.11.21.128/hppgeneral">hpp:Fault</con:element></con:representation><con:request name="Add data to HPPGeneral (h2)" id="45369153-901a-4fcb-919d-b08ef8cf5c54" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PutHPPGeneral" id="2ef94956-a450-482f-99b5-97045545181d" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:hpp="http://10.11.21.128/hppgeneral">hpp:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Add data to HPPGeneral (mongodb)" id="aad62e86-a8fa-416c-88e5-2ebd59ec4ba8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="datetime" path="/datetime" id="620e0441-86f1-4fe5-9157-597d71b1c8e9"><con:settings/><con:parameters/><con:method name="GetDateTime" id="4a3e0a62-0e06-4ec8-bd4b-18c4c69251f1" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dat="http://10.11.21.128/datetime">dat:Response</con:element></con:representation><con:request name="Get datetime" id="a7f8befd-43e0-4ebe-8cc6-cc432d53102d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="testcasedata" path="/testcasedata" id="ce68e8c8-cee5-427b-a7d5-a3591ab9d676"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}" id="06f6811d-b658-41fc-8b6e-ba8cbd4f2ad5"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="PutTestCaseDataById" id="aa57e87c-948d-401f-bbae-b183e4934769" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Add data to TestCaseData by Id (mongodb)" id="c28c9068-3143-46ef-8211-b7cb69058b2f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="GetTestCaseData" id="f778963e-54a4-42da-a95c-52a8f6348300" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/hal+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tes="http://10.11.21.128/testcasedata">tes:Response</con:element></con:representation><con:request name="Get TestCaseData" id="7cccf9b1-13f4-49a6-a5d0-987ac6d075ca" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/testcasedata</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PostTestCaseData" id="1bc528bf-d83b-4e6e-9d2b-e949f5f89e21" method="POST"><con:settings/><con:parameters/><con:request name="Add data to TestCaseData (h2)" id="0439ef3b-f006-4131-a24e-1e934240b50a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PutTestCaseData" id="14091b1a-447e-4886-898a-d49c3537cd17" method="PUT"><con:settings/><con:parameters/><con:request name="Add data to TestCaseData (mongodb)" id="89d5c907-6ebb-401d-b2a5-b430264fbd02" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="testproperties" path="/testproperties" id="d2146977-f889-462d-860c-0bd534d3a78c"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}" id="9b1c7379-7cbc-4686-bec6-847de62cac31"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="PutTestPropertiesById" id="aa9c2999-7af3-4a4b-90d9-de4d637fec89" method="PUT"><con:settings/><con:parameters/><con:request name="Add data to TestProperties by Id (mongodb)" id="2373a361-2c84-41eb-99fd-ee5b632dad81" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="GetTestProperties" id="0a869f09-f8c7-4532-ac5a-d173ab2ec199" method="GET"><con:settings/><con:parameters/><con:request name="Get TestProperties data" id="eb01db26-9592-4cf4-8417-592af2fb72ea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PostTestProperties" id="21430a3d-73ed-465a-8538-da78ee640373" method="POST"><con:settings/><con:parameters/><con:request name="Add data to TestProperties (h2)" id="260052aa-6128-4bf0-ae84-dcf0ba7ebf7f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PutTestProperties" id="8a52c27c-5a1a-4149-a4f7-81d94952a9ab" method="POST"><con:settings/><con:parameters/><con:request name="Add data to TestProperties (mongodb)" id="8f023d52-62c7-4639-9631-7eea88252d68" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="ed43b941-56f0-4e5e-8927-a3474e3ada82" name="Runners (historical)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e33bf5ee-ce2d-4c97-9055-8f97bf82e785" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Runner(post data portal)" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="read" id="41e11465-f5bd-48e3-b6e3-58cf702f8b6c"><con:settings/><con:config><script>import com.eviware.soapui.support.UISupport
import groovy.swing.SwingBuilder
import java.awt.FlowLayout as FL  
import javax.swing.BoxLayout as BXL
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.impl.wsdl.teststeps.*
import java.util.concurrent.TimeUnit


//**************
// Definitions
//**************
	def getSuite=[:],setSuite = [:], test=[:], almConfig=[:], qcID /*dbProps=[:]*/
	def core = testRunner.testCase.testSuite.getPropertyValue("propCore"); core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
	def script = testRunner.testCase.testSuite.getPropertyValue("propScript"); scripts = core.testSuites["${script}"] 
	scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)
	context.ManageSoapUIProperties.getMyProperties(testRunner.testCase.testSuite, getSuite)



//*******************
// SwingBuilder GUI
//*******************
	def s = new SwingBuilder()
	s.setVariable('myDialog-properties',[:])
	def vars = s.variables

	def gui = s.dialog(title:'Test Plan',size:[500,600],modal:true)
	
	{
	panel() {
		boxLayout(axis:BXL.Y_AXIS)

		//test identifier
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('TestID')
			textField(id:'testid',"e2esimgui${new java.text.SimpleDateFormat("yyyyMMdd'T'hhmm").format(new Date())}",columns:20)}
		
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('Action1')
			action1 = comboBox(items:["", "TODO1", "TODO2"], selectedIndex:1)}
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('Action2')
			action2 = comboBox(items:["", "TODO1", "TODO2"], selectedIndex:1)}
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('Action3')
			action3 = comboBox(items:["", "TODO1", "TODO2"], selectedIndex:1)}
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('Action4')
			action4 = comboBox(items:["", "TODO1", "TODO2"], selectedIndex:1)}
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('Action5')
			action5 = comboBox(items:["", "TODO1", "TODO2"], selectedIndex:1)}
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('Action6')
			action6 = comboBox(items:["", "TODO1", "TODO2"], selectedIndex:1)}
		
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('QC_Id')
			qcId = comboBox(items:["", "XXX","YYY"], selectedIndex:0)}
		
		panel(alignmentX: 0f) {
			flowLayout(alignment:FL.LEFT)
			button('OK', preferredSize:[80,24],
				actionPerformed:{
					vars.dialogResult = 'OK' 

					dispose() 
					})
			
			button('Cancel', preferredSize:[80,24],
				actionPerformed:{
					vars.dialogResult = 'Cancel' 
					testRunner.cancel( "Stop the testRunner" )
					dispose() })}}}

//**********************
// Apply Test Strategy 
//**********************
	def testInput
	
	switch(getSuite["propStrategy"]) {
		case "database":
		case "Database":

			//Read the source and count the number of test cases ****should go in Runner-setup****
			setSuite["strategyLogger"] = setSuite["strategyLogger"] + ". Database Test Data source chosen for the Test Strategy"	
			sql = Sql.newInstance("${getSuite["propDBConnection"]}", "${getSuite["propDBAutoUser"]}", "${getSuite["propDBAutoPwd"]}", "oracle.jdbc.OracleDriver") 
			//getTestCaseCount = "" + "select count(*) from CAF.TESTCASEDATA where testplan = 'dp_run_${getSuite["username"]}'" 
			getTestCaseCount = "" + "select count(*) from CAF.TESTCASEDATA where testplan = 'run_${getSuite["username"]}' and misc3 = '${getSuite["username"]}'" 
			res = sql.firstRow(getTestCaseCount); 
			getTestCaseCount = res.toString();
			getTestCaseCount = getTestCaseCount.substring(10); getTestCaseCount = getTestCaseCount.substring(0, getTestCaseCount.length() - 1) // cleanup to get just the number
			setSuite["numberOfRows"] = getTestCaseCount
			setSuite["numberOfTests"] = getTestCaseCount
			setSuite["strategyLogger"] = setSuite["strategyLogger"] + ". The number of tests set to run in CAF.TESTCASEDATA of " + res + " has been stored in readiness for execution"
		
			//Get the test case data for the testCounter (current) row
			test["query"] = "" + "SELECT * FROM (SELECT a.*, row_number() OVER (ORDER BY almtestid) rn FROM caf.testcasedata a where testplan = 'run_${getSuite["username"]}' and misc3 = '${getSuite["projectName"]}') WHERE rn = ${getSuite["testCounter"]}"
			log.info test["query"]
			
			testInput = sql.firstRow(test["query"]); 

			// Map the QC_Id
			test["QC_Id"] = testInput[19]

			//logging
			setSuite["strategyLogger"] = setSuite["strategyLogger"] + ". Test Case ${testInput[0]} read in."

			// close the connection
			sql.close()
	
		
		break;
	
		case "CSV":
		case "csv":
			
			//Read in the source and count the number of tests
			def f = new File (getSuite["propCsv1"]); List r = f.readLines(); rows = r.size.toInteger()
			testInput = r[getSuite["testCounter"].toInteger()].split(',')
			setSuite["numberOfRows"] = rows.toString()
			setSuite["numberOfTests"] = (rows-1).toString()
			setSuite["strategyLogger"] = "The number of tests in csv file of " + f + " has been stored in readiness for execution"

			// Map the QC_Id			
			test["QC_Id"] = testInput[16]
			
			//setSuite["Stop"] = "F";	setSuite["testCounter"]= "1"; setSuite["nextTestCounter"]= "2";



		break;		
		case "GUI":
		case "gui":	
			inputType = UISupport.prompt("Select from the following Inputs","Inputs","INPUT1", "INPUT2_InvokeSB")
			if (inputType == "INPUT1"){
				log.info "Running ${inputType}"; testid = "e2esimgui${new java.text.SimpleDateFormat("yyyyMMddhhmm").format(new Date())}"; testObjective = "${inputType}"
				
				//userRoles = UISupport.prompt("Set your user roles","Roles","SubmissionUploaderReviewerApproverExt","SubmissionUploaderExt","SubmissionReviewerExt", "SubmissionApproverExt", "UserAdminExt", "UserAdminSubmissionUploaderExt", "SubmissionReviewerApproverReportViewerExt", "SubmissionUserAdminUploaderReviewerApproverReportViewerExt")	
				//setSuite["testGroupAction"] = "AddGroup"
				//setSuite["testRoles"] = userRoles
				//setSuite["TestID"] = testid
				//setSuite["TestObjective"] = testObjective

			
				}


			else if (inputType == "INPUT2_InvokeSB")	{
				gui.show()
				
				//set defaults for an external submission
				setSuite["TestID"] = vars.testid.text
				
				setSuite["testAction1"] = action1.getSelectedItem();setSuite["testAction2"] = action2.getSelectedItem();setSuite["testAction3"] = action3.getSelectedItem();
				setSuite["testAction4"] = action4.getSelectedItem();setSuite["testAction5"] = action5.getSelectedItem();setSuite["testAction6"] = action6.getSelectedItem();				
				setSuite["QC_Id"]= qcId.getSelectedItem() //for swingbuilder gui set the qc_id to the value in the test suite
				
				testObjective = " actions ${action1.getSelectedItem()} ${action2.getSelectedItem()} ${action3.getSelectedItem()} ${action4.getSelectedItem()} ${action5.getSelectedItem()} ${action6.getSelectedItem()}"
				setSuite["TestObjective"] = testObjective
			
				}
				
			else {testRunner.cancel( "Stop the testRunner" )}
		
			} //break for GUI and Standalone
		

//**************************************************************************
// Set required epic conditions
//	Intermediate step which applies logic to the input to set an epic flag
//	Might not be required but worth including to handle scalability when input design might not suffice
//	Drives how those tests setup steps and data
//****************************************************************************

// apply logic here based on the input combinations **as required**
	setSuite["testEpicCondition"]= "Create_Container" 
	test["testEpicCondition"]= setSuite["testEpicCondition"]  //duplicate for use pre-save				




//******************************************
// Map data source to properties
//	Separate switch to the above
//	given the database/csv common
//	logic
//
// 	Use for other common csv/databse logic
//	as required
//******************************************
	
	if ((getSuite["propStrategy"] =="database") || (getSuite["propStrategy"]=="Database") || (getSuite["propStrategy"] =="csv") || (getSuite["propStrategy"]=="CSV")){
		test["TestID"] = testInput[0]; test["TestObjective"] = testInput[1]; 
		test["testMisc1"] = testInput[2]; test["testApplication"] = testInput[3]
		test["testCondition1"] = testInput[4];	test["testCondition2"] = testInput[5];test["testCondition3"] = testInput[6]; test["testCondition4"] = testInput[7]; 
		test["testCondition5"] = testInput[8];test["testCondition6"] = testInput[9]; test["testCondition7"] = testInput[10]; test["testCondition8"] = testInput[11];
		test["testCondition9"] = testInput[12]; test["testCondition10"] = testInput[13]; test["testCondition11"] = testInput[14]; test["testCondition12"] = testInput[15]
		
	// close the db connection
	if ((getSuite["propStrategy"] =="database") || (getSuite["propStrategy"]=="Database")) {	sql.close()}
	
	}
	
	// ***is this needed??**
	else {test["TestID"] = setSuite["TestID"] ; test["TestObjective"] = setSuite["TestObjective"] /*; test["Application"] = getSuite["Application"]*/
	//log.info " HERE?? "
	}

//**********************************************************************************************
// Set ALM Test Case Credentials
//	Design use QC_Id but for multi-segment with Seg1 and Seg2 components the following are 
//	constants which always apply and which are enabled as per that segment test case 
//
//**********************************************************************************************

	// Set the QC Id constants for Seg1 and 2 components as required
	
	/*
	setSuite["QC_Id_seg1"] = "AAA"
	setSuite["QC_Id_seg2"] = "BBB"
	*/

//***********************************************************************
// Test Case setup
//	Using test[testEpicCondition] to set the test cases for running
//	Setting a default which runs Org User and Asset (ie as per previous versions)
//	Ensures GUI will run without need to incorporate these data conditions
//	in the Gui logic.
// 	Logic is customised and reliant on hardcoded values
//************************************************************************

	if (test["testEpicCondition"] =="Create_Container") {
		setSuite["propTestCase1"] = "CreateContainer"
		//setSuite["propTestCase2"] = "Some other test case II"
		//setSuite["propTestCase3"] = "Some other test case III"
		
		}

//******************
// Logging update
//******************
	
	
	test["currentTest"] = "ID: " + test["TestID"] + " " + "Objective: " + test["TestObjective"] 
	test["002_read"] = test["currentTest"] + " has been loaded"
	log.info test["002_read"] 



//******************************************************
// Save Data to Test Case Properties and update logging
//******************************************************
	setSuite["propsLogger"] = "Properties in ${getSuite["propEnvironment"]} and system related are loaded, user:${getSuite["username"]}, host:${getSuite["hostname"]}, home:${getSuite["userHomeFolder"]} were loaded into SoapUI Properties"
	setSuite["000_TESTSTRATEGY"] = setSuite["strategyLogger"] + ", " + setSuite["propsLogger"]; log.info setSuite["propsLogger"]
	setSuite["otherSimDataLogger"] = "Data for ${test["TestID"]} sourced and set"; setSuite["000_TESTSTRATEGY"]= setSuite["strategyLogger"] + ", " + setSuite["propsLogger"] + ", " + setSuite["otherSimDataLogger"]
	context.ManageSoapUIProperties.saveToProperties(testRunner.testCase.testSuite.project, almConfig) //alm configuration belongs at the project level
	context.ManageSoapUIProperties.saveToProperties(testRunner.testCase.testSuite, test)
	context.ManageSoapUIProperties.saveToProperties(testRunner.testCase.testSuite, setSuite) // or saveToPropertiesLocal(testCase.testSuite, setSuite) to use the local version


log.info "Runner-read-${getSuite["projectName"]} step completed"

</script></con:config></con:testStep><con:testStep type="groovy" name="run" id="0e8855a5-0fe1-4f07-a370-4ff114aa5777"><con:settings/><con:config><script>
import java.util.concurrent.TimeUnit

//*********************************
// Setup the Test Case for Running 
//*********************************

	//def testSuite = testRunner.testCase.testSuite.getPropertyValue("propTestSuite") //get testSuite
	def testSuite = testRunner.testCase.testSuite.getName() //get testSuite
	def testProject = testRunner.testCase.testSuite.project.getName() //get testSuite
	def tsConfiguration = testRunner.testCase.testSuite.project.getTestSuiteByName( "${testSuite}" );

	def testCase1, testCase2, testCase3 //defined in logic from Runner-read (formerly set in properties file)
	testCase1 = testRunner.testCase.testSuite.getPropertyValue("propTestCase1") // get testCase1
	testCase2 = testRunner.testCase.testSuite.getPropertyValue("propTestCase2") // get testCase2
	testCase3 = testRunner.testCase.testSuite.getPropertyValue("propTestCase3") // get testCase2
	
	def tcConfiguration1 = tsConfiguration.getTestCaseByName( "${testCase1}" )
	def tcConfiguration2 = tsConfiguration.getTestCaseByName( "${testCase2}" )
	def tcConfiguration3 = tsConfiguration.getTestCaseByName( "${testCase3}" )	

	def propMock = testRunner.testCase.testSuite.getPropertyValue("propMock") // get mock status
	def propStrategy = testRunner.testCase.testSuite.getPropertyValue("propStrategy") // get prop strategy

	//def testAssetType = testRunner.testCase.testSuite.getPropertyValue("testAssetType")
	//def testEDWProcessing = testRunner.testCase.testSuite.getPropertyValue("propEDWProcessing")	
	
	//log.info "${tcConfiguration1} aa"
	//log.info "${testCase1} xx"
//*****************
// Run the Tests
//*****************

	if (testCase1 != null) {tcConfiguration1.run( null,true);TimeUnit.SECONDS.sleep(90)} //was 90 secs
	if (testCase2 != null) {tcConfiguration2.run( null,true);TimeUnit.SECONDS.sleep(60)} //longer delay for user to asset
	if (testCase3 != null) {tcConfiguration3.run( null,true);TimeUnit.SECONDS.sleep(10)} //was 120 secs	


//************************************************
// Delays as per properties
//	Both for Asset Epics and Standalone Tests
//************************************************


	// Logic to set the delay based on validation settings (and apply to B2G submitMedicalData)
	def sleepMins = 5
	testRunner.testCase.testSuite.setPropertyValue("sleepMins", "3") // for the B2G submission

	//if (propStrategy =="standalone"){TimeUnit.SECONDS.sleep(1)} // for standalone test cases

	

	/*
	  
	 
	if (testEDWProcessing =="EDW:WAIT;"){sleepMins=50; testRunner.testCase.testSuite.setPropertyValue("sleepMins", "48") } // for the B2G submission
	
	if (testAssetType =="ForPublication"){
		if (propMock =="off") {TimeUnit.MINUTES.sleep(1)}
		else if (propMock =="on") {TimeUnit.MINUTES.sleep(1)}}

	if (testAssetType =="ForSubmission"){
		if (propMock =="off") {TimeUnit.MINUTES.sleep(1)}
		else if (propMock =="on") {TimeUnit.MINUTES.sleep(1)}}

	if (testAssetType =="B2G"){
		if (propMock =="off") {TimeUnit.MINUTES.sleep(sleepMins)}
		else if (propMock =="on") {TimeUnit.MINUTES.sleep(1)}}

	if ((testAssetType =="")||(testAssetType ==null)||(testAssetType ==" ")){
			TimeUnit.MINUTES.sleep(1)}
*/
	
log.info "Runner-run-${testProject} step completed"			</script></con:config></con:testStep><con:testStep type="groovy" name="loop" id="d5f9c295-1256-43ec-ada0-fc062d50f1de"><con:settings/><con:config><script>//*************************
// Get Counts
//*************************
	def propStrategy = testRunner.testCase.testSuite.getPropertyValue("propStrategy")
	def numberOfRows, numberOfTests, testCounter, nextTestCounter, testID, testObjective
	numberOfRows = testRunner.testCase.testSuite.getPropertyValue("numberOfRows").toInteger()
	numberOfTests = testRunner.testCase.testSuite.getPropertyValue("numberOfTests").toInteger()
	testCounter = testRunner.testCase.testSuite.getPropertyValue("testCounter").toInteger()
	nextTestCounter = testRunner.testCase.testSuite.getPropertyValue("nextTestCounter").toInteger()
	testID = testRunner.testCase.testSuite.getPropertyValue("TestID")
	testObjective = testRunner.testCase.testSuite.getPropertyValue("TestObjective")



//*************************
// Report on test completed
//*************************
	def stepLogger = "Test ${testCounter}"  + " " + "${testID}" + " " + "${testObjective}" + " was completed"
	log.info stepLogger



//**************************
// Apply Counter logic
//************************** 
switch(propStrategy) {
	case "GUI":
	case "gui":
		testRunner.testCase.testSuite.setPropertyValue("Stop", "T")
	break;
	
	case "database":
	case "Database":
	case "csv":
	case "CSV":	
		testCounter = testCounter + 1
		nextTestCounter = nextTestCounter + 1
		testRunner.testCase.testSuite.setPropertyValue("testCounter", testCounter.toString())
		testRunner.testCase.testSuite.setPropertyValue("nextTestCounter", nextTestCounter.toString())

	// check if at the end of the test list
	if (testCounter > numberOfTests) {
		testRunner.testCase.testSuite.setPropertyValue("Stop", "T")
		log.info "Bulk Test Run completed"
		//no loop
		assert true}
	else {
		testRunner.testCase.testSuite.setPropertyValue("Stop", "F")
		//need to continue the loop
		log.info "Going to the next test"
		sleep(5000) //temp delay to see logic
		testRunner.gotoStepByName("read")}
	break;
}

log.info "Runnner-loop step completed"

</script></con:config></con:testStep><con:setupScript>/*
 * Name - Runner Script
 * Author - Michael De Robertis
 * 
 * Peforms various critical functions around setup, initialisation, and driving of test case execution
 * 
 */


import com.eviware.soapui.support.UISupport
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.impl.wsdl.teststeps.*
import java.util.concurrent.TimeUnit
 
//***************************************************
// Create local functions for SoapUI and property map needs - pre library loading
//***************************************************
	
	def getMyPropertiesLocal = {propertyLocation, mapToCreate
		->
		for (prop in propertyLocation.getPropertyList()) {
			propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
			mapToCreate[prop.getName()] = propertyMapValue}}
	
	def saveToPropertiesLocal = {propertyLocation, mapToSave
		->
		mapToSave.each {propertyName,	propertyValue
			->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }}

//*********************
// Property Map defs
//*********************
	def getSuite=[:], getProj=[:], setTest = [:], setSuite = [:], setProj=[:], dbProps=[:], fileProps=[:]
	
//***************************************
// Clear properties and enable all steps
//  enabled here instead of teardown because sometimes when the simulator
//	run takes longer than expected the runner will clear properties before logging results
//***************************************

	String[] propToRemove1 = new String[testCase.testSuite.getPropertyCount()];propToRemove1 = testCase.testSuite.getPropertyNames();
	for ( int x = 0 ; x &lt; propToRemove1.size(); x++ ){testCase.testSuite.removeProperty( propToRemove1[x] )}
	
	String[] propToRemove = new String[testCase.getPropertyCount()];propToRemove = testCase.getPropertyNames();
	for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){testCase.removeProperty( propToRemove[i] )}



//***************************************
// Initialisations
//	Now looking for the test suite name in the the properties name
//***************************************
	getMyPropertiesLocal(testRunner.testCase.testSuite.project, getProj)
	setSuite["propEnvironment"] = "DEV"; setSuite["propEnvironment"] = getProj["projectEnvironment"]
	setSuite["projectName"] = testRunner.testCase.testSuite.project.name  
	setSuite["projectLocation"]=getProj["projectLocation"]
	setSuite["propsLocation"] = "${getProj["projectLocation"]}\\bin\\${setSuite["projectName"]}_${testCase.testSuite.getName()}.properties"; 

	if (setSuite["propEnvironment"]=="MOCK") {setSuite["propMock"]="on"} else {setSuite["propMock"]="off"}

//************************************************************
// Get Properties file and Strategy and set the start delay
//************************************************************
	Properties props = new Properties()
	File propsFile = new File("${setSuite["propsLocation"]}")
	propsFile.withInputStream { stream -> props.load(stream) }; props.each { testRunner.testCase.testSuite.setPropertyValue(it.key, it.value)}
	getMyPropertiesLocal(testRunner.testCase.testSuite, fileProps)
	setSuite["strategyLogger"] = "${fileProps["propStrategy"]} Strategy chosen"



//***********************************************
// Initialisations for properties not set in file
// merged post data portal release 14122018
//***********************************************

	if (fileProps["propStartInMinutes"]==null){setSuite["propStartInMinutes"]="0"; TimeUnit.MINUTES.sleep(setSuite["propStartInMinutes"].toInteger())}; else {TimeUnit.MINUTES.sleep(fileProps["propStartInMinutes"].toInteger())}
	if (fileProps["propProperties"]==null) {setSuite["propProperties"]= "db"} 
	if (fileProps["propJdbcSteps"]==null) {setSuite["propJdbcSteps"]= "off"}
	if (fileProps["propKeepData"]==null) {setSuite["propKeepData"]= "false"}	



//*********************************************
// Get Properties and Test Environment from DB  
//*********************************************
	com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver"); 
	sql = Sql.newInstance("${fileProps["propDBConnection"]}", "${fileProps["propDBAutoUser"]}", "${fileProps["propDBAutoPwd"]}", "oracle.jdbc.OracleDriver") 
//	setSuite["queryGetEnvironment"] = "" + "select * from CAF.TESTPROPERTIES where propStrategy = " + "'${fileProps["propStrategy"]}'" +" and propEnvironment = " + "'${getProj["projectEnvironment"]}'" +" and propCore = " + "'core'"	
	setSuite["queryGetEnvironment"] = "" + "select * from CAF.TESTPROPERTIES where propStrategy = " + "'${fileProps["propStrategy"]}'" +" and propEnvironment = " + "'${getProj["projectEnvironment"]}'" +" and propCore = " + "'core'" +" and application = " + "'${setSuite["projectName"]}'"	
	//log.info setSuite["queryGetEnvironment"]
	res = sql.firstRow(setSuite["queryGetEnvironment"]); 
	setSuite["queryGetEnvironment"] = res.toString()

//**********************************************************
// Override above property settings based on propProperties
//**********************************************************

	//if local, use the library settings stored in the file
	if (fileProps["propProperties"] == "local") {	
		core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
		scripts = core.testSuites["${script}"]}
		
	//if set to db, get everything stored in db
	if (setSuite["propProperties"] == 'db') {
		dbProps["propPropertiesLABEL"]='db'
		dbProps["propMock"] = res[1].toString();dbProps["propCore"] = res[3].toString();dbProps["propScript"] = res[4].toString()
		dbProps["propEndpoint1"] = res[6].toString();dbProps["propEndpoint2"] = res[7].toString();dbProps["propEndpoint3"] = res[8].toString();dbProps["propEndpoint4"] = res[9].toString();dbProps["propEndpoint5"] = res[10].toString();
		dbProps["propAdminUser1"] = res[12].toString();dbProps["propAdminUser2"] = res[13].toString();dbProps["propsLabel"] = res[14].toString();dbProps["propAdminUser3"] = res[17].toString()
		dbProps["propIntUser1"] = res[18].toString();dbProps["propIntUser2"] = res[19].toString();dbProps["propIntUser3"] = res[20].toString();dbProps["propIntUser4"] = res[21].toString();
		dbProps["propALMUser"] = res[22].toString();dbProps["propALMPw"] = res[23].toString();dbProps["propALMDragonflyPlugin"] = res[24].toString(); dbProps["propALMURL"] = res[25].toString();dbProps["propALMDomain"] = res[26].toString();dbProps["propALMProject"] = res[27].toString();
		dbProps["propALMTestPlanDirectory"] = res[28].toString();dbProps["propALMTestLabDirectory"] = res[29].toString();dbProps["propALMProjectPath"] = res[30].toString();dbProps["propALMSoapUIPath"] = res[31].toString();dbProps["propALMOverrideTestRuns"] = res[32].toString()
		//anything not gotten from here will always be derived from the file (eg should do this for passwords and other user local specific settings)
		setSuite["propCore"]=dbProps["propCore"]; setSuite["propScript"]=dbProps["propScript"]
		core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${dbProps["propCore"]}"); scripts = core.testSuites["${dbProps["propScript"]}"]
		scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)
		saveToPropertiesLocal(testRunner.testCase.testSuite, dbProps) 
		} 
		sql.close()	
		
	
//*****************************************************************
// Apply ALM / DragonFly Project Integration if set in properties
//*****************************************************************
	if (dbProps["propALMDragonflyPlugin"]== 'enabled') {   //optimise as required (eg include include checks on the test environment and strategy 
			// set project properties as required by DragonFly   
						
			setProj["QC_URL"]= dbProps["propALMURL"];
			setProj["QC_Domain"]= dbProps["propALMDomain"];
			setProj["QC_Project"]= dbProps["propALMProject"];
			setProj["QC_TestPlanDirectory"]= dbProps["propALMTestPlanDirectory"];
			setProj["QC_TestLabDirectory"]= dbProps["propALMTestLabDirectory"];
			setProj["QC_ProjectPath"]= dbProps["propALMProjectPath"]
			setProj["QC_soapUIPath"]= dbProps["propALMSoapUIPath"];
			setProj["QC_Dragonfly_Plugin"]= dbProps["propALMDragonflyPlugin"];
			setProj["QC_Override_Test_Runs"]= dbProps["propALMOverrideTestRuns"]
			setProj["LABEL"] = "dragonfly enabled for Runner"
			
			if (fileProps["propALMUser"]!=null) {setProj["QC_user"] = fileProps["propALMUser"]}; else {setProj["QC_user"] = dbProps["propALMUser"]}
			if (fileProps["propALMPw"]!=null) {setProj["QC_password"] = fileProps["propALMPw"]}; else {setProj["QC_password"] = dbProps["propALMPw"]}			
			
			// Prompt for a password ***FIX LOGIC IN FUTURE**
			if ((getProj["QC_password"] == "")||(getProj["QC_password"] ==null)||(getProj["QC_password"] =="null")||(getProj["QC_password"] ==" ")) 
				core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${getSuite["propCore"]}")
				script = testRunner.testCase.testSuite.getPropertyValue("${getSuite["propScript"]}"); scripts.testCases["automation-v1"].testSteps["Security"].run(testRunner, context)
				setProj["QC_password"] = UISupport.prompt("Enter your ALM Password.","Password", "${getProj["QC_password"]}")
		
			}
	else {setProj["QC_URL"]= setProj["QC_Domain"]= setProj["QC_Project"]= setProj["QC_user"]= setProj["QC_password"] ="N/A"; setProj["QC_Dragonfly_Plugin"]="disabled"
		setProj["LABEL"] = "dragonfly disabled from Runner"}


//***********************************************
// Initialisations for properties set in file and db 
// (file overrides)
//***********************************************
	// File and DB properties already loaded and all of the following could exist in both, hence set to the file ones
	if (fileProps["propALMUser"]!=null) {setProj["QC_user"] = fileProps["propALMUser"]}; else {setProj["QC_user"] = dbProps["propALMUser"]}


//**************************************
// Use Library to set environment stuff
//**************************************
	scripts.testCases["automation-v1"].testSteps["SystemRelated"].run(testRunner, context)
	setSuite["username"] = context.SystemRelated.username
	setSuite["userHomeFolder"] = context.SystemRelated.userHomeFolder
	setSuite["hostname"] = context.SystemRelated.hostname

//*******************************************
// Define ALM Test Set, QC_ID, and QC_Upload
//*******************************************	
	setSuite["QC_TestSet"] = "${setSuite["propEnvironment"]}"

	//Force the disablement of Dragonfly setup for test cases here (enable for simulator test cases through test suite props)
	setTest["QC_Id"]=""; setTest["QC_Upload"]="disabled"; setTest["QC_Req_Ids"]=""; setTest["QC_Req_Recursive"]=""; setTest["QC_Mapped_Test_Id"]="" //Disable Runner to ALM
	setSuite["QC_Id"]=""; setSuite["QC_Upload"]="enabled"; setSuite["QC_Req_Ids"]=""; setSuite["QC_Req_Recursive"]=""; setSuite["QC_Mapped_Test_Id"]="" //For Test Case to ALM (when getting testSuite props)

//*************************
// initialise the counters
//*************************
// MDR TEST 11/2
setSuite["Stop"] = "F";	setSuite["testCounter"]= "1"; setSuite["nextTestCounter"]= "2";



//***************
// Logging &amp; Save
//***************
	context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, setTest)	
	context.ManageSoapUIProperties.saveToProperties(testRunner.testCase.testSuite, setSuite)
	context.ManageSoapUIProperties.saveToProperties(testRunner.testCase.testSuite, fileProps)
	context.ManageSoapUIProperties.saveToProperties(testRunner.testCase.testSuite.project, setProj)

	//saveToPropertiesLocal(testCase.testSuite, setSuite) 
	log.info "Runner-Setup-${setSuite["projectName"]} completed for ${fileProps["propStrategy"]} data driven into environment ${setSuite["propEnvironment"]}"
</con:setupScript><con:tearDownScript><![CDATA[
/*

String[] propToRemove = new String[testCase.getPropertyCount()];
propToRemove = testCase.getPropertyNames();
for ( int i = 0 ; i < propToRemove.size(); i++ ){
    testCase.removeProperty( propToRemove[i] );
	}

*/

String[] propToRemove1 = new String[testCase.testSuite.getPropertyCount()];
propToRemove1 = testCase.testSuite.getPropertyNames();
for ( int x = 0 ; x < propToRemove1.size(); x++ ){
    testCase.testSuite.removeProperty( propToRemove1[x] );
	}





/*
import com.eviware.soapui.impl.wsdl.teststeps.*
 
// turn on steps (have to do on the loop so that the goto READ step works, hence duplicating in LOOP might need to remove from here)
def enableAllSteps (testCaseContext) {
			testCaseContext.testSuite.getTestCaseList().each
		{
    		it.testStepList.each 
    			{
         		if( it.disabled) { it.setDisabled(false)}
    			}}}
enableAllSteps(testRunner.testCase)
*/

/*
String[] propToRemove = new String[testCase.getPropertyCount()];
propToRemove = testCase.getPropertyNames();
for ( int i = 0 ; i < propToRemove.size(); i++ ){
    testCase.removeProperty( propToRemove[i] );
	}
*/

/*
 *  Simulator TearDown Script
 *  Author : Michael De Robertis 
 *  16/08/2018 : 
 *  	Current version does some basic cleanup post test execution including:
 *  		Deletion of test case properties, turning off mocking, and enabling all steps
 */


/*

import com.eviware.soapui.impl.wsdl.teststeps.*
 
// turn on steps (have to do on the loop so that the goto READ step works, hence duplicating in LOOP might need to remove from here)
def enableAllSteps (testCaseContext) {
			testCaseContext.testSuite.getTestCaseList().each
		{
    		it.testStepList.each 
    			{
         		if( it.disabled) { it.setDisabled(false)}
    			}}}
enableAllSteps(testRunner.testCase)

//context.testCase.getTestStepByName("CDP").setDisabled(true) // turn of db checks


// clear properties
//def almIntegration = testRunner.testCase.getPropertyValue("propALMDragonflyPlugin")
//if (almIntegration=="disabled"){
String[] propToRemove = new String[testCase.getPropertyCount()];
propToRemove = testCase.getPropertyNames();
for ( int i = 0 ; i < propToRemove.size(); i++ ){
    testCase.removeProperty( propToRemove[i] );
	}
//	}


// turn mocking off if on

def mockStatus = testRunner.testCase.getPropertyValue("propMock")
if (mockStatus == "on") {
	testRunner.testCase.testSuite.project.getMockServiceByName("LocalhostMock").getMockRunner().stop()
    // testRunner.testCase.getTestStepByName("updateUserGroupings").getAssertionByName("setDelay").disabled = false //**TESTING
    // testRunner.testCase.getTestStepByName("saveB2GDataAsset").getAssertionByName("setDelay").disabled = false   //**TESTING  
	}
    			
    			
*/

//Force the disablement of Dragonfly reporting against the Runner test case
//testRunner.testCase.setPropertyValue("QC_Id","")
//testRunner.testCase.setPropertyValue("QC_Upload","disabled")

/*

	String[] propToRemove = new String[testCase.getPropertyCount()];propToRemove = testCase.getPropertyNames();
	for ( int i = 0 ; i < propToRemove.size(); i++ ){testCase.removeProperty( propToRemove[i] )}

	String[] propToRemove1 = new String[testCase.testSuite.getPropertyCount()];propToRemove1 = testCase.testSuite.getPropertyNames();
	for ( int x = 0 ; x < propToRemove1.size(); x++ ){testCase.testSuite.removeProperty( propToRemove1[x] )}
*/



]]></con:tearDownScript><con:properties/></con:testCase><con:testCase id="82ca863c-978c-4dc0-b601-2291400b8695" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="Runner(dragonflyMockup)" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="read" id="6110f2bb-3093-492e-b0c0-8b60834abdf1"><con:settings/><con:config><script>import groovy.sql.Sql 

//fn to manage props
	def getMyPropertiesLocal = {propertyLocation, mapToCreate
		->
		for (prop in propertyLocation.getPropertyList()) {
			propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
			mapToCreate[prop.getName()] = propertyMapValue}}
	
	def saveToPropertiesLocal = {propertyLocation, mapToSave
		->
		mapToSave.each {propertyName,	propertyValue
			->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }}

//initialisation stuff
	def test=[:], almConfig=[:], dbProps=[:], getSuite=[:]
	getMyPropertiesLocal(testRunner.testCase.testSuite, getSuite) 


// get test data 
def testInput
switch(getSuite["propStrategy"]) {
	case "database":
	case "Database":
		log.info "not enabled for this project"
	break;
	case "CSV":
	case "csv":
		def f = new File (getSuite["propCsv1"])
		List r = f.readLines(); 
		testInput = r[getSuite["testCounter"].toInteger()].split(',')
		
		test["TestID"] = testInput[0]			
		test["TestObjective"] = testInput[1]
		test["Application"] = testInput[2]
		test["Action1"] = testInput[3]
		test["Action2"] = testInput[4]
		test["Action3"] = testInput[5]
		//test["QC_Mapped_Test_Id"] = testInput[6]
		test["QC_ID"] = testInput[6]
	break;}

	//testRunner.testCase.setPropertyValue("QC_Mapped_Test_Id","${test["QC_Mapped_Test_Id"]}")  // not sure if applicable here or in the simulator
	//testRunner.testCase.setPropertyValue("QC_ID","${test["QC_ID"]}")  // not sure if applicable here or in the simulator
	//testRunner.testCase.setPropertyValue("QC_Upload","enabled")  // disabled means runner setup/config for test cases wont be pushed across to ALM

//logging	and save
	//test["currentTest"] = "ID: " + test["TestID"] + " " + "Objective: " + test["TestObjective"] + "App: " + test["Application"] 
	//test["002_read"] = test["currentTest"] + " has been loaded"
	saveToPropertiesLocal(testRunner.testCase.testSuite, test)

log.info "I MADE IT TO THE END OF READ"	</script></con:config></con:testStep><con:testStep type="groovy" name="RunTestCase" id="738a1417-b58e-486b-9b62-906728e71775"><con:settings/><con:config><script>//*************************
// Get Counts
//*************************
	def tsConfiguration = testRunner.testCase.testSuite.project.getTestSuiteByName( "AUTO" );
	def tcConfiguration = tsConfiguration.getTestCaseByName( "Simulator" )
	def numberOfTests = tsConfiguration.getPropertyValue("numberOfTests").toInteger()
	def testCounter = tsConfiguration.getPropertyValue("testCounter").toInteger()
	def qcID = tsConfiguration.getPropertyValue("QC_ID")
	
	if (testCounter &lt; numberOfTests) {
	
		tcConfiguration.setPropertyValue("QC_ID","$qcID")  // not sure if applicable here or in the simulator
		tcConfiguration.setPropertyValue("QC_Upload","disabled")  // disabled means runner setup/config for test cases wont be pushed across to ALM
		tcConfiguration.run(null,true)
		sleep 10000
          }
log.info "I MADE IT TO THE END OF RUNTESTCASE"
</script></con:config></con:testStep><con:testStep type="groovy" name="loop" id="f65dea39-0cf9-4f77-8884-f6bba24f9756"><con:settings/><con:config><script>//*************************
// Get Counts
//*************************
	def propStrategy = testRunner.testCase.testSuite.getPropertyValue("propStrategy")
	def numberOfRows, numberOfTests, testCounter, nextTestCounter, testID, testObjective
		numberOfRows = testRunner.testCase.testSuite.getPropertyValue("numberOfRows").toInteger()
		numberOfTests = testRunner.testCase.testSuite.getPropertyValue("numberOfTests").toInteger()
		testCounter = testRunner.testCase.testSuite.getPropertyValue("testCounter").toInteger()
		nextTestCounter = testRunner.testCase.testSuite.getPropertyValue("nextTestCounter").toInteger()
		testID = testRunner.testCase.testSuite.getPropertyValue("TestID")
		testObjective = testRunner.testCase.testSuite.getPropertyValue("TestObjective")



//*************************
// Report on test completed
//*************************
	def stepLogger = "Test ${testCounter}"  + " " + "${testID}" + " " + "${testObjective}" + " was completed"
	log.info stepLogger



//**************************
// Apply Counter logic
//************************** 
switch(propStrategy) {
	case "GUI":
	case "gui":
		testRunner.testCase.testSuite.setPropertyValue("Stop", "T")
	break;
	
	case "database":
	case "Database":
	case "csv":
	case "CSV":	
		testCounter = testCounter + 1
		nextTestCounter = nextTestCounter + 1
		testRunner.testCase.testSuite.setPropertyValue("testCounter", testCounter.toString())
		testRunner.testCase.testSuite.setPropertyValue("nextTestCounter", nextTestCounter.toString())

	
	// check if at the end of the test list
	//if (testCounter > numberOfTests) {
	if (numberOfTests &lt;= testCounter) {
		testRunner.testCase.testSuite.setPropertyValue("Stop", "T")
		log.info "Bulk Test Run completed"
		//no loop
		assert true}
	else {
		testRunner.testCase.testSuite.setPropertyValue("Stop", "F")
		//need to continue the loop
		log.info "Going to the next test"
		sleep(1000) //temp delay to see logic
		testRunner.gotoStepByName("read")}
	break;

}

//******************************************************
// Save Data 
//******************************************************
	//context.ManageSoapUIProperties.saveToProperties(testRunner.testCase.testSuite, output)


log.info "I MADE IT TO THE END OF LOOP"
</script></con:config></con:testStep><con:setupScript>import com.eviware.soapui.support.UISupport
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils

//fn to manage props
	def getMyPropertiesLocal = {propertyLocation, mapToCreate
		->
		for (prop in propertyLocation.getPropertyList()) {
			propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
			mapToCreate[prop.getName()] = propertyMapValue}}
	
	def saveToPropertiesLocal = {propertyLocation, mapToSave
		->
		mapToSave.each {propertyName,	propertyValue
			->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }}

// property maps
	def getSuite=[:], getProj=[:], setSuite = [:], setProj=[:], dbProps=[:]
	

// initialisations
	getMyPropertiesLocal(testRunner.testCase.testSuite.project, getProj)
	setSuite["userHomeFolder"] = System.getProperty("user.home")
	setSuite["propEnvironment"] = "DEV"; setSuite["propEnvironment"] = getProj["projectEnvironment"]
	setSuite["projectName"] = testRunner.testCase.testSuite.project.name  
	setSuite["projectLocation"]=getProj["projectLocation"]
	setSuite["propsLocation"] = "${getProj["projectLocation"]}\\bin\\${setSuite["projectName"]}.properties"; 
	setSuite["propMock"]="on"// if (setSuite["propEnvironment"]=="MOCK") {setSuite["propMock"]="on"} else {setSuite["propMock"]="off"}


// get file props
	Properties props = new Properties()
	File propsFile = new File("${setSuite["propsLocation"]}")
	propsFile.withInputStream { stream -> props.load(stream) }; props.each { testRunner.testCase.testSuite.setPropertyValue(it.key, it.value)}
	getMyPropertiesLocal(testRunner.testCase.testSuite, getSuite)
	setSuite["strategyLogger"] = "${getSuite["propStrategy"]} Strategy chosen"
		
// alm	
	if (getSuite["propALMDragonflyPlugin"]== 'enabled') {  
			setProj["QC_URL"]= getSuite["propALMURL"];
			setProj["QC_Domain"]= getSuite["propALMDomain"];
			setProj["QC_Project"]= getSuite["propALMProject"];
			setProj["QC_user"]= getSuite["propALMUser"];
			setProj["QC_password"]= getSuite["propALMPw"]
			setProj["QC_TestPlanDirectory"]= getSuite["propALMTestPlanDirectory"];
			setProj["QC_TestLabDirectory"]= getSuite["propALMTestLabDirectory"];
			setProj["QC_ProjectPath"]= getSuite["propALMProjectPath"]
			setProj["QC_soapUIPath"]= getSuite["propALMSoapUIPath"];
			setProj["QC_Dragonfly_Plugin"]= getSuite["propALMDragonflyPlugin"];
			setProj["QC_Override_Test_Runs"]= getSuite["propALMOverrideTestRuns"]
			setProj["LABEL"] = "dragonfly enabled for Runner"
		}
	
		else {setProj["QC_URL"]= setProj["QC_Domain"]= setProj["QC_Project"]= setProj["QC_user"]= setProj["QC_password"] ="N/A"; setProj["QC_Dragonfly_Plugin"]="disabled"
		setProj["LABEL"] = "dragonfly disabled from Runner"}
	
	setSuite["QC_TestSet"] = "${setSuite["propEnvironment"]}_${new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())}"
	
	switch(getSuite["propStrategy"]) {
		case "GUI":
		case "gui":	
		case "database":
		case "Database":	
			log.info "disabled for this project"
		break;	
		case 'csv':
		case "CSV":	
			setSuite["strategyLogger"] == "CSV Test Case Data source chosen for the Test Strategy"; setSuite["csvLocation"] = getSuite["propCsv1"]
			def f = new File (setSuite["csvLocation"]);List r = f.readLines();rows = r.size.toInteger()
			setSuite["numberOfRows"] = rows.toString()
			setSuite["numberOfTests"] = (rows-1).toString()
			setSuite["logger"] = "The number of tests in csv file of " + f + " has been stored in readiness for execution"
			setSuite["Stop"] = "F";	setSuite["testCounter"]= "1"; setSuite["nextTestCounter"]= "2";
		break;
		}
// log and save
	setSuite["propsLogger"] = "Properties in ${setSuite["propEnvironment"]} and system related are loaded, user:${setSuite["username"]}, host:${setSuite["hostname"]}, home:${setSuite["userHomeFolder"]} were loaded into SoapUI Properties"
	setSuite["000_TESTSTRATEGY"] = setSuite["strategyLogger"] + ", " + setSuite["propsLogger"]; log.info setSuite["propsLogger"]
	setSuite["otherSimDataLogger"] = "Data from User Simulator sourced and set"; setSuite["000_TESTSTRATEGY"]= setSuite["strategyLogger"] + ", " + setSuite["propsLogger"] + ", " + setSuite["otherSimDataLogger"]
	saveToPropertiesLocal(testCase.testSuite, setSuite) // or saveToPropertiesLocal(testCase.testSuite, setSuite) to use the local version
	saveToPropertiesLocal(testRunner.testCase.testSuite.project, setProj)








</con:setupScript><con:tearDownScript>import com.eviware.soapui.impl.wsdl.teststeps.*

String[] propToRemove = new String[testCase.getPropertyCount()];
propToRemove = testCase.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    testCase.removeProperty( propToRemove[i] );
	}

String[] propToRemove1 = new String[testCase.testSuite.getPropertyCount()];
propToRemove1 = testCase.testSuite.getPropertyNames();
for ( int x = 0 ; x &lt; propToRemove1.size(); x++ ){
    testCase.testSuite.removeProperty( propToRemove1[x] );
	}
 
// turn on steps (have to do on the loop so that the goto READ step works, hence duplicating in LOOP might need to remove from here)
/*
def enableAllSteps (testCaseContext) {
			testCaseContext.testSuite.getTestCaseList().each
		{
    		it.testStepList.each 
    			{
         		if( it.disabled) { it.setDisabled(false)}
    			}}}
enableAllSteps(testRunner.testCase)
*/
 //testRunner.testCase.testSuite.project.getMockServiceByName("mymockservice")getMockRunner().stop(); 
</con:tearDownScript><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="34a8590d-c2b9-40b9-8834-a757967e562f" name="External Data Sources"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0da4b27c-3acc-4acc-b21f-77ed8291db46" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Read External Files" searchProperties="true"><con:settings/><con:testStep type="groovy" name="loop through testplan.csv and map to string array II" id="59ec68b5-38be-4c2b-af5c-085e521283d1"><con:settings/><con:config><script>

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def f = "C:\\Temp\\testfiles\\testplan.csv"

def testInputs = []
def lines = 0

f.splitEachLine(',') {
	def row = []
	row = it
	testInputs &lt;&lt; row
	
	testID = testInputs[lines][0]	
	testObjective = testInputs[lines][1]	
	testEnvironment = testInputs[lines][2]
	application = testInputs[lines][3]	

	log.info testID + " " + testObjective + " " + testEnvironment + " " + application

	lines ++
}


context.testCase.testSuite.project.setPropertyValue("testID", testID)
context.testCase.testSuite.project.setPropertyValue("testObjective", testObjective)
context.testCase.testSuite.project.setPropertyValue("testEnvironment", testEnvironment)
context.testCase.testSuite.project.setPropertyValue("application", application)

//log.info </script></con:config></con:testStep><con:testStep type="groovy" name="loop through testplan.csv and map to string array" id="a9821e1e-3673-4705-95d8-cc18db7f85d2"><con:settings/><con:config><script>
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//Define Path
def csvFilePath = "C:\\Temp\\testfiles\\testplan.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))
//Header
firstline = context.fileReader.readLine()
//Actual Test Data
firstline = context.fileReader.readLine()
//Split data with comma
String[] data = firstline.split(",")
log.info data[0]
log.info data[1]
//Assign each comma separated value to the Property
context.testCase.testSuite.project.setPropertyValue("testID", data[0])
context.testCase.testSuite.project.setPropertyValue("testObjective", data[1])
context.testCase.testSuite.project.setPropertyValue("testEnvironment", data[2])
context.testCase.testSuite.project.setPropertyValue("application", data[3])


/*
 * 
 * If the end of the file hasn't been reached (nextLine does NOT equal null)
  split the line and assign new property values, rename test request steps,
  and go back to the first test request step
  * MDR - have not experimented with this technique because the row looping needs to occur on a per test case loop (not a per groovy step loop)
  */


nextLine = context.fileReader.readLine()
if(nextLine != null){
 
 // **AS DONE FOR LINE 1 ** (
 testRunner.gotoStep(0)
}



// Teardown (close the reader after use)
context.fileReader.close()
</script></con:config></con:testStep><con:testStep type="groovy" name="loop through test.properties and store to soapui properties" id="fb941a46-f796-4820-9017-e420f05705c5"><con:settings/><con:config><script>/* 
 * This example shows how values can be read from a file (eg test/environment/configuration details)
 *  Ideally, such data would be derived from a common location (eg a Test DB), however this is useful for when user sensitive information also needs to be retrieved.
 *  For example, under a user\documents location, their app db and app server login details could be stored in a properties file (which gets retrieved) 
 *  
 *  
 */



def props = new Properties()
new File("C:\\Temp\\testfiles\\test.properties").withInputStream { s ->
  props.load(s) 
}
props.each {
    context.testCase.testSuite.project.setPropertyValue(it.key, it.value)
}



/*

	def saveToProperties = {propertyLocation, mapToSave
		->
		mapToSave.each {propertyName,	propertyValue
			->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }
		
	}
 
 */

</script></con:config></con:testStep><con:testStep type="groovy" name="read input from csv" id="a272f5e2-66ef-4258-81f8-9b8d5c4171e8"><con:settings/><con:config><script>//Read input from a csv file

def f = new File (csvLocation)

// count the rows to determine scope/quantities
List r = f.readLines()
rows = r.size.toInteger()

// store the row
String[] testInput = r[testCounter].split(',')

</script></con:config></con:testStep><con:testStep type="groovy" name="loop for csv data driven test" id="7a631d53-d942-43d5-a8be-e076be844f1d"><con:settings/><con:config><script>
// initialise the counters for csv  **EG IN AN INITIATE STEP**
testRunner.testCase.setPropertyValue("Stop", "F") //check if correct
testRunner.testCase.setPropertyValue("testCounter", "1")
testRunner.testCase.setPropertyValue("nextTestCounter", "2")

// read the data **EG READ STEP as per above method for reading csv input**

// execute the test steps **EG AS PER THE TEST CASE DESIGN**

// increment the counter (as the test has already been executed)  **EG IN THE LOOP STEP
testCounter = testCounter + 1
nextTestCounter = nextTestCounter + 1
testRunner.testCase.setPropertyValue("testCounter", testCounter.toString())
testRunner.testCase.setPropertyValue("nextTestCounter", nextTestCounter.toString())

// check if at the end of the test list
if (testCounter > numberOfTests) {
	testRunner.testCase.setPropertyValue("Stop", "T")
	//no loop
	assert true}
else {
	testRunner.testCase.setPropertyValue("Stop", "F")
	//need to continue the loop

	sleep(1000) //temp delay to see logic
	testRunner.gotoStepByName("read")}
break;

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8f88ee95-1d6a-4dc6-ba33-a5b1737d82ac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Working with xml" searchProperties="true"><con:settings/><con:testStep type="groovy" name="read drugdata file" id="380fd5aa-2ceb-44e3-98f9-3ef1033f7aa8"><con:settings/><con:config><script>def readDrugFile (fileName) {
	

//drug = "ETANERCEPT"
drug = "${fileName}"
def parsedFile = new XmlParser().parse("C:\\temp\\Data\\${drug}.xml")


parsedFile.drug.each{
	log.info "READING: ${it.attribute("name")}"
  
  	parsedFile.drug.section.each{
  	//	log.info "DRUG_TYPE_CODE: ${it.attribute("DRUG_TYPE_CODE")}"
  	
  		parsedFile.drug.section.item.each{
  		//	log.info "INCR__MQ_MR_FLAG: ${it.attribute("INCR__MQ_MR_FLAG")}"
  		//	log.info "CAUTION_FLAG: ${it.attribute("CAUTION_FLAG")}"
  		//	log.info "RESTRICTION_FLAG: ${it.attribute("RESTRICTION_FLAG")}"
		//	log.info "TEXT: ${it.text()}"

			parsedFile.drug.section.item.item.each{
				//log.info "TEXT: ${it.text()}"

				parsedFile.drug.section.item.item.item.eachWithIndex{me, i ->
				//parsedFile.drug.section.item.item.item.eachWithIndex{

					def items=[:]
					/*log.info "DRUG_TYPE_CODE: ${it.attribute("DRUG_TYPE_CODE")}"
  					log.info "CAUTION_FLAG: ${it.attribute("CAUTION_FLAG")}"
  					log.info "RESTRICTION_FLAG: ${it.attribute("RESTRICTION_FLAG")}"
  					log.info "FORM_AND_STRENGTH: ${it.attribute("FORM_AND_STRENGTH")}"
					log.info "DRUG_NAME: ${it.attribute("DRUG_NAME")}"
					log.info "BRAND_NAME: ${it.attribute("BRAND_NAME")}"
					log.info "MRVFSN: ${it.attribute("MRVFSN")}"
					log.info "MDPFMQ: ${it.attribute("MDPFMQ")}"
					log.info "MPTP: ${it.attribute("MPTP")}"
					log.info "TGMDPFMQ: ${it.attribute("TGMDPFMQ")}"
					log.info "TGMPTP: ${it.attribute("TGMPTP")}"
					log.info "CDPFMQ: ${it.attribute("CDPFMQ")}"
					log.info "CPTP: ${it.attribute("CPTP")}"
					log.info "THERAPEUTIC_GROUP_PREMIUM: ${it.attribute("THERAPEUTIC_GROUP_PREMIUM")}"
					log.info "BRAND_PREMIUM: ${it.attribute("BRAND_PREMIUM")}"
					log.info "DANGEROUS_DRUG_FEE_CODE: ${it.attribute("DANGEROUS_DRUG_FEE_CODE")}"
					log.info "DISPENSING_FEE_CODE: ${it.attribute("DISPENSING_FEE_CODE")}"
					log.info "MARK_UP_CODE: ${it.attribute("MARK_UP_CODE")}"
					log.info "PACK_SIZE: ${it.attribute("PACK_SIZE")}"
					log.info "NUMBER_OF_REPEATS: ${it.attribute("NUMBER_OF_REPEATS")}"
					log.info "MAXIMUM_QUANTITY: ${it.attribute("MAXIMUM_QUANTITY")}"
					log.info "NOTE_FLAG: ${it.attribute("NOTE_FLAG")}"
					log.info "PBS_CODE: ${it.attribute("PBS_CODE")}"
					log.info "TEXT: ${it.text()}"*/
 					items["${fileName}_DRUG_TYPE_CODE_${i}"] = "${me.attribute("DRUG_TYPE_CODE")}"
  					items["${fileName}_CAUTION_FLAG_${i}"] = "${me.attribute("CAUTION_FLAG")}"
  					items["${fileName}_RESTRICTION_FLAG_${i}"] = "${me.attribute("RESTRICTION_FLAG")}"
  					items["${fileName}_FORM_AND_STRENGTH_${i}"] = "${me.attribute("FORM_AND_STRENGTH")}"
					items["${fileName}_DRUG_NAME_${i}"] = "${me.attribute("DRUG_NAME")}"
					items["${fileName}_BRAND_NAME_${i}"] = "${me.attribute("BRAND_NAME")}"
					items["${fileName}_MRVFSN_${i}"] = "${me.attribute("MRVFSN")}"
					items["${fileName}_MDPFMQ_${i}"] = "${me.attribute("MDPFMQ")}"
					items["${fileName}_MPTP_${i}"] = "${me.attribute("MPTP")}"
					items["${fileName}_TGMDPFMQ_${i}"] = "${me.attribute("TGMDPFMQ")}"
					items["${fileName}_TGMPTP_${i}"] = "${me.attribute("TGMPTP")}"
					items["${fileName}_CDPFMQ_${i}"] = "${me.attribute("CDPFMQ")}"
					items["${fileName}_CPTP_${i}"] = "${me.attribute("CPTP")}"
					items["${fileName}_THERAPEUTIC_GROUP_PREMIUM_${i}"] = "${me.attribute("THERAPEUTIC_GROUP_PREMIUM")}"
					items["${fileName}_BRAND_PREMIUM_${i}"] = "${me.attribute("BRAND_PREMIUM")}"
					items["${fileName}_DANGEROUS_DRUG_FEE_CODE_${i}"] = "${me.attribute("DANGEROUS_DRUG_FEE_CODE")}"
					items["${fileName}_DISPENSING_FEE_CODE_${i}"] = "${me.attribute("DISPENSING_FEE_CODE")}"
					items["${fileName}_MARK_UP_CODE_${i}"] = "${me.attribute("MARK_UP_CODE")}"
					items["${fileName}_PACK_SIZE_${i}"] = "${me.attribute("PACK_SIZE")}"
					items["${fileName}_NUMBER_OF_REPEATS_${i}"] = "${me.attribute("NUMBER_OF_REPEATS")}"
					items["${fileName}_MAXIMUM_QUANTITY_${i}"] = "${me.attribute("MAXIMUM_QUANTITY")}"
					items["${fileName}_NOTE_FLAG_${i}"] = "${me.attribute("NOTE_FLAG")}"
					items["${fileName}_PBS_CODE_${i}"] = "${me.attribute("PBS_CODE")}"
					items["${fileName}_TEXT_${i}"] = "${me.text()}"
					items.each {propertyName,propertyValue
					->
					testRunner.testCase.setPropertyValue(propertyName, propertyValue) }
					
					//def brandName = ["${it.attribute("BRAND_NAME")}"]
					//def formAndStrength = ["${it.attribute("FORM_AND_STRENGTH")}"] 


/*
def mapProperties = [brandName,formAndStrength].transpose().collectEntries()
mapProperties.each{ name, value ->
    testRunner.testCase.setPropertyValue(name,value)     
}
*/

					
					}}}}}
log.info "FINISHED READING: ${fileName}"
}


readDrugFile("ETANERCEPT")
readDrugFile("PARACETAMOL")
</script></con:config></con:testStep><con:testStep type="groovy" name="read xml file sandpit" id="14700a83-f938-4658-b0d8-cc20dcff5b7d"><con:settings/><con:config><script>import groovy.util.XmlSlurper;
import groovy.util.slurpersupport.*;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
File testFile = new File("C:\\temp\\Data\\ETANERCEPT.xml")
def test1 = testFile.getText();
def holder = groovyUtils.getXmlHolder(test1);

def parsedFile = new XmlParser().parse("C:\\temp\\Data\\ETANERCEPT.xml")
def slurpedFile = new XmlSlurper().parse("C:\\temp\\Data\\ETANERCEPT.xml")
 

def getData  = { xml, elementName ->
	def parseXml = new XmlSlurper().parseText(xml)
	parseXml.'**'.findAll { it.name() == elementName }
}

def itemNodes = getData( test1, 'item')
//log.info itemNodes

def sublist (data, start, end) {
	start == 0 ? data.take(end) : data.drop(start).take(end-start)
}


def incrementBy = 1
def startItems = 0
def endItems = incrementBy 

def builder = new groovy.xml.StreamingMarkupBuilder()
builder.encoding = 'UTF-8'

def xml = builder.bind {
    mkp.xmlDeclaration() 
    Assignments {
    	itemNodes.eachWithIndex { itemNode, index ->    		
    		Section {
    			id (index+1)
    			item (itemNode.text())
    			/*studentList {
    				sublist(studentNodes, startStudents, endStundents).each { studentNode ->
    					name (studentNode.text())
    				}
    			}  */  			
    		}
    		startItems = endItems
    		endItems += incrementBy
    	}    	
    }
}
log.info "${groovy.xml.XmlUtil.serialize(xml)}"

/*


def itemCount = holder["count(//item)"]
def items = holder.getNodeValues("//item").toString()
log.info itemCount
log.info items

for (int i = 0; i &lt;itemCount.toInteger(); i++){ } //do stuff

*/

</script></con:config></con:testStep><con:tearDownScript>String[] propToRemove1 = new String[testCase.getPropertyCount()];
propToRemove1 = testCase.getPropertyNames();
for ( int x = 0 ; x &lt; propToRemove1.size(); x++ ){
    testCase.removeProperty( propToRemove1[x] );
	}</con:tearDownScript><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="90b194b0-2b50-4c3c-a121-aa31290c8905" name="Snippets for Internal Project Use (see techtestcore)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="de8bb90a-2fb0-423f-994e-f26806a84aff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="jdbc mysql" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="MYSQL" id="0a1b44c0-b828-4abd-ba26-933f24d4a8e8"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.mysql.jdbc.Driver</con:driver><con:connectionString>jdbc:mysql://10.11.21.128:3306/testingservices?user=test&amp;password=password</con:connectionString><con:query>select * from testproperties</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="get jdbc" id="eb4965ff-6060-4f09-9236-aa3c3c4a257e"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.SoapUIPropUtils;
import com.gurutester.datagenerator.apps.utilities.SoapUILogUtils;

SoapUIPropUtils props = new SoapUIPropUtils();
SoapUILogUtils log = new SoapUILogUtils();

testConditions = props.getMyProperties(testRunner.testCase)


x = log.getJdbcTestResponse(testRunner.testCase, 'MYSQL')
x = log.getJdbcTestRequest(testRunner.testCase, 'MYSQL')

context.expand(x);
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="dce0fb9b-034a-42e4-a393-20869629deca" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="jdbc oracle" searchProperties="true"><con:settings/><con:testStep type="jdbc" name="dataportal" id="e87751bc-9846-4463-9f79-d5164ab53b39"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:cdp_read/cdp_read@clodbd06:1521:tst12c02</con:connectionString><con:query>select * from 
CDP.CORRESPONDENCE	
where title = ''</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="connect via groovy" id="7b85b471-b037-4ed1-b858-c31944c46089"><con:settings/><con:config><script>import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils

log.info("")
log.info("  init DB connection...")

def scriptServer = "clodbd06"
def scriptPassword = "cafautomation"
def scriptSid = "tst12c04"
def scriptUsername = "caf_automation"
def scriptDBport = "1521"

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")
sql = Sql.newInstance("jdbc:oracle:thin:@${scriptServer }:${scriptDBport}:${scriptSid}", "${scriptUsername}", "${scriptPassword}", "oracle.jdbc.OracleDriver") 

def query= "" +
"select * from CAF.TESTPROPERTIES "

def res = sql.firstRow(query)
//query = res.toString()
query = res[2].toString()
log.info query
testRunner.testCase.setPropertyValue( "query" , query)
sql.close()


def propDBAutoServer = "clodbd06"; 
def propDBAutoSID = "tst12c04"
def propDBAutoUser = "caf_automation"
def propDBAutoPwd = "cafautomation"
def propDBAutoPort = "1521"

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver"); 
sql = Sql.newInstance("jdbc:oracle:thin:@${propDBAutoServer }:${propDBAutoPort}:${propDBAutoSID}", "${propDBAutoUser}", "${propDBAutoPwd}", "oracle.jdbc.OracleDriver") 

def queryGetEnvironment= "" + "select * from CAF.TESTPROPERTIES where propStrategy = " + "'gui'" +" and propEnvironment = " + "'DEV'"
res = sql.firstRow(queryGetEnvironment)
queryGetEnvironment = res.toString();
testRunner.testCase.setPropertyValue( "query" , queryGetEnvironment)
sql.close()


</script></con:config></con:testStep><con:testStep type="jdbc" name="testautomation" id="9c6c9bc4-f001-4565-a536-3153ec481b2b"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:caf_automation/cafautomation@clodbd06:1521:tst12c04</con:connectionString><con:query>--select * from CAF.TESTCASEDATA
select * from CAF.TESTPROPERTIES</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>query</con:name><con:value>{PROPSTRATEGY=gui, PROPMOCK=off, PROPENVIRONMENT=DEV, PROPCORE=dataportal, PROPSCRIPT=Library, PROPWORKINGFOLDER=\\\\central.health\\dfsuserenv\\Users\\User_01\\DEROBM\\Documents\\Michael\\soapui\\projects\\dataportal, PROPENDPOINT1=http://10.11.13.35/usermanagementservices-web-v2/AccountManagementV2, PROPENDPOINT2=http://10.11.22.92:10039/provider-directory-service-web-v3/ProviderDirectoryV3, PROPENDPOINT3=http://10.11.22.92:10039/indigenous-health-data-service-web-v1/IndigenousHealthDataV1, PROPENDPOINT4=http://10.11.22.92:10039/data-asset-service-web-v3/DataAssetV3, PROPENDPOINT5=http://10.11.22.92:10039/data-asset-service-web-v1/DataAssetV1, PROPCSV1=Sourced from propCsvName in local properties file containing csv file name only for required location under project data folder, PROPADMINUSER1=dataportalgroupingadmin, PROPADMINUSER2=dataportaluseradmin, PROPSLABEL=GUI in DEV using DP library, ACTION_USER=System, ACTION_DATE=2018-09-10 00:00:00.0, PROPADMINUSER3=dataportalorgadmin, PROPINTUSER1=dpinttest1, PROPINTUSER2=dpinttest2, PROPINTUSER3=dpinttest3, PROPINTUSER4=dpinttest4, PROPALMUSER=autotest01, PROPALMPW=Password123, PROPALMDRAGONFLYPLUGIN=disabled, PROPALMURL=http://alm.central.health/qcbin, PROPALMDOMAIN=TESTINGSERVICES, PROPALMPROJECT=ATC, PROPALMTESTPLANDIRECTORY=Subject\dataportal, PROPALMTESTLABDIRECTORY=Root\dataportal, PROPALMPROJECTPATH=\\\\central.health\\dfsuserenv\\Users\\User_01\\DEROBM\\Documents\\Michael\\soapui\\projects\\dataportal, PROPALMSOAPUIPATH=C:\\Program Files\\SmartBear\\SoapUI-5.2.1\\bin\\testrunner.bat, PROPALMOVERRIDETESTRUNS=disabled, APPLICATION=dataportal}</con:value></con:property></con:properties></con:testCase><con:testCase id="ccbc8f8d-d8f4-4678-a5bd-644d8398e7ae" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="com.gurutester.datagenerator (datageneratorWebService-05.11.2019-jar-with-dependencies)" searchProperties="true"><con:settings/><con:testStep type="request" id="87affafd-2881-4172-9ed9-3d3af5897433" name="SubmitDummyData"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MDRDataServiceSoap12</con:interface><con:operation>SubmitDummyData</con:operation><con:request name="SubmitDummyData" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="0b4ec8ed-3207-4c9c-8952-8a48a403fb38"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:591/</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:imp="http://improve.org.au/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <imp:SubmitDummyData>\r
         <!--Optional:-->\r
         <imp:DummySummaryData>\r
         	<input1>${#TestCase#input1}</input1>
         	<input2>${#TestCase#input2}</input2>
         </imp:DummySummaryData>\r
      </imp:SubmitDummyData>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="GroovyScriptAssertion" id="952d2122-2072-4673-aa0f-32a11828539b" name="Script Assertion"><con:configuration><scriptText>log.info "assertion"</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://improve.org.au/MDRDataServiceSoap/SubmitDummyDataRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="httprequest" name="abnLookup" id="398afed9-78ba-4a22-9566-55a15bf633b6"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="9949f5c6-d63c-4020-98aa-67e66c3cf2f2" name="abnLookup" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://abr.business.gov.au/search/resultsactive</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" id="0bbfd3ef-7e72-4cea-8730-db14b052d092" name="searchAbn"><con:configuration><scriptText>//********************
// Select a random ABN
//********************

import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder (messageExchange.responseContentAsXml)

Random random = new Random()
String ranNum = "${random.nextInt(212-13)+13}"

for (item in holder.getNodeValues("//form/*:input[${ranNum}]/@value"))
x = (item.split(",")[0]).toString()
log.info x
//messageExchange.modelItem.testStep.testCase.setPropertyValue("orgToCreate", x)
//messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue("orgToCreateMOCK", x) //old method for mock
//messageExchange.modelItem.testStep.testCase.testSuite.project.mockServices["LocalhostMock"].setPropertyValue("orgToCreateMOCK", x)
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>searchtext</con:name><con:value>insurance</con:value><con:style>QUERY</con:style></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="jdbc" name="MYSQL" id="04c747c2-1e16-46a6-9ad7-9dcd463baa7d"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.mysql.jdbc.Driver</con:driver><con:connectionString>jdbc:mysql://10.11.21.128:3306/testingservices?user=test&amp;password=password</con:connectionString><con:query>select * from testproperties</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="web service api" id="fe1c69b0-5fd7-43d0-8b77-11001f519a71"><con:settings/><con:config service="http://10.11.21.128:8080" resourcePath="/person" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="web service api" id="faa439a1-0870-4c07-a1fe-1f8620434359" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:8080</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/person</con:originalUri><con:assertion type="GroovyScriptAssertion" id="20947b5a-fc70-4fd1-89d2-2dcda88be4f9" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper

def response = context.expand( '${web service api#Response}' ).toString()
log.info(response)

def slurper = new JsonSlurper()
def json = slurper.parseText response

messageExchange.modelItem.testStep.testCase.setPropertyValue("firstName", json.firstName)
messageExchange.modelItem.testStep.testCase.setPropertyValue("lastName", json.lastName)
messageExchange.modelItem.testStep.testCase.setPropertyValue("dob", json.dob_DD_MM_YYYY)
messageExchange.modelItem.testStep.testCase.setPropertyValue("medicare", json.medicareNumber)
messageExchange.modelItem.testStep.testCase.setPropertyValue("address", "${json.addressLine1}, ${json.city}, ${json.state}, ${json.postalCode}")
/*
   "addressLine1": "128 Baindiow Street",
   "addressLine2": "",
   "addressLine3": "",
   "city": "Franereanon",
   "state": "SA",
   "postalCode": "9879",
   "countryOfResidence": "Australia",
   "emailAddress": "Chrrntwer.Alrtoanon@notarealaccount.com.au",
   "mobileNumber": "0404269813",
   "telephoneNumber": null,
   "faxNumber": "6135115822",
   "jobTitle": "Master of Philosophy for the number 946611"
*/










//log.info(json.firstName)
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="api" id="18db72fa-088a-4c3d-a452-2d1c3be1205e"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.datagen.CRMAccountDataGeneration;
import com.gurutester.datagenerator.apps.datagen.DataportalDataGeneration;
import com.gurutester.datagenerator.apps.datagen.DateTimeDataGeneration;
import com.gurutester.datagenerator.apps.datagen.PersonDataGeneration;


CRMAccountDataGeneration x = new CRMAccountDataGeneration();
String out = x.crmaccountFunction().getPhoneNumber();
log.info out

PersonDataGeneration person = new PersonDataGeneration();
String firstN = person.personFunction().getFirstName();
String lastN = person.personFunction().getLastName();
log.info firstN + " " + lastN;

DataportalDataGeneration dp = new DataportalDataGeneration();
String roleValueDP_EXT_REPORT_DEVELOPER = dp.getDataportalAssetData().getRoleValueDP_EXT_REPORT_DEVELOPER();
log.info roleValueDP_EXT_REPORT_DEVELOPER
log.info dp.getDataportalAssetData().getContainerName();
log.info dp.getDataportalAssetData().getAssetTitle();

DateTimeDataGeneration datetime = new DateTimeDataGeneration();
log.info datetime.getDateTimeData().getDateTime1()
log.info datetime.getDateTimeData().getDateTime2()
log.info datetime.getDateTimeData().getDateTime3()
log.info datetime.getDateTimeData().getNow1()
log.info datetime.getDateTimeData().getNow2()
log.info datetime.getDateTimeData().getNow3()
log.info datetime.getDateTimeData().getTomorrow1()
log.info datetime.getDateTimeData().getTomorrow2()
log.info datetime.getDateTimeData().getTomorrow3()
log.info datetime.getDateTimeData().getNextMonth1()
log.info datetime.getDateTimeData().getNextMonth2()
log.info datetime.getDateTimeData().getNextMonth3()
log.info datetime.getDateTimeData().getNextQuarter1()
log.info datetime.getDateTimeData().getNextQuarter2()
log.info datetime.getDateTimeData().getNextQuarter3()
log.info datetime.getDateTimeData().getNextYear1()
log.info datetime.getDateTimeData().getNextYear2()
log.info datetime.getDateTimeData().getNextYear3()
log.info datetime.getDateTimeData().getYesterday1()
log.info datetime.getDateTimeData().getYesterday2()
log.info datetime.getDateTimeData().getYesterday3()
log.info datetime.getDateTimeData().getLastMonth1()
log.info datetime.getDateTimeData().getLastMonth2()
log.info datetime.getDateTimeData().getLastMonth3()
log.info datetime.getDateTimeData().getLastQuarter1()
log.info datetime.getDateTimeData().getLastQuarter2()
log.info datetime.getDateTimeData().getLastQuarter3()
log.info datetime.getDateTimeData().getLastYear1()
log.info datetime.getDateTimeData().getLastYear2()
log.info datetime.getDateTimeData().getLastYear3()

log.info datetime.getDateTimeData().getNextYear2()</script></con:config></con:testStep><con:testStep type="groovy" name="log_inGroovy" id="00fd2f72-9f8a-4a63-a6e6-1ee0fd1ee8a7" disabled="true"><con:settings/><con:config><script><![CDATA[/*
 *  Log Script
 *  Author : Michael De Robertis 
 *  05/11/2018	refactoring		
 */

import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)


//*************************************
// Setup properties for logging
//*************************************
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; 
	def objProject = testRunner.getTestCase().getTestSuite().getProject(); 
	def objCase = testRunner.getTestCase()
	def strSoapTestCase = objCase.name; def strLogGlobal = ''; strLogProject = ''; strLogCase = ''; strLogStep = ''
	def projectLocation = testRunner.testCase.getPropertyValue("projectLocation")
	def strPath = "${projectLocation}\\log\\"
	def testSuite = context.expand((testRunner.testCase.testSuite).name)
	intLog = 1 // move to properties file in future, 1 = request/responses only, 2 = all, need a 0 option

//*******************************************************
// Generate Request and Responses and Properties file
//*******************************************************

// Loop through steps and log when the step has been enabled
	def step = objCase.getTestStepList()
	step = objCase.getTestStepList()
        //step.each {
	   testRunner.testCase.testSuite.getTestCaseList().each {        	
        	if (!it.disabled){
                if ((it instanceof WsdlRunTestCaseTestStep) || (it instanceof WsdlPropertiesTestStep)){
        
                    // Requires intLog = 2
                    if (intLog != 1){
                        //Properties
                        def prop = it.getPropertyList()
                        //loop through the list of testStep properties and log as required
                        prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
                        new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -TestCase  +  TestStep]:,${strLogCase}${strLogStep}")}
                } 
                if (it instanceof WsdlTestRequestStep){

                    //Get Request (will be xml if not jms)
                    if (it.getTestRequest().getRequestContent().substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"}
                     new File("${strPath}").mkdirs(); new File("${strPath}","michael_soapREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.${strExt}")
                        .append(context.expand(it.getTestRequest().getRequestContent()))
                    
                    //Get Response if exists (will always be xml)
                    if (it.getTestRequest().getResponseContent() != null){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //SOAP Endpoint and Assertion
                    if (intLog != 1){ 
                         new File("${strPath}").mkdirs();new File("${testConditions["propWorkingFolder"]}\\log\\","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -Endpoint + Assertions]:,StepName=${it.name},Endpoint=${context.expand(it.getTestRequest().getEndpoint())},SOAPAssertion=${context.expand(objProject.getPropertyValue("svSoapAssertion"))}")
                    }
                } 

                else if (it instanceof JdbcRequestTestStep){ //OS... add "|| (it instanceof ProJdbcRequestTestStep)" for PRO 
                    //Request
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.sql")
                        .append(context.expand(it.getQuery().replaceAll(/\n/,'\r\n')))
                    //Response
                    if (it.getResponseContent().contains("<Row>")){ 
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //JDBC Connection String and  Assertion
                    if (intLog != 1){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -ConnStr  + Assertions]:,StepName=${it.name},ConnectionString=${context.expand(it.getConnectionString().replaceAll('/.+@/','/PASS_VALUE@/'))},JDBCAssertion=${context.expand(objProject.getPropertyValue("dbJdbcAssertion"))}")

                    }
                }

            }
        }

//******************************
// Generate the Results Log
//******************************
//	def propsFile = "Results-${testSuite}-${testConditions["systemUser"]}-${testConditions["systemHost"]}-${testConditions["dateTime2"]}.csv" //csv properties file
//	new File("${projectLocation}\\log\\","${propsFile}").append('\r\n' + "Time:${testConditions["dateTime1"]}, ${strSoapTestCase}${testConditions["testCounter"]}, ${testConditions["TestID"]}, ${testConditions["TestObjective"]}, ${testDataLog}")
log.info "log"	]]></script></con:config></con:testStep><con:testStep type="groovy" name="log_withMethod" id="f25855b9-647a-4193-b59d-b18fd6d8d150" disabled="true"><con:settings/><con:config><script>//import com.gurutester.*
//PropertiesUtil props = new PropertiesUtil();
import com.gurutester.datagenerator.apps.utilities.SoapUIPropUtils;
import com.gurutester.datagenerator.apps.utilities.SoapUILogUtils;

SoapUIPropUtils props = new SoapUIPropUtils();
SoapUILogUtils log = new SoapUILogUtils();


testConditions = props.getMyProperties(testRunner.testCase)

//log.info "${testConditions["projectLocation"]} ${testConditions["TestID"]} ${testConditions["propEnvironment"]}"

log.logResults(testRunner.testCase, "${testConditions["projectLocation"]}", "${testConditions["TestID"]}", "${testConditions["propEnvironment"]}");


/*
 * TO DO
 * 	handling for http
 * 	handling for rest
 * 	handling for jdbc
 * 	csv sinc file
 * 	
 * 
 */
</script></con:config></con:testStep><con:testStep type="groovy" name="getMethods" id="25d3a352-5dfe-4b8f-b961-7b55f138b483"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.SoapUIPropUtils;
import com.gurutester.datagenerator.apps.utilities.SoapUILogUtils;


SoapUILogUtils log = new SoapUILogUtils();

//x = log.getSoaTestResponse(testRunner.testCase, 'SubmitDummyData')
//x = log.getSoaTestRequest(testRunner.testCase, 'SubmitDummyData')
//x = log.getHttpTestResponse(testRunner.testCase, 'abnLookup')
//x = log.getRestTestResponse(testRunner.testCase, 'getPerson')
//x = log.getJdbcTestResponse(testRunner.testCase, 'MYSQL')
x = log.getJdbcTestRequest(testRunner.testCase, 'MYSQL')
//x="hello"

x = context.expand(x);


log.saveStringContent (x, 'MYSQL', testRunner.testCase, "\\\\central.health\\dfsuserenv\\Users\\User_01\\DEROBM", "555", "MOCK")
//log.fileSaveTest ("HEY",'\\\\central.health\\dfsuserenv\\Users\\User_01\\DEROBM')
/*
 saveStringContent (String content, WsdlTestStep testStep, WsdlTestCase testCase, String projectLocation, String testID, String testEnvironment)
 saveXmlContent (XmlHolder content, WsdlTestStep testStep, WsdlTestCase testCase, String projectLocation, String testID, String testEnvironment)
fileSaveTest (String content, String projectLocation, String testID, String testEnvironment)
 */</script></con:config></con:testStep><con:properties><con:property><con:name>firstName</con:name><con:value>Anttenobe</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Jenanioon</con:value></con:property><con:property><con:name>dob</con:name><con:value>27-10-1921</con:value></con:property><con:property><con:name>medicare</con:name><con:value>4577 78631 4</con:value></con:property><con:property><con:name>address</con:name><con:value>19 Miebeurd Street, Andanonere, NT, 9869</con:value></con:property></con:properties></con:testCase><con:testCase id="524dcc5c-6d66-4be5-9dd7-59d78d0c1491" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="com.gurutester (soapui_gurutester_22082019)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="gurutester" id="6d6d356c-efd2-40e3-9b26-534cedfeb29d"><con:settings/><con:config><script>/*
propSchema=testingservices
propDriver=com.mysql.jdbc.Driver
propDBConnection=jdbc:mysql://10.11.21.128:3306/testingservices
propDBAutoUser=test
propDBAutoPwd=password
*/



// import the required classes
import com.gurutester.*;

// instantiate the required classes from gurutester
DatabaseUtilities db = new DatabaseUtilities();

// test environment properties
/*
 update testingservices.testproperties
set propEndpoint1 = 'AS REQUIRED'
where application = 'calculator'
 */


res = db.getDbTestProperties("csv", "MOCK", "calculator", "testingservices");
res = db.getDbTestProperties("gui", "MOCK", "calculator", "testingservices");
res = db.getDbTestProperties("database", "MOCK", "calculator", "testingservices");
res = db.getDbTestProperties("csv", "SIT", "calculator", "testingservices");
res = db.getDbTestProperties("gui", "SIT", "calculator", "testingservices");
res = db.getDbTestProperties("database", "SIT", "calculator", "testingservices");
   if (res.next()){
     	
     	  "DB MAPPING CHECKS"
		  log.info res.getString(1); log.info res.getString(2); log.info res.getString(3); log.info res.getString(4); log.info res.getString(5); 
		  log.info res.getString(6); log.info res.getString(7); log.info res.getString(8); log.info res.getString(9); log.info res.getString(10); 
		  log.info res.getString(11);log.info res.getString(12);log.info res.getString(13);log.info res.getString(14);log.info res.getString(15); 
		  log.info res.getString(16);log.info res.getString(17);log.info res.getString(18);log.info res.getString(19);log.info res.getString(20); 
		  log.info res.getString(21);log.info res.getString(22);log.info res.getString(23);log.info res.getString(24);log.info res.getString(25); 
		  log.info res.getString(26);log.info res.getString(27);log.info res.getString(28);log.info res.getString(29);log.info res.getString(30); 
		  log.info res.getString(31);log.info res.getString(32);log.info res.getString(33);log.info res.getString(34);    \
		
   }


// get the test case count
//testCount = db.getDbTestCaseData("a_derobm", "dataportal", "caf", "count", 666);
testCount = db.getDbTestCaseData("a_teeyoh", "calculator", "testingservices", "count", 666);
 if (testCount.next()){
			log.info "${testCount.getInt("testSetSize")}"
            }

// get the required test case data
testData = db.getDbTestCaseData("a_teeyoh", "calculator", "testingservices", "data", 2);
 if (testData.next()){
 			log.info "${testData.getString("TESTID")}";
 			//log.info "${testData.getRowId(2)}"
 			log.info "${testData.getString(2)}"

        }
</script></con:config></con:testStep><con:testStep type="groovy" name="gurutester calls" id="07ec50ff-4340-42b2-9b31-919d101654b0"><con:settings/><con:config><script>
import com.gurutester.HealthData  
import com.gurutester.BioData  
import com.gurutester.PropertiesUtil  
import com.gurutester.Security
import com.gurutester.SystemRelated

import com.gurutester.*;



HealthData hd = new HealthData();
BioData bd = new BioData();
PropertiesUtil props = new PropertiesUtil();
Security s = new Security();
SystemRelated sr = new SystemRelated();
//**********************************
// using health data and bio data
//**********************************
firstName = bd.firstName; lastName = bd.lastName; 
emailAddress = hd.emailAddress
//log.info firstName + " " + lastName + " " + emailAddress

//**********************************
// using properties util remove property (add the property "deleteMe" before running)
//**********************************
props.removeProperty(testRunner.testCase, "deleteMe")


//**********************************
// using getMyProperties to a HashMap
//**********************************
HashMap x = new HashMap () // or def x=[:]
x = props.getMyProperties(testRunner.testCase)
log.info "USING getMyProperties: ${x.get('AbnAttribute')}" // or log.info x["AbnAttribute"]

/*
HashMap y = new HashMap();
props.getMyPropertiesWIP(testRunner.testCase, y)
log.info "USING getMyPropertiesWIP: ${y.get('AbnAttribute')}"
log.info "${props.getMyPropertiesWIP(testRunner.testCase, y)}"
log.info y["AbnAttribute"]
*/


//********************
// using saveProperty
//*********************
props.saveProperty("MDR1","Test",testRunner.testCase);

//************************************
// using saveProperties from a HashMap
//************************************
def mymap = [:]
mymap["val1"] = "some value 1"
mymap["val2"] = "some value 2"
props.saveToProperties(testRunner.testCase,mymap)


//************************************
// using Security
//************************************
encoder = (s.encoder("Michael")).toString()
log.info encoder
decoder = s.decoder(encoder)
log.info decoder

encryptOutput = (s.encrypt("michaeld", "AAAAAA")).toString()
log.info encryptOutput
decrypt = s.decrypt(encryptOutput,"AAAAAA")
log.info decrypt

//************************************
// using SystemRelated
//************************************
sr.hostname
yesterday = sr.addDay(-1)
today = sr.addDay(0)
tomorrow = sr.addDay(1)
nextMonth = sr.addDay(30)
nextquarter = sr.addDay(90)
log.info nextquarter

//************************************
// enable / disable steps
//************************************

props.enableAllSteps(testRunner.testCase)
props.disableAllSteps(testRunner.testCase)
props.enableAllSteps(testRunner.testCase)</script></con:config></con:testStep><con:properties><con:property><con:name>MDR1</con:name><con:value>Test</con:value></con:property><con:property><con:name>val1</con:name><con:value>some value 1</con:value></con:property><con:property><con:name>val2</con:name><con:value>some value 2</con:value></con:property></con:properties></con:testCase><con:testCase id="1db2a25a-2cdd-4b5f-8c97-a01f78aec4e6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="com.gurutester.datagenerator unit tests" searchProperties="true"><con:settings/><con:testStep type="request" id="9921c230-ec8c-493f-8543-6951ea904d1a" name="SubmitDummyData_ForLogTests"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MDRDataServiceSoap12</con:interface><con:operation>SubmitDummyData</con:operation><con:request name="SubmitDummyData_ForLogTests" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="0b4ec8ed-3207-4c9c-8952-8a48a403fb38"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:591/</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:imp="http://improve.org.au/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <imp:SubmitDummyData>\r
         <!--Optional:-->\r
         <imp:DummySummaryData>\r
         	<input1>${#TestCase#input1}</input1>
         	<input2>${#TestCase#input2}</input2>
         </imp:DummySummaryData>\r
      </imp:SubmitDummyData>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="GroovyScriptAssertion" id="952d2122-2072-4673-aa0f-32a11828539b" name="Script Assertion"><con:configuration><scriptText>log.info "assertion"</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://improve.org.au/MDRDataServiceSoap/SubmitDummyDataRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="httprequest" name="abnLookup_ForLogTests" id="4f249eea-a54c-4642-8dbf-a11ab540fea4"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="9949f5c6-d63c-4020-98aa-67e66c3cf2f2" name="abnLookup_ForLogTests" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://abr.business.gov.au/search/resultsactive</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" id="0bbfd3ef-7e72-4cea-8730-db14b052d092" name="searchAbn"><con:configuration><scriptText>//********************
// Select a random ABN
//********************

import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder (messageExchange.responseContentAsXml)

Random random = new Random()
String ranNum = "${random.nextInt(212-13)+13}"

for (item in holder.getNodeValues("//form/*:input[${ranNum}]/@value"))
x = (item.split(",")[0]).toString()
log.info x
//messageExchange.modelItem.testStep.testCase.setPropertyValue("orgToCreate", x)
//messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue("orgToCreateMOCK", x) //old method for mock
//messageExchange.modelItem.testStep.testCase.testSuite.project.mockServices["LocalhostMock"].setPropertyValue("orgToCreateMOCK", x)
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>searchtext</con:name><con:value>insurance</con:value><con:style>QUERY</con:style></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="jdbc" name="MYSQL_ForLogTests" id="8e7a3240-22fc-4a30-9641-db09433bfe2d"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.mysql.jdbc.Driver</con:driver><con:connectionString>jdbc:mysql://10.11.21.128:3306/testingservices?user=test&amp;password=password</con:connectionString><con:query>select * from testproperties</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="GroovyScriptAssertion" id="e9e743e9-8e59-4027-a7f1-5d87589b1aa6" name="Script Assertion"><con:configuration><scriptText>log.info ""</scriptText></con:configuration></con:assertion><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="DatageneratorWebserviceApi_ForLogTests" id="a8f90315-b8a0-48c5-9688-c6148458a993"><con:settings/><con:config service="http://10.11.21.128:8080" resourcePath="/person" methodName="" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DatageneratorWebserviceApi_ForLogTests" id="faa439a1-0870-4c07-a1fe-1f8620434359" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:8080</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/person</con:originalUri><con:assertion type="GroovyScriptAssertion" id="20947b5a-fc70-4fd1-89d2-2dcda88be4f9" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper

def response = context.expand( '${DatageneratorWebserviceApi_ForLogTests#Response}' ).toString()
log.info(response)

def slurper = new JsonSlurper()
def json = slurper.parseText response

messageExchange.modelItem.testStep.testCase.setPropertyValue("firstName", json.firstName)
messageExchange.modelItem.testStep.testCase.setPropertyValue("lastName", json.lastName)
messageExchange.modelItem.testStep.testCase.setPropertyValue("dob", json.dob_DD_MM_YYYY)
messageExchange.modelItem.testStep.testCase.setPropertyValue("medicare", json.medicareNumber)
messageExchange.modelItem.testStep.testCase.setPropertyValue("address", "${json.addressLine1}, ${json.city}, ${json.state}, ${json.postalCode}")
/*
   "addressLine1": "128 Baindiow Street",
   "addressLine2": "",
   "addressLine3": "",
   "city": "Franereanon",
   "state": "SA",
   "postalCode": "9879",
   "countryOfResidence": "Australia",
   "emailAddress": "Chrrntwer.Alrtoanon@notarealaccount.com.au",
   "mobileNumber": "0404269813",
   "telephoneNumber": null,
   "faxNumber": "6135115822",
   "jobTitle": "Master of Philosophy for the number 946611"
*/










//log.info(json.firstName)
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="unittest_SoapUIPropUtils" id="eebd3e5a-b638-4b18-875c-e9bafe37e66f"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.SecurityUtils;
import com.gurutester.datagenerator.apps.utilities.SoapUIPropUtils;
import com.gurutester.datagenerator.apps.utilities.SystemRelated;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.io.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

        HashMap&lt;String,String> hm = new HashMap&lt;String,String>();
        hm.put("1","one");
        Object propSource = hm;
        SoapUIPropUtils props = new SoapUIPropUtils();
        HashMap x = new HashMap();
        props.getMyProperties(propSource);
//        assertEquals ("Check Maps", x.get("1"),"one");

        log.info x.get("1")</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_SecurityUtils" id="98dd1ee5-d501-44ed-a8f7-246144561c3a"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.SecurityUtils;
import com.gurutester.datagenerator.apps.utilities.SoapUIPropUtils;
import com.gurutester.datagenerator.apps.utilities.SystemRelated;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.io.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

        // ENCODING AND DECODING
        
        SecurityUtils s = new SecurityUtils();
        System.out.println(s.encoder("Michael"));
        encoded = s.encoder("Michael")

        log.info "ENCODED VALUE FOR 'MICHAEL' is " + "${encoded}"

        decoded = s.decoder(encoded.toString())

        log.info "DECODED VALUE FOR ENCODED 'MICHAEL' is " + "${decoded}"


        // ENCRYPTING AND DECRYPTING
        encryptOutput = (s.encrypt("michaeld", "AAAAAA")).toString();
        System.out.println(encryptOutput);

        log.info "ENCRYPTED OUTPUT FOR michaeld is " + "${encryptOutput}"

     //   decryptOutput = (s.decrypt("${encryptOutput}"))

        // ERRORS
        //log.info "DECRYPTED OUTPUT FOR encrypted michaeld is " + "${decryptOutput}" 
</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_SystemRelated" id="b3da4716-616d-422b-b72b-46361b4a562f"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.SecurityUtils;
import com.gurutester.datagenerator.apps.utilities.SoapUIPropUtils;
import com.gurutester.datagenerator.apps.utilities.SystemRelated;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.io.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

        SystemRelated sr = new SystemRelated();
        System.out.println(sr.hostname);
        System.out.println(sr.userHomeFolder);
        System.out.println(sr.username);
        System.out.println(sr.javaClassPath);
	log.info sr.hostname + " " + sr.userHomeFolder + " " + sr.username + " " + sr.javaClassPath</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_ETSDatabaseUtilities for testproperties" id="2d0666f4-b8e5-4eee-afaa-f3e7838c225b"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.ETSDatabaseUtils;
import java.sql.ResultSet;
        ETSDatabaseUtils db = new ETSDatabaseUtils();
        	//ResultSet x = db.runQuery();
        	//ResultSet x = db.dbTestProperties("database", "SIT", "dataportal", "oracle"); //uses db type
        	//ResultSet x = db.dbTestProperties("database", "DEV", "dataportal", "mysql"); // uses db type
        ResultSet x = db.getDbTestProperties("gui", "SIT", "dataportal", "caf"); //uses schema
        if (x.next()){
            System.out.println(x.getString(2));
            System.out.println(x.getString("PROPSTRATEGY"));}
    log.info x.getString(2)
    log.info x.getString("PROPSTRATEGY")



    
    
    
    
    
    
    
    
    /*
PROPSTRATEGY	1
PROPMOCK	2
PROPENVIRONMENT	3
PROPCORE	4
PROPSCRIPT	5
PROPWORKINGFOLDER	6
PROPENDPOINT1	7
PROPENDPOINT2	8
PROPENDPOINT3	9
PROPENDPOINT4	10
PROPENDPOINT5	11
PROPCSV1	12
PROPADMINUSER1	13
PROPADMINUSER2	14
PROPSLABEL	15
ACTION_USER	16
ACTION_DATE	17
PROPADMINUSER3	18
PROPINTUSER1	19
PROPINTUSER2	20
PROPINTUSER3	21
PROPINTUSER4	22
PROPALMUSER	23
PROPALMPW	24
PROPALMDRAGONFLYPLUGIN	25
PROPALMURL	26
PROPALMDOMAIN	27
PROPALMPROJECT	28
PROPALMTESTPLANDIRECTORY	29
PROPALMTESTLABDIRECTORY	30
PROPALMPROJECTPATH	31
PROPALMSOAPUIPATH	32
PROPALMOVERRIDETESTRUNS	33
APPLICATION	34
     */</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_ETSDatabaseUtilities for testcasedata" id="ba72de0e-234d-4aaf-af27-1516f1c287ce"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.ETSDatabaseUtils;
import java.sql.ResultSet;
        ETSDatabaseUtils db = new ETSDatabaseUtils();
        ResultSet x = db.getDbTestCaseData("a_derobm", "dataportal", "caf", "count", 666);
        if (x.next()){
            System.out.println(x.getInt("testSetSize"));
            }
    log.info x.getInt("testSetSize") //counting number of test cases
    //log.info x.getString("PROPSTRATEGY")



    
    
    
    
    
    
    
    
    /*
PROPSTRATEGY	1
PROPMOCK	2
PROPENVIRONMENT	3
PROPCORE	4
PROPSCRIPT	5
PROPWORKINGFOLDER	6
PROPENDPOINT1	7
PROPENDPOINT2	8
PROPENDPOINT3	9
PROPENDPOINT4	10
PROPENDPOINT5	11
PROPCSV1	12
PROPADMINUSER1	13
PROPADMINUSER2	14
PROPSLABEL	15
ACTION_USER	16
ACTION_DATE	17
PROPADMINUSER3	18
PROPINTUSER1	19
PROPINTUSER2	20
PROPINTUSER3	21
PROPINTUSER4	22
PROPALMUSER	23
PROPALMPW	24
PROPALMDRAGONFLYPLUGIN	25
PROPALMURL	26
PROPALMDOMAIN	27
PROPALMPROJECT	28
PROPALMTESTPLANDIRECTORY	29
PROPALMTESTLABDIRECTORY	30
PROPALMPROJECTPATH	31
PROPALMSOAPUIPATH	32
PROPALMOVERRIDETESTRUNS	33
APPLICATION	34
     */</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_BufferReader" id="bfe2d12b-dd03-4eae-b8f1-f0ffbd300aec"><con:settings/><con:config><script>// using BufferedReader from Java 8
        BufferedReader br = new BufferedReader(new FileReader("U:\\Documents\\soapui\\projects\\concepts\\data\\loginsForSQLInjectionTest.txt") );
        String line = null;
        while ((line = br.readLine()) != null)
        {
            System.out.println(line);
            log.info line
        }</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_CRMAccountDataGeneration" id="b7a01c2b-5366-4654-8aee-b3bc79aa748e"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.datagen.CRMAccountDataGeneration;
import com.gurutester.datagenerator.apps.datagen.DataportalDataGeneration;
import com.gurutester.datagenerator.apps.datagen.DateTimeDataGeneration;
import com.gurutester.datagenerator.apps.datagen.PersonDataGeneration;
import org.junit.Assert;
import org.junit.Test;

        CRMAccountDataGeneration x = new CRMAccountDataGeneration();
        String out = x.crmaccountFunction().getPhoneNumber();
        Assert.assertNotEquals("Fail check", out,123456789);
        log.info x.crmaccountFunction().getPhoneNumber()</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_PersonDataGeneration" id="de996dd2-7f31-4bad-a9a3-3367fd3c66ca"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.datagen.CRMAccountDataGeneration;
import com.gurutester.datagenerator.apps.datagen.DataportalDataGeneration;
import com.gurutester.datagenerator.apps.datagen.DateTimeDataGeneration;
import com.gurutester.datagenerator.apps.datagen.PersonDataGeneration;
import org.junit.Assert;
import org.junit.Test;

        PersonDataGeneration person = new PersonDataGeneration();
        String firstN = person.personFunction().getFirstName();
        String lastN = person.personFunction().getLastName();
        System.out.println(firstN + " " + lastN);
        log.info (firstN + " " + lastN);</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_DataportalDataGeneration" id="5e7899a9-094a-45e2-936d-98486596e833"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.datagen.CRMAccountDataGeneration;
import com.gurutester.datagenerator.apps.datagen.DataportalDataGeneration;
import com.gurutester.datagenerator.apps.datagen.DateTimeDataGeneration;
import com.gurutester.datagenerator.apps.datagen.PersonDataGeneration;
import org.junit.Assert;
import org.junit.Test;

DataportalDataGeneration dp = new DataportalDataGeneration();
        String roleValueDP_EXT_REPORT_DEVELOPER = dp.getDataportalAssetData().getRoleValueDP_EXT_REPORT_DEVELOPER();
        System.out.println("DP_EXT_REPORT_DEVELOPER: " + roleValueDP_EXT_REPORT_DEVELOPER);
        System.out.println("Container Name: " + dp.getDataportalAssetData().getContainerName());
        System.out.println("Asset Title: " + dp.getDataportalAssetData().getAssetTitle());

        log.info("DP_EXT_REPORT_DEVELOPER: " + roleValueDP_EXT_REPORT_DEVELOPER);
        log.info("Container Name: " + dp.getDataportalAssetData().getContainerName());
        log.info("Asset Title: " + dp.getDataportalAssetData().getAssetTitle());</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_DateTimeDataGeneration" id="1503be70-0373-4eb4-a6e2-8b3da087bc09"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.datagen.CRMAccountDataGeneration;
import com.gurutester.datagenerator.apps.datagen.DataportalDataGeneration;
import com.gurutester.datagenerator.apps.datagen.DateTimeDataGeneration;
import com.gurutester.datagenerator.apps.datagen.PersonDataGeneration;
import org.junit.Assert;
import org.junit.Test;

        DateTimeDataGeneration datetime = new DateTimeDataGeneration();
        System.out.println("Datetime: " + datetime.getDateTimeData().getDateTime2());
         log.info("Datetime: " + datetime.getDateTimeData().getDateTime2());




def dateToday = datetime.getDateTimeData().getNow2();
def dateTomorrow = datetime.getDateTimeData().getTomorrow2();
def dateNextYear = datetime.getDateTimeData().getNextYear2()
def dateLastQuarter = datetime.getDateTimeData().getLastQuarter2()
def dateLastMonth = datetime.getDateTimeData().getLastMonth2()
//def dateLastQuarter = datetime.getDateTimeData().getLastQuarter();
log.info dateToday
log.info dateTomorrow
log.info dateNextYear
log.info dateLastQuarter
log.info dateLastMonth

log.info datetime.getDateTimeData().getNextMonth3()
log.info datetime.getDateTimeData().getNextQuarter3()

/*
 Java POJO 

     private String dateTime1;
    private String dateTime2;
    private String dateTime3;
    private String now1;
    private String now2;
    private String now3;
    private String nextMonth1;
    private String nextMonth2;
    private String nextMonth3;
    private String nextQuarter1;
    private String nextQuarter2;
    private String nextQuarter3;
    private String nextYear1;
    private String nextYear2;
    private String nextYear3;
    private String yesterday1;
    private String yesterday2;
    private String yesterday3;
    private String lastMonth1;
    private String lastMonth2;
    private String lastMonth3;
    private String lastQuarter1;
    private String lastQuarter2;
    private String lastQuarter3;
    private String lastYear1;
    private String lastYear2;
    private String lastYear3;
    private String tomorrow1;
    private String tomorrow2;
    private String tomorrow3;

 */
</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_RandomNumbersDataGeneration" id="9fc930b6-c47c-4030-aece-bb3d2a1387bb"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.datagen.RandomNumbersDataGeneration;
       RandomNumbersDataGeneration rn = new RandomNumbersDataGeneration();

       System.out.println(rn.randomNumbers().getRandomNumber8());
       System.out.println(rn.randomNumbers().getRandomNumber10());
       System.out.println(rn.randomNumbers().getRandomNumber20());
       log.info (rn.randomNumbers().getRandomNumber8());
       log.info (rn.randomNumbers().getRandomNumber10());
       log.info (rn.randomNumbers().getRandomNumber20());
</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_RandomWordsDataGeneration" id="fb91f3fc-982d-411e-8d9d-e368ad2cfc83"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.datagen.RandomWordsDataGeneration;
       RandomWordsDataGeneration rw = new RandomWordsDataGeneration();


        log.info (rw.getRandomWords().getRandomWord1());
        log.info (rw.getRandomWords().getRandomWord2());
        log.info (rw.getRandomWords().getRandomWord3());
        log.info (rw.getRandomWords().getRandomWord4());
        log.info (rw.getRandomWords().getRandomWord5());
        log.info (rw.getRandomWords().getRandomWord6());
        log.info (rw.getRandomWords().getRandomWord7());
        log.info (rw.getRandomWords().getRandomWord8());
        log.info (rw.getRandomWords().getRandomWord9());
        log.info (rw.getRandomWords().getRandomWord10());
</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_SoapUILogUtils" id="f57ffdb8-5eab-413c-b727-9168a86c3808"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.SoapUILogUtils;
/*
import org.junit.Test;
import java.io.UnsupportedEncodingException;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.io.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
*/

projectLocation = "U:\\Documents\\soapui\\projects\\concepts"
TestID = "tester"
propEnvironment = "DEV"


SoapUILogUtils log = new SoapUILogUtils();

// get the soap request and response
soapRequest = log.getSoaTestRequest(testRunner.testCase, 'SubmitDummyData_ForLogTests'); soapRequest = context.expand(soapRequest)
soapResponse = log.getSoaTestResponse(testRunner.testCase, 'SubmitDummyData_ForLogTests'); soapResponse = context.expand(soapResponse)
log.saveStringContent (soapRequest, 'SubmitDummyData_ForLogTests', testRunner.testCase, "${projectLocation}", "REQ_${TestID}", "${propEnvironment}") 
log.saveStringContent (soapResponse, 'SubmitDummyData_ForLogTests', testRunner.testCase, "${projectLocation}", "RES_${TestID}", "${propEnvironment}") 

// get the http response
httpResponse = log.getHttpTestResponse(testRunner.testCase, 'abnLookup_ForLogTests'); httpResponse = context.expand(httpResponse)
log.saveStringContent (httpResponse, 'abnLookup_ForLogTests', testRunner.testCase, "${projectLocation}", "RES_${TestID}", "${propEnvironment}") 

// get the jdbc request and response
jdbcRequest = log.getJdbcTestRequest(testRunner.testCase, 'MYSQL_ForLogTests'); jdbcRequest = context.expand(jdbcRequest)
jdbcResponse = log.getJdbcTestResponse(testRunner.testCase, 'MYSQL_ForLogTests'); jdbcResponse = context.expand(jdbcResponse)
log.saveStringContent (jdbcRequest, 'MYSQL_ForLogTests', testRunner.testCase, "${projectLocation}", "REQ_${TestID}", "${propEnvironment}") 
log.saveStringContent (jdbcResponse, 'MYSQL_ForLogTests', testRunner.testCase, "${projectLocation}", "RES_${TestID}", "${propEnvironment}") 

// get the rest response
restResponse = log.getRestTestResponse(testRunner.testCase, 'DatageneratorWebserviceApi_ForLogTests'); restResponse = context.expand(restResponse)
log.saveStringContent (restResponse, 'DatageneratorWebserviceApi_ForLogTests', testRunner.testCase, "${projectLocation}", "RES_${TestID}", "${propEnvironment}") 
</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_SoapUIStepUtils" id="94a9f8a2-92a2-4829-91e4-86ddf5ff96bd"><con:settings/><con:config><script/></con:config></con:testStep><con:properties><con:property><con:name>firstName</con:name><con:value>Frncower</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Liobeuel</con:value></con:property><con:property><con:name>dob</con:name><con:value>12-10-1963</con:value></con:property><con:property><con:name>medicare</con:name><con:value>2232 68539 1</con:value></con:property><con:property><con:name>address</con:name><con:value>69 Liieotis Street, Krieotis, VIC, 3003</con:value></con:property><con:property><con:name>input1</con:name><con:value>ABCD</con:value></con:property><con:property><con:name>input2</con:name><con:value>7890</con:value></con:property></con:properties></con:testCase><con:testCase id="8dbc809f-cf21-4ae6-afa3-13fb42a0ba78" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="com.etshealthgovau.techtest (REST API People collection)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="POST People (only working on H2 Database)" id="c6577ef1-42ca-41da-afa1-23ef392e0cd4"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person" methodName="PostPerson" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST People (only working on H2 Database)" id="481b0e26-c9e1-497e-a960-69ff4a6bf2e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
     "firstName": "Middddchael", 
     "lastName": "Dedddde",
     "dob" : "27071973"
     
}</con:request><con:originalUri>http://10.11.21.128/people/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST People by id (na H2 not working MongoDB)" id="2adc4f1a-d095-479f-abfc-91805358a559"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person/{id}" methodName="PostPeople **not working**" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST People by id (na H2 not working MongoDB)" id="0aea9f5d-eebd-4308-a29b-d222878f825c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
     "firstName": "Newbie", 
     "lastName": "Derob",
     "dob" : "27071983"
}</con:request><con:originalUri>http://10.11.21.128/people/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET all People" id="a82f6d28-ec68-4e6f-9c7f-6f9cb3760c01"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person" methodName="GetPerson" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET all People" id="481b0e26-c9e1-497e-a960-69ff4a6bf2e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
     "firstName": "Frodo", 
     "lastName": "Baggins" 
}</con:request><con:originalUri>http://10.11.21.128/people/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="name" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET People 1" id="a9b67d39-daa9-446d-b8d5-d336f441fb37"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person/{id}" methodName="PutPeople" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET People 1" id="834fd842-1a59-452d-acf3-a1327ab63d3e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/people/0</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET People by id" id="8592a88f-5fa0-4f05-b106-4d65d7089bf4"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person/{id}" methodName="GetPeople" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET People by id" id="834fd842-1a59-452d-acf3-a1327ab63d3e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/people/0</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="SEARCH LastName" id="b9f78330-82f0-4d42-bf25-b2ca6622c629"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person/search/findByLastName" methodName="FindPeople" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SEARCH LastName" id="c434dd1d-d070-48ba-9af2-2ed699d8a2e0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="name" value="${#TestCase#LastName}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT update all of People 1" id="26d9a9f6-3d5c-4005-abe9-c44992eb0a14"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person/1" methodName="PutPeople" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT update all of People 1" id="94fa0cf0-1d8d-4275-95d0-dc4fe34c9167" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
     "firstName": "PutTester123", 
     "lastName": "Baggins", 
     "dob": "27111889"
}</con:request><con:originalUri>http://10.11.21.128/people/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT update all of People by id" id="bf807ed9-48ec-489e-8d22-76f3321fbb5a"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person/{id}" methodName="PutPeople" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT update all of People by id" id="94fa0cf0-1d8d-4275-95d0-dc4fe34c9167" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
     "firstName": "Brand", 
     "lastName": "New", 
     "dob": "27111889"
}</con:request><con:originalUri>http://10.11.21.128/people/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH update part of People 1" id="25206f8d-88a9-4dc7-8b9b-ac9c6b176559"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person/1" methodName="PatchPeople" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH update part of People 1" id="d23093b9-f7c2-4184-a72d-f9e907dd284c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
     "firstName": "Michael", 
     "lastName": "Baggins" 
}</con:request><con:originalUri>http://10.11.21.128/people/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH update part of People by id" id="c3273a03-aa15-479b-a52a-3af5e13423fd"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person/{id}" methodName="PatchPeople" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH update part of People by id" id="d23093b9-f7c2-4184-a72d-f9e907dd284c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
     "firstName": "Michael", 
     "lastName": "Baddggins" 
}</con:request><con:originalUri>http://10.11.21.128/people/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE all of People 1" id="e336d580-5921-4907-97e2-87814ee15e97"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person/1" methodName="DeletePeople" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE all of People 1" id="b57895dc-33ec-4d2b-8979-3af5d2b15051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/people/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="name" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE all of People by id" id="b6966cdd-c8e5-4453-b201-0d34e1bcb507"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/person/{id}" methodName="DeletePeople" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE all of People by id" id="b57895dc-33ec-4d2b-8979-3af5d2b15051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/people/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Id" value=""/>
  <con:entry key="id" value="${#TestCase#Id}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>name</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>LastName</con:name><con:value>Dee</con:value></con:property><con:property><con:name>Id</con:name><con:value>202003021630</con:value></con:property></con:properties></con:testCase><con:testCase id="4bee164a-58f5-4903-9b86-097f997f79bc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="com.etshealthgovau.techtest (REST API HPP collection)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="POST data to HPP (h2)" id="be896bde-180c-41f0-9382-667f12bd642b"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/hpp" methodName="PostHPPGeneral" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST data to HPP (h2)" id="45369153-901a-4fcb-919d-b08ef8cf5c54" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
     "prop1": "TestUser2", 
     "prop2": "passxxfffxw0rd2" ,
     "prop3" : "2224567898",
     "prop4" : "OPEN_SUBMISSION",
     "prop5" : "DATA_IN_USE",     
     "prop6" : "DEROBM",     
     "prop7" : "10.11.122.51",     
     "prop8" : "SPARE",     
     "prop9" : "SPARE",
     "prop10" : "SPARE"
}</con:request><con:originalUri>http://10.11.21.128/hppgeneral</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT data in HPP (mongodb)" id="cee9b4ab-3f78-4be6-af9f-9cea01ab5c4f"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/hpp/{id}" methodName="PutHPPGeneralById" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT data in HPP (mongodb)" id="aad62e86-a8fa-416c-88e5-2ebd59ec4ba8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
     "prop1": "ppppSammy", 
     "prop2": "abcpassxxfffxw0rd2" ,
     "prop3" : "2224567898",
     "prop4" : "OPEN_SUBMISSION",
     "prop5" : "DATA_IN_USE",     
     "prop6" : "DEROBM",     
     "prop7" : "10.11.122.51",     
     "prop8" : "ssSPARE",     
     "prop9" : "SPARE",
     "prop10" : "SPARE"
}</con:request><con:originalUri>http://10.11.21.128/hppgeneral</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>202004021612</con:value></con:property></con:properties></con:testCase><con:testCase id="09d72c0a-7c43-474c-8bc1-c1285116b842" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="com.etshealthgovau.techtest (REST API Datetime data generation)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GetDateTime - Get datetime" id="0ea405d0-670f-42ca-9718-75103db86d50"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/datetime" methodName="GetDateTime" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetDateTime - Get datetime" id="a7f8befd-43e0-4ebe-8cc6-cc432d53102d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request/><con:originalUri>http://10.11.21.128/datetime</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="17a905c8-51b3-4f7b-a4e6-fc36c03aad85" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="com.etshealthgovau.techtest (Direct API to data generation)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="api" id="50f08143-a511-4787-9822-4fd717f18105"><con:settings/><con:config><script>import com.etshealthgovau.techtest.datagen.AccountDataGenerator
import com.etshealthgovau.techtest.datagen.hdp.AssetDataGenerator
import com.etshealthgovau.techtest.datagen.DateTimeDataGenerator
import com.etshealthgovau.techtest.datagen.PersonDataGenerator
import com.etshealthgovau.techtest.datagen.DateTimeDataGenerator



AccountDataGenerator x = new AccountDataGenerator();
String out = x.accountFunction().getPhoneNumber();
log.info out

PersonDataGenerator person = new PersonDataGenerator();
String firstN = person.generateRandomPerson().getFirstName();
String lastN = person.generateRandomPerson().getLastName();
log.info firstN + " " + lastN;

AssetDataGenerator dp = new AssetDataGenerator();
String roleValueDP_EXT_REPORT_DEVELOPER = dp.getDataportalAssetData().getRoleValueDP_EXT_REPORT_DEVELOPER();
log.info roleValueDP_EXT_REPORT_DEVELOPER
log.info dp.getDataportalAssetData().getContainerName();
log.info dp.getDataportalAssetData().getAssetTitle();

DateTimeDataGenerator datetime = new DateTimeDataGenerator();
log.info datetime.getDateTimeData().getDateTime1()
log.info datetime.getDateTimeData().getDateTime2()
log.info datetime.getDateTimeData().getDateTime3()
log.info datetime.getDateTimeData().getNow1()
log.info datetime.getDateTimeData().getNow2()
log.info datetime.getDateTimeData().getNow3()
log.info datetime.getDateTimeData().getTomorrow1()
log.info datetime.getDateTimeData().getTomorrow2()
log.info datetime.getDateTimeData().getTomorrow3()
log.info datetime.getDateTimeData().getNextMonth1()
log.info datetime.getDateTimeData().getNextMonth2()
log.info datetime.getDateTimeData().getNextMonth3()
log.info datetime.getDateTimeData().getNextQuarter1()
log.info datetime.getDateTimeData().getNextQuarter2()
log.info datetime.getDateTimeData().getNextQuarter3()
log.info datetime.getDateTimeData().getNextYear1()
log.info datetime.getDateTimeData().getNextYear2()
log.info datetime.getDateTimeData().getNextYear3()
log.info datetime.getDateTimeData().getYesterday1()
log.info datetime.getDateTimeData().getYesterday2()
log.info datetime.getDateTimeData().getYesterday3()
log.info datetime.getDateTimeData().getLastMonth1()
log.info datetime.getDateTimeData().getLastMonth2()
log.info datetime.getDateTimeData().getLastMonth3()
log.info datetime.getDateTimeData().getLastQuarter1()
log.info datetime.getDateTimeData().getLastQuarter2()
log.info datetime.getDateTimeData().getLastQuarter3()
log.info datetime.getDateTimeData().getLastYear1()
log.info datetime.getDateTimeData().getLastYear2()
log.info datetime.getDateTimeData().getLastYear3()

log.info datetime.getDateTimeData().getNextYear2()</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6230b933-11d1-441f-83f0-08984af464e3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="jdbc mongodb" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Direct API to mongodb collections" id="55fb17a9-8d28-46d1-b167-a264d251cd62"><con:settings/><con:config><script>import com.gmongo.GMongo
     
def mongo = new GMongo('localhost:27017')
def db = mongo.getDB('test')

// Find the first document (record), or find the nth record findOne(n-1)
def x = db.person.findOne(0) //same as findOne()
//log.info x["firstName"]

def y = db.person.findOne(firstName: 'Fromsoapui1')
//log.info y



// Add a new property (column)to it   **DIDNT WORK***
//x.dob = '06061988' // x.anything = 'anything' works but didnt see update in the db, think it's just local in soapui
//x.save 

// Count the total number of documents
//log.info db.person.count()

// Add two records into PERSON (set the id value to count + 1 etc) ; these are brand new inserts not updates
db.person.insert([[_id: 202003021632, firstName: 'Mickeeey', lastName: 'Tester123', dob: '11122000'], [_id:5, firstName: 'Fromsoapui2', lastName: 'Tester3123', dob: '09092000']]) //SAME AS PREVIOUS ROW DIFFERENT SYNTAX
db.person &lt;&lt; [[_id: 4, firstName: 'Fromsoapui1', lastName: 'Tester123', dob: '11122000'], [_id:5, firstName: 'Fromsoapui2', lastName: 'Tester3123', dob: '09092000']]
db.person.insert([[_id: 4, firstName: 'Fromsoapui1', lastName: 'Tester123', dob: '11122000'], [_id:5, firstName: 'Fromsoapui2', lastName: 'Tester3123', dob: '09092000']]) //SAME AS PREVIOUS ROW DIFFERENT SYNTAX
db.person.insert([_id:6,dob:'12081978'])

// Update the existing record
db.person.update([_id:0],[$set: [dob:'07012018']])
db.person.update([_id:0],[$set: [newProp:'07012018']]) //adds a new property but as not to DOM wont show in REST calls

hppEntry = db.hPPGeneral.insert([_id: 3, prop1: 'here is an entry'])
hppEntry = db.hPPGeneral.update([_id: 3], [$set: [prop2: 'here is another entry']])
log.info db.hPPGeneral.findOne(3)</script></con:config></con:testStep><con:testStep type="jdbc" name="jdbc mongodb (not working)" id="1c75570a-fc48-49bb-96d3-db847d7e133d"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>mongodb.jdbc.MongoDriver</con:driver><con:connectionString>jdbc:mongo://10.11.21.128:27017/test</con:connectionString><con:properties/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f593bef7-16d7-4484-8011-d74934591764" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="com.etshealthgovau.techtest (Direct API to utilities) ***WIP***" searchProperties="true"><con:settings/><con:testStep type="groovy" name="unittest_SoapUIPropUtils WIP" id="6e5fad61-b28c-43d7-913f-e4da500865a5"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.SecurityUtils;
import com.gurutester.datagenerator.apps.utilities.SoapUIPropUtils;
import com.gurutester.datagenerator.apps.utilities.SystemRelated;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.io.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

        HashMap&lt;String,String> hm = new HashMap&lt;String,String>();
        hm.put("1","one");
        Object propSource = hm;
        SoapUIPropUtils props = new SoapUIPropUtils();
        HashMap x = new HashMap();
        props.getMyProperties(propSource);
//        assertEquals ("Check Maps", x.get("1"),"one");

        log.info x.get("1")</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_SecurityUtils WIP" id="4f4f6e1a-981a-402b-9bb5-457c1736a8fa"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.SecurityUtils;
import com.gurutester.datagenerator.apps.utilities.SoapUIPropUtils;
import com.gurutester.datagenerator.apps.utilities.SystemRelated;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.io.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

        // ENCODING AND DECODING
        
        SecurityUtils s = new SecurityUtils();
        System.out.println(s.encoder("Michael"));
        encoded = s.encoder("Michael")

        log.info "ENCODED VALUE FOR 'MICHAEL' is " + "${encoded}"

        decoded = s.decoder(encoded.toString())

        log.info "DECODED VALUE FOR ENCODED 'MICHAEL' is " + "${decoded}"


        // ENCRYPTING AND DECRYPTING
        encryptOutput = (s.encrypt("michaeld", "AAAAAA")).toString();
        System.out.println(encryptOutput);

        log.info "ENCRYPTED OUTPUT FOR michaeld is " + "${encryptOutput}"

     //   decryptOutput = (s.decrypt("${encryptOutput}"))

        // ERRORS
        //log.info "DECRYPTED OUTPUT FOR encrypted michaeld is " + "${decryptOutput}" 
</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_SystemRelated WIP" id="c2ced3ce-bf3b-4ee9-abec-8f93cee24481"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.SecurityUtils;
import com.gurutester.datagenerator.apps.utilities.SoapUIPropUtils;
import com.gurutester.datagenerator.apps.utilities.SystemRelated;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.io.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

        SystemRelated sr = new SystemRelated();
        System.out.println(sr.hostname);
        System.out.println(sr.userHomeFolder);
        System.out.println(sr.username);
        System.out.println(sr.javaClassPath);
	log.info sr.hostname + " " + sr.userHomeFolder + " " + sr.username + " " + sr.javaClassPath</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_ETSDatabaseUtilities for testproperties inc mongodb" id="f21a7cc1-085c-4d84-a316-5029b7e98750"><con:settings/><con:config><script>import com.etshealthgovau.techtest.utils.ETSDatabaseUtils;
import org.bson.Document;

        ETSDatabaseUtils db = new ETSDatabaseUtils();
        Document x = db.getDbTestPropertiesMongo("csv", "DEV", "dataportal", "mongodb");
	   log.info x.getString("propstrategy")



    
    
    
    
    
    
    
    
    /*
PROPSTRATEGY	1
PROPMOCK	2
PROPENVIRONMENT	3
PROPCORE	4
PROPSCRIPT	5
PROPWORKINGFOLDER	6
PROPENDPOINT1	7
PROPENDPOINT2	8
PROPENDPOINT3	9
PROPENDPOINT4	10
PROPENDPOINT5	11
PROPCSV1	12
PROPADMINUSER1	13
PROPADMINUSER2	14
PROPSLABEL	15
ACTION_USER	16
ACTION_DATE	17
PROPADMINUSER3	18
PROPINTUSER1	19
PROPINTUSER2	20
PROPINTUSER3	21
PROPINTUSER4	22
PROPALMUSER	23
PROPALMPW	24
PROPALMDRAGONFLYPLUGIN	25
PROPALMURL	26
PROPALMDOMAIN	27
PROPALMPROJECT	28
PROPALMTESTPLANDIRECTORY	29
PROPALMTESTLABDIRECTORY	30
PROPALMPROJECTPATH	31
PROPALMSOAPUIPATH	32
PROPALMOVERRIDETESTRUNS	33
APPLICATION	34
     */</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_ETSDatabaseUtilities for testcasedata incl mongodb WIP" id="a8d871a3-2e39-4f93-833d-ecc04ecfc972"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.ETSDatabaseUtils;
import java.sql.ResultSet;
        ETSDatabaseUtils db = new ETSDatabaseUtils();
        ResultSet x = db.getDbTestCaseData("a_derobm", "dataportal", "caf", "count", 666);
        if (x.next()){
            System.out.println(x.getInt("testSetSize"));
            }
    log.info x.getInt("testSetSize") //counting number of test cases
    //log.info x.getString("PROPSTRATEGY")



    
    
    
    
    
    
    
    
    /*
PROPSTRATEGY	1
PROPMOCK	2
PROPENVIRONMENT	3
PROPCORE	4
PROPSCRIPT	5
PROPWORKINGFOLDER	6
PROPENDPOINT1	7
PROPENDPOINT2	8
PROPENDPOINT3	9
PROPENDPOINT4	10
PROPENDPOINT5	11
PROPCSV1	12
PROPADMINUSER1	13
PROPADMINUSER2	14
PROPSLABEL	15
ACTION_USER	16
ACTION_DATE	17
PROPADMINUSER3	18
PROPINTUSER1	19
PROPINTUSER2	20
PROPINTUSER3	21
PROPINTUSER4	22
PROPALMUSER	23
PROPALMPW	24
PROPALMDRAGONFLYPLUGIN	25
PROPALMURL	26
PROPALMDOMAIN	27
PROPALMPROJECT	28
PROPALMTESTPLANDIRECTORY	29
PROPALMTESTLABDIRECTORY	30
PROPALMPROJECTPATH	31
PROPALMSOAPUIPATH	32
PROPALMOVERRIDETESTRUNS	33
APPLICATION	34
     */</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_BufferReader WIP" id="5eb71904-a8ff-41e8-8ae2-ddd0f51644f4"><con:settings/><con:config><script>// using BufferedReader from Java 8
        BufferedReader br = new BufferedReader(new FileReader("U:\\Documents\\soapui\\projects\\concepts\\data\\loginsForSQLInjectionTest.txt") );
        String line = null;
        while ((line = br.readLine()) != null)
        {
            System.out.println(line);
            log.info line
        }</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_SoapUILogUtils WIP" id="0f7dff3c-985d-44eb-8de9-4d811fdf37bf"><con:settings/><con:config><script>import com.gurutester.datagenerator.apps.utilities.SoapUILogUtils;
/*
import org.junit.Test;
import java.io.UnsupportedEncodingException;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.io.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
*/

projectLocation = "U:\\Documents\\soapui\\projects\\concepts"
TestID = "tester"
propEnvironment = "DEV"


SoapUILogUtils log = new SoapUILogUtils();

// get the soap request and response
soapRequest = log.getSoaTestRequest(testRunner.testCase, 'SubmitDummyData_ForLogTests'); soapRequest = context.expand(soapRequest)
soapResponse = log.getSoaTestResponse(testRunner.testCase, 'SubmitDummyData_ForLogTests'); soapResponse = context.expand(soapResponse)
log.saveStringContent (soapRequest, 'SubmitDummyData_ForLogTests', testRunner.testCase, "${projectLocation}", "REQ_${TestID}", "${propEnvironment}") 
log.saveStringContent (soapResponse, 'SubmitDummyData_ForLogTests', testRunner.testCase, "${projectLocation}", "RES_${TestID}", "${propEnvironment}") 

// get the http response
httpResponse = log.getHttpTestResponse(testRunner.testCase, 'abnLookup_ForLogTests'); httpResponse = context.expand(httpResponse)
log.saveStringContent (httpResponse, 'abnLookup_ForLogTests', testRunner.testCase, "${projectLocation}", "RES_${TestID}", "${propEnvironment}") 

// get the jdbc request and response
jdbcRequest = log.getJdbcTestRequest(testRunner.testCase, 'MYSQL_ForLogTests'); jdbcRequest = context.expand(jdbcRequest)
jdbcResponse = log.getJdbcTestResponse(testRunner.testCase, 'MYSQL_ForLogTests'); jdbcResponse = context.expand(jdbcResponse)
log.saveStringContent (jdbcRequest, 'MYSQL_ForLogTests', testRunner.testCase, "${projectLocation}", "REQ_${TestID}", "${propEnvironment}") 
log.saveStringContent (jdbcResponse, 'MYSQL_ForLogTests', testRunner.testCase, "${projectLocation}", "RES_${TestID}", "${propEnvironment}") 

// get the rest response
restResponse = log.getRestTestResponse(testRunner.testCase, 'DatageneratorWebserviceApi_ForLogTests'); restResponse = context.expand(restResponse)
log.saveStringContent (restResponse, 'DatageneratorWebserviceApi_ForLogTests', testRunner.testCase, "${projectLocation}", "RES_${TestID}", "${propEnvironment}") 
</script></con:config></con:testStep><con:testStep type="groovy" name="unittest_SoapUIStepUtils WIP" id="f3394440-e7a7-4a9d-bee5-9c5ffcac935f"><con:settings/><con:config><script/></con:config></con:testStep><con:properties><con:property><con:name>firstName</con:name><con:value>Frncower</con:value></con:property><con:property><con:name>lastName</con:name><con:value>Liobeuel</con:value></con:property><con:property><con:name>dob</con:name><con:value>12-10-1963</con:value></con:property><con:property><con:name>medicare</con:name><con:value>2232 68539 1</con:value></con:property><con:property><con:name>address</con:name><con:value>69 Liieotis Street, Krieotis, VIC, 3003</con:value></con:property><con:property><con:name>input1</con:name><con:value>ABCD</con:value></con:property><con:property><con:name>input2</con:name><con:value>7890</con:value></con:property></con:properties></con:testCase><con:testCase id="b6843e0a-77b8-4c3b-a048-d4b7c25d998b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="com.etshealthgovau.techtest (REST API TestCaseData collection)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="POST data to TestCaseData (h2)" id="6f8855f1-8438-4866-bd8c-0c798eddb110"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/testcasedata" methodName="PostTestCaseData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST data to TestCaseData (h2)" id="45369153-901a-4fcb-919d-b08ef8cf5c54" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
"testId" : "Some value",
"testObjective" : "Some value",
"prop1" : "Some value",
"application" : "Some value",
"prop2" : "Some value",
"prop3" : "Some value",
"prop4" : "Some value",
"prop5" : "Some value",
"prop6" : "Some value",
"prop7" : "Some value",
"prop8" : "Some value",
"prop9" : "Some value",
"prop10" : "Some value",
"prop11" : "Some value",
"prop12" : "Some value",
"prop13" : "Some value",
"testPlan" : "Some value",
"actionUser" : "Some value",
"actionDate" : "Some value",
"testmanagementId" : "Some value",
"prop14" : "Some value",
"prop15" : "Some value"
}</con:request><con:originalUri>http://10.11.21.128/hppgeneral</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT data in TestCaseData (mongodb)" id="7aa1bef7-43e0-4861-991d-4113c81a9ffe"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/testcasedata/{id}" methodName="PutTestCaseDataById" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT data in TestCaseData (mongodb)" id="aad62e86-a8fa-416c-88e5-2ebd59ec4ba8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
"testId" : "e2ehprgdb01",
"testObjective" : "Create an Asset",
"prop1" : "Some value",
"application" : "HDP Dataportal",
"prop2" : "Some value",
"prop3" : "Some value",
"prop4" : "Some value",
"prop5" : "Some value",
"prop6" : "Some value",
"prop7" : "Some value",
"prop8" : "Some value",
"prop9" : "Some value",
"prop10" : "Some value",
"prop11" : "Some value",
"prop12" : "Some value",
"prop13" : "Some value",
"testPlan" : "run_a_derobm",
"actionUser" : "a_derobm",
"actionDate" : "Some value",
"testmanagementId" : "alm100",
"prop14" : "Some value",
"prop15" : "Some value"

}</con:request><con:originalUri>http://10.11.21.128/hppgeneral</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="09cc9932-d701-4e6c-aa02-144f17d62e8b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="com.etshealthgovau.techtest (REST API TestProperties collection)" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="POST data to TestProperties (h2)" id="0a51f647-d1ff-4d4e-89bc-7d17fa8d22df"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/testproperties" methodName="PostTestProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST data to TestProperties (h2)" id="45369153-901a-4fcb-919d-b08ef8cf5c54" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{
	"propstrategy" : "somevalue",
"propmock" : "somevalue",
"propenvironment" : "somevalue",
"propcore" : "somevalue",
"propscript" : "somevalue",
"propworkingfolder" : "somevalue",
"propendpoint1" : "somevalue",
"propendpoint2" : "somevalue",
"propendpoint3" : "somevalue",
"propendpoint4" : "somevalue",
"propendpoint5" : "somevalue",
"propcsv1" : "somevalue",
"propadminuser1" : "somevalue",
"propadminuser2" : "somevalue",
"propslabel" : "somevalue",
"action_user" : "somevalue",
"action_date" : "somevalue",
"propadminuser3" : "somevalue",
"propintuser1" : "somevalue",
"propintuser2" : "somevalue",
"propintuser3" : "somevalue",
"propintuser4" : "somevalue",
"propalmuser" : "somevalue",
"propalmpw" : "somevalue",
"propalmdragonflyplugin" : "somevalue",
"propalmurl" : "somevalue",
"propalmdomain" : "somevalue",
"propalmproject" : "somevalue",
"propalmtestplandirectory" : "somevalue",
"propalmtestlabdirectory" : "somevalue",
"propalmprojectpath" : "somevalue",
"propalmsoapuipath" : "somevalue",
"propalmoverridetestruns" : "somevalue",
"application" : "somevalue"

}
</con:request><con:originalUri>http://10.11.21.128/hppgeneral</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT data in TestProperties (mongodb)" id="72ff056b-8dce-4e05-a728-026479fa17a6"><con:settings/><con:config service="http://10.11.21.128:9090" resourcePath="/testproperties/{id}" methodName="PutTestPropertiesById" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT data in TestProperties (mongodb)" id="aad62e86-a8fa-416c-88e5-2ebd59ec4ba8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.11.21.128:9090</con:endpoint><con:request>{ 
"propstrategy" : "CSV",
"propmock" : "off",
"propenvironment" : "DEV",
"propcore" : "somevalue",
"propscript" : "somevalue",
"propworkingfolder" : "somevalue",
"propendpoint1" : "somevalue",
"propendpoint2" : "somevalue",
"propendpoint3" : "somevalue",
"propendpoint4" : "somevalue",
"propendpoint5" : "somevalue",
"propcsv1" : "somevalue",
"propadminuser1" : "somevalue",
"propadminuser2" : "somevalue",
"propslabel" : "somevalue",
"action_user" : "somevalue",
"action_date" : "somevalue",
"propadminuser3" : "somevalue",
"propintuser1" : "somevalue",
"propintuser2" : "somevalue",
"propintuser3" : "somevalue",
"propintuser4" : "somevalue",
"propalmuser" : "somevalue",
"propalmpw" : "somevalue",
"propalmdragonflyplugin" : "somevalue",
"propalmurl" : "somevalue",
"propalmdomain" : "somevalue",
"propalmproject" : "somevalue",
"propalmtestplandirectory" : "somevalue",
"propalmtestlabdirectory" : "somevalue",
"propalmprojectpath" : "somevalue",
"propalmsoapuipath" : "somevalue",
"propalmoverridetestruns" : "somevalue",
"application" : "dataportal"


}</con:request><con:originalUri>http://10.11.21.128/hppgeneral</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="bc8d88d0-b765-4db9-85b9-6a59c5d8f469" name="SoapUI Classes and Methods"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="1bb6e519-1b44-4f44-8546-dd72e1511e05" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LibraryCalls" searchProperties="true"><con:description>WORK IN PROGRESS CLASSES/METHODS</con:description><con:settings/><con:testStep type="groovy" name="unit test" id="ecced23d-f248-4e79-91f6-9732782d3e44"><con:settings/><con:config><script>context.testCase.testSuite.project.testSuites["SoapUI Classes and Methods"].testCases["LibraryCalls"].testSteps["HealthData"].run(testRunner, context)
	log.info context.HealthData.classMethodCheck()
	log.info context.HealthData.hardCodedDataPortalData()
	log.info context.HealthData.dataPortalHCD["password"]
	log.info context.HealthData.assetData()
	log.info context.HealthData.dataAssetData["assetTitle"]
	log.info context.HealthData.dataAssetData["assetDescription"]
</script></con:config></con:testStep><con:testStep type="groovy" name="HealthData" id="96788696-eb37-4670-bfff-7bf1fcd24929"><con:settings/><con:config><script><![CDATA[/*
Class consisting of random data for the Health Data Portal
*/
context.setProperty("HealthData", new HealthData());

//import org.apache.commons.lang.RandomStringUtils
//import java.util.Random



class HealthData {
	//def num, sum, remainder,abn
	
	def dataPortalHCD = [:]
	def dataAssetData = [:]

	//Use this method for unit testing
	def String classMethodCheck() {return "Reading the Class and Method correctly"} 

	//Use this method to get hard-coded data
	def String hardCodedDataPortalData() {
	dataPortalHCD["GivenNameKey"] = "givenName"
	dataPortalHCD["LastNameKey"] = "sn"
	dataPortalHCD["OrgType"] = "Local Government"	
	dataPortalHCD["AbnAttribute"] = "ABNorganization"
	dataPortalHCD["PasswordKey"] = "password"
	dataPortalHCD["userID"] = "tester"
	dataPortalHCD["requestSystem"] = "DP" 
	dataPortalHCD["ABNorganisation"] = "66059658641" //Don't use 12300000108 as it's used by the Devs for Regression Testing
	dataPortalHCD["organisation"] = "AUTOTest with ${dataPortalHCD["ABNorganisation"]}"
	dataPortalHCD["givenName"] = "Auto"
	dataPortalHCD["familyName"] = "Tester" //surname
	dataPortalHCD["password"] = "passw0rd" //should generate a random value and store locally for use
	dataPortalHCD["accType"] = "AKEY"
	dataPortalHCD["acceptedTCidRequest"] = "401"	//is this a terms and conditions acceptance flag?
	dataPortalHCD["acceptedTCidAssert"] = "812"	//unsure if this is always the hard-coded response for Add Security Token Response ??	
	//dataPortalHCD["termsValue"] = '<![CDATA[<!-- Managed Content Start --><p><p dir="ltr"><strong><u>TERMS OF USE</u></strong></p><p dir="ltr">Welcome to the Health Data Portal (dataportal.health.gov.au). As condition of Your use of the <strong>secure area </strong>(which requires users to log in for access) of the Health Data Portal You must agree to these Terms of Use.</p><p dir="ltr">In these Terms of Use, the terms â€œYouâ€ and â€œYourâ€ refer to the user of the Health Data Portal.</p><p dir="ltr">The Commonwealth of Australia as represented by the Department of Health (the â€˜<strong>Department</strong>â€™) may at its discretion update these Terms of Use.&nbsp; By continuing to use the Health Data Portal, You accept the Terms of Use as they apply from time to time.</p><p dir="ltr"><strong>YOUR OBLIGATIONS</strong></p><p dir="ltr">You must:</p><ol dir="ltr" style=" list-style-type: lower-alpha;"><li>only use the Health Data Portal for Your own lawful purposes, in accordance with these Terms of Use or any condition posted by the Department on the Health Data Portal, and in a manner that does not infringe the intellectual property rights of or restrict or inhibit the use and enjoyment of the Health Data Portal by any third party. &nbsp;</li><li>not re-transmit, distribute, disclose or make available any of the materials on the <strong>secure area</strong> of the Health Data Portal to any person without the written consent of an authorised person of the Department.</li><li>not attempt to undermine the security or integrity of the Health Data Portal.</li><li>not attempt to gain unauthorised access to any materials other than those to which You have been given express permission by the Department.</li><li>ensure that Your username and password required to access the Health Data Portal is kept secure and confidential at all times, and not permit any other person to use your username and password. You must immediately notify the Department of any unauthorised use of Your password or any other breach of security and You must take all other actions that the Department reasonably deems necessary to maintain or enhance the security of the Health Data Portal.</li><li>not use, or misuse the Health Data Portal in any way which may disrupt or impair the functionality of the Health Data Portal or other systems used for the Health Data Portal.</li><li>not transmit, or input via the Health Data Portal, any:<ol style=" list-style-type: lower-roman;"><li>harmful code;</li><li>unlawful, defamatory, obscene, offensive or scandalous material, or any material that constitutes or encourages conduct that would contravene any law or which may harass or cause distress or inconvenience to any person; and</li><li>material in violation of any intellectual property rights or any laws for which You do not have the right to use or transmit or input into the Health Data Portal.</li></ol></li><li><span style="font-family:helvetica,sans-serif;"><span style="font-size:10.0pt;">if You are a Primary Health Network (<strong>PHN</strong>) user -&nbsp;comply with the terms of use for the Qlik Sense Enterprise Production Site (â€˜<strong>Qlik Sense</strong>â€™) on the Health Data Portal set out below under the heading â€˜QLIK SENSEâ€™.</span></span></li></ol><p dir="ltr">Materials on the Health Data Portal may be protected by intellectual property rights. You must not use any intellectual property on the Health Data Portal for a purpose You do not have express permission from the intellectual property rights owner. If You have any doubt as to Your right to use the intellectual property, please contact its owner. The Department is not liable if You breach an ownerâ€™s intellectual property rights.</p><p dir="ltr">You remain solely responsible for complying with all applicable laws in connection to Your use of the Health Data Portal. It is Your responsibility to check that storage of, transfer and access to the materials you transmit or input via the Health Data Portal will comply with all laws applicable to You.</p><p dir="ltr">The Department may collect, use and disclose personal information about You or about third parties that You input or transmit via the Health Data Portal for the purpose of administering the Health Data Portal. The Department will handle the personal information in accordance with the <em>Privacy Act 1988</em> and relevant state and territory privacy laws.</p><p dir="ltr">By You disclosing other peopleâ€™s personal information to the Department via the Health Data Portal, You warrant to the Department that:</p><ol dir="ltr" style=" list-style-type: lower-alpha;"><li>the people to whom the personal information relates have consented to the Department collecting, using and disclosing their personal information as described in the Departmentâ€™s privacy notice located on the Health Data Portal homepage under the heading â€˜Privacy Statementâ€™; and</li><li>You have drawn to those peopleâ€™s attention that Departmental privacy notice.</li></ol><p dir="ltr">For further details about how the Department handles personal information, see also the Departmentâ€™s privacy policy at <a href="http://www.health.gov.au/internet/main/publishing.nsf/content/privacy-policy" >http://www.health.gov.au/internet/main/publishing.nsf/content/privacy-policy</a>.</p><p dir="ltr">You indemnify the Department for any loss or damage it suffers in connection with Your use of the Health Data Portal. Your liability to indemnify the Department under these Terms of Use will be reduced proportionately to the extent that any negligent or other tortious act or omission of the Department contributed to the relevant loss or damage.</p><p dir="ltr">If You:</p><ol dir="ltr" style=" list-style-type: lower-alpha;"><li>breach any of these Terms of Use or conditions posted by the Department on the Health Data Portal; or</li><li>are engaging in fraudulent immoral or illegal activities,</li></ol><p dir="ltr">the Department may, without limiting its rights, terminate Your access to the Health Data Portal or suspend for any period of time Your use of the Health Data Portal.</p><p dir="ltr"><strong>QLIK SENSE</strong> (Applicable to PHN users only)</p><p dir="ltr">If You are a PHN user, the Department will provide You with access to Qlik Sense via the Health Data Portal during the term of the Departmentâ€™s licence agreement with QlikTech Australia Pty Ltd. You may only use Qlik Sense in accordance with the licence (Qlik Sense Developer Licence or Qlik Sense Viewer Licence) You have been allocated by the Department.</p><p dir="ltr">If the Department allocates You a Qlik Sense Developer Licence, You may only use Qlik Sense:</p><ol dir="ltr" style=" list-style-type: lower-alpha;"><li>to upload, interrogate, modify and adapt datasets and create Your own dashboards and, if You so choose, share those datasets and dashboards with other PHN users and the Department; and</li><li>to access information, data and dashboards provided by, and to, the Department and other PHN users.</li></ol><p dir="ltr">If the Department allocates You a Qlik Sense Viewer Licence, You may only use Qlik Sense to â€˜viewâ€™ data in connection with the Qlik Sense dashboards on the Health Data Portal. You must not use Your Qlik Sense Viewer Licence to create, update, upload, or modify any of the data or administer any field changes to, or in connection with, the Qlik Sense dashboards.</p><p dir="ltr">You may use Qlik Sense for non-commercial purposes only.</p><p dir="ltr">You acknowledge and accept that the Department or QlikTech Australia Pty Ltd may conduct an audit of Your use of Qlik Sense via the Health Portal.</p><p dir="ltr"><strong>DISCLAIMERS</strong></p><p dir="ltr">You agree that Your use of the Health Data Portal is entirely at Your own risk, and You have made Your own assessment on the risk of use of the Health Data Portal and any materials on the Health Data Portal.</p><p dir="ltr">The Department may at any time change the content, including removal of any materials held in the Health Data Portal at its discretion and without notice.</p><p dir="ltr">You agree that material You transmit or input via the Health Data Portal may be accessed by other users who are permitted access to the material by the Department. Therefore, You should consider and assess the risk of which users will have access to material You transmit or input via the Health Data Portal before using the Health Data Portal.&nbsp;</p><p dir="ltr">The materials on the Health Data Portal may include the views or recommendations of third parties and does not necessarily reflect the views of the Australian Government or indicate a commitment to a particular course of action.</p><p dir="ltr">The Health Data Portal is not a substitute for independent professional advice and You should obtain any appropriate professional advice relevant to Your particular circumstances. The Department cannot guarantee and assumes no legal liability or responsibility for the accuracy, currency, completeness or interpretation of any of the materials on the Health Data Portal.</p><p dir="ltr">We strive to protect the materials available through the Health Data Portal. However, the Department gives no warranty in connection with the Health Data Portal and its materials and cannot guarantee that the use of the Health Data Portal and its materials will not breach intellectual property rights, will be uninterrupted or error free, that defects will be corrected, or that the Health Data Portal is free of harmful code.</p><p dir="ltr">To the maximum extent permitted by law, the Department excludes all liability and responsibility to You (or any other person) for any loss (including loss of information, data, profits and savings) or damage resulting, directly or indirectly, in connection from Your (or any other person) use of or reliance on, the Health Data Portal or its materials.</p><p dir="ltr">Where connection to a system or website outside our control compromises the objectives of the Health Data Portal, we may sever links to that website or system.</p><p dir="ltr"><strong>GENERAL</strong></p><p dir="ltr">These Terms of Use are governed by the laws of the Australian Capital Territory, Australia, and You agree to submit to the exclusive jurisdiction of the courts of the Australian Capital Territory.</p><p dir="ltr">If any of these Terms of Use are held to be invalid, unenforceable or illegal for any reason, the remaining Terms of Use will continue in full force.</p><p dir="ltr">If either party waives any breach of these Terms of Use, this will not constitute a waiver of any other breach. No waiver will be effective unless made in writing.</p></p><!-- Managed Content End -->]]]]>><![CDATA['
	dataPortalHCD["termsValue"] = '<![CDATA[This is some Terms And Conditions sample text for Test Automation and it contains a CEND ]]]]]]>><![CDATA[<![CDATA[>]]]]>><![CDATA['
	dataPortalHCD["true"] = "true" //use for accepting terms, confirming certified, etc
	dataPortalHCD["false"] = "false" 
	//dataPortalHCD["emailAddress"] = "mdrtestingdirectexternaluserload@test.com.au"	
	//dataPortalHCD["emailAddress"] = "enterpriseServicesTestAutomation@health.gov.au"	
	dataPortalHCD["emailAddress"] = "automation.testing@somedomain.com.au"	
	dataPortalHCD["phoneNumber"] = "(02) 6211 2222"
	dataPortalHCD["usage"] = "HOME" // as seen in a request
	dataPortalHCD["usageAssert"] = "BUSN" //as seen in a response	
	dataPortalHCD["servicesName"] = "DEFAULT"	
	dataPortalHCD["externalAccountIdHardCoded"] = "625827643" //depending on the service might be an externalAccountID or userID
	dataPortalHCD["externalIdHardCoded"] = "JsaWjRWPF0gKjjVh5MynyJyGbFRQKo" //never likely needed here (will need to map from the Add Security Token response
	dataPortalHCD["accountTypeHardAssert"] = "SECT" //use to assert the Add Security Token Response
	dataPortalHCD["successNewPersonAssert"] = "SUCCESS_NEW_PERSON" //use for assertion
	dataPortalHCD["statusActiveAssert"] = "Active" //use for assertion

	//roles (external)
	dataPortalHCD["roleKeyDP_EXT_SUB_UPLOADER"] = "DP_EXT_SUB_UPLOADER"	
	dataPortalHCD["roleValueDP_EXT_SUB_UPLOADER"] = "Uploader of data assets for submission"		
	dataPortalHCD["roleKeyDP_EXT_SUB_REVIEWER"] = "DP_EXT_SUB_REVIEWER"
	dataPortalHCD["roleValueDP_EXT_SUB_REVIEWER"] = "Reviewer of data assets for submission"	
	dataPortalHCD["roleKeyDP_EXT_SUB_APPROVER"] = "DP_EXT_SUB_APPROVER"
	dataPortalHCD["roleValueDP_EXT_SUB_APPROVER"] = "Approver of data assets for submission"	
	dataPortalHCD["roleKeyDP_EXT_USER_ADMIN"] = "DP_EXT_USER_ADMIN"
	dataPortalHCD["roleValueDP_EXT_USER_ADMIN"] = "User Administrator"	
	dataPortalHCD["roleKeyDP_EXT_REPORT_VIEWER"] = "DP_EXT_REPORT_VIEWER"
	dataPortalHCD["roleValueDP_EXT_REPORT_VIEWER"] = "Interactive Report Viewer"	
	dataPortalHCD["roleKeyDP_EXT_REPORT_DEVELOPER"] = "DP_EXT_REPORT_DEVELOPER"
	dataPortalHCD["roleValueDP_EXT_REPORT_DEVELOPER"] = "Interactive Report Developer"	
	dataPortalHCD["roleKeyDP_EXT_SUB_PROCESSED_VIEWER"] = "DP_EXT_SUB_PROCESSED_VIEWER"
	dataPortalHCD["roleValueDP_EXT_SUB_PROCESSED_VIEWER"] = "Viewer of Processed Data in submission"	
	dataPortalHCD["roleKeyDP_EXT_SUB_RECEIVER"] = "DP_EXT_SUB_RECEIVER"
	dataPortalHCD["roleValueDP_EXT_SUB_RECEIVER"] = "Receiver of data assets for submission"	

	//roles (internal)
	dataPortalHCD["roleKeyDP_INT_SUB_UPLOADER"] = "DP_INT_SUB_UPLOADER"	
	dataPortalHCD["roleValueDP_INT_SUB_UPLOADER"] = "Uploader of data assets for publication"		
	dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"] = "DP_INT_SUB_REVIEWER"
	dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"] = "Reviewer of data assets for publication"	
	dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"] = "DP_INT_SUB_APPROVER"
	dataPortalHCD["roleValueDP_INT_SUB_APPROVER"] = "Approver of data assets for publication"	
	dataPortalHCD["roleKeyDP_INT_SUB_RECEIVER"] = "DP_INT_SUB_RECEIVER"
	dataPortalHCD["roleValueDP_INT_SUB_RECEIVER"] = "Receiver of data assets for publication"	
	dataPortalHCD["roleKeyDP_INT_PRODUCER"] = "DP_INT_PRODUCER"
	dataPortalHCD["roleValueDP_INT_PRODUCER"] = "Producer of data assets for publication"	
	dataPortalHCD["roleKeyDP_INT_REVIEWER"] = "DP_INT_REVIEWER"
	dataPortalHCD["roleValueDP_INT_REVIEWER"] = "Reviewer of data assets for publication"	
	dataPortalHCD["roleKeyDP_INT_PUBLISHER"] = "DP_INT_PUBLISHER"
	dataPortalHCD["roleValueDP_INT_PUBLISHER"] = "Publisher of data assets for publication"	
	dataPortalHCD["roleKeyDP_INT_USER_ADMIN"] = "DP_INT_USER_ADMIN"
	dataPortalHCD["roleValueDP_INT_USER_ADMIN"] = "User Administrator"	
	dataPortalHCD["roleKeyDP_INT_SEC_CAT_ADMIN"] = "DP_INT_SEC_CAT_ADMIN"
	dataPortalHCD["roleValueDP_INT_SEC_CAT_ADMIN"] = "File Permission / Security Category Administrator"	
	dataPortalHCD["roleKeyDP_INT_GROUPING_ADMIN"] = "DP_INT_GROUPING_ADMIN"
	dataPortalHCD["roleValueDP_INT_GROUPING_ADMIN"] = "Folder Administrator"	
	dataPortalHCD["roleKeyDP_INT_REPORT_VIEWER"] = "DP_INT_REPORT_VIEWER"
	dataPortalHCD["roleValueDP_INT_REPORT_VIEWER"] = "Interactive Report Viewer"	
	dataPortalHCD["roleKeyDP_INT_REPORT_DEVELOPER"] = "DP_INT_REPORT_DEVELOPER"
	dataPortalHCD["roleValueDP_INT_REPORT_DEVELOPER"] = "Interactive Report Developer"	
	dataPortalHCD["roleKeyDP_INT_REPORTING_ROUND_ADMIN"] = "DP_INT_REPORTING_ROUND_ADMIN"
	dataPortalHCD["roleValueDP_INT_REPORTING_ROUND_ADMIN"] = "Reporting Round Administrator"	
	dataPortalHCD["roleKeyDP_INT_ORGANISATION_ADMIN"] = "DP_INT_ORGANISATION_ADMIN"
	dataPortalHCD["roleValueDP_INT_ORGANISATION_ADMIN"] = "Organisation Administrator"	


	
	}
	//Use this method to get random data for Assets
	
	def String assetData () {
		Random random = new Random()

		//asset title
		String ranNum = "${random.nextInt(99999-11111)+11111}"
		dataAssetData["assetTitle"] = "AutoTestAsset${ranNum}"

		//asset description
		//dataAssetData["assetDescription"] = "This is a description for an asset ${dataAssetData["assetTitle"]}"
		dataAssetData["assetDescription"] = "This is a description for an asset "
		
		//draft data asset values
		//dataAssetData["assetId"] = 0
		//dataAssetData["assetRevisionNumber"] = 0
		dataAssetData["assetRepRndRefId"] = "0"
	}
	//Use this method to return an abn
	def String abnGen() {context.HealthData.abnGen()
	/*
	ABN GENERATOR
	1.Pick nine arbitrary (random) digits.
	2.Put 00 in front of those digits (just temporarily).
	3.Apply the weighting factor per position : 10 1 3 5 7 9 11 13 15 17 19
	4.Calculate the remainder when you divide by 89.
	5.Subtract that remainder from 89.
	6.Add 10 to that result to get the new leftmost digits.
	*/
	Random random = new Random()
	// generate a random number with 9 digits
	num = "${random.nextInt(999999999-111111111)+111111111}"
	//log.info num
	// append with "00"
	num = "00${num}"

	// split into chars (eg num[0], num[1],....,num[10])
	num.split("(?!^)")

	//apply weighing formula
	sum = num[0].toInteger() *10 + num[1].toInteger()*1 + num[2].toInteger()*3 + num[3].toInteger()*5 + num[4].toInteger()*7 + num[5].toInteger()*9 + num[6].toInteger()*11 + num[7].toInteger()*13 + num[8].toInteger()*15 + num[9].toInteger()*17 + num[10].toInteger()*19
	sum=sum.toInteger()
	remainder = sum % 89
	remainder = 89 - remainder
	remainder = (remainder + 10).toString()

	// build the abm
	abn = "${remainder}${num[2]}${num[3]}${num[4]}${num[5]}${num[6]}${num[7]}${num[8]}${num[9]}${num[10]}"
	return abn
	}
  }
/*
CALL TESTS (RUN IN SEPARATE GROOVY STEP)
core = context.testCase.testSuite.project //or using context (ok for this case because the methods are under the same project)
//core = testRunner.testCase.testSuite.project.workspace.getProjectByName("Concepts")
scripts = core.testSuites["Library"]
scripts.testCases["health-data"].testSteps["HealthData"].run(testRunner, context)
log.info context.abnGen
log.info context.classMethodCheck

 
 */

  
]]></script></con:config></con:testStep><con:testStep type="groovy" name="ManageSoapUIProperties" id="cb709beb-0690-48e3-8c3b-32c6151c184d"><con:settings/><con:config><script>/*
 * Class which contains methods to get and save soapui properties to/from property maps
 */

import org.apache.commons.lang.RandomStringUtils
context.setProperty("ManageSoapUIProperties", new ManageSoapUIProperties())

class ManageSoapUIProperties {
	def propertyMapValue
	
	//get soapui properties and save to a property map
	def getMyProperties = {propertyLocation, mapToCreate
		->
		for (prop in propertyLocation.getPropertyList()) {
			propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
			mapToCreate[prop.getName()] = propertyMapValue}
	}

	//save soapui properties to a specified property map
	def saveToProperties = {propertyLocation, mapToSave
		->
		mapToSave.each {propertyName,	propertyValue
			->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }
		
	}

	// read from properties file to property map ****NOT WORKING WHEN CALLED**
	def readPropertiesFileToMap(String mapToSave, String fileLocation) {

		def props = new Properties()
		new File(fileLocation).withInputStream { s ->
  		props.load(s) }
		
		
		mapToSave = [:]
		props.each {

		//if storing to soapui property)
		//context.testCase.testSuite.project.setPropertyValue(it.key, it.value)

		mapToSave[it.key] = it.value
		}
	}

	// read from properties file to soapui properties
	def readPropertiesFile(testCaseContext, String fileLocation) {

		def props = new Properties()
		new File(fileLocation).withInputStream { s ->
  		props.load(s) }
				
		props.each {
		testCaseContext.setPropertyValue(it.key, it.value)
		}

	}

	def exportTestCaseProperties(def context, String filePath) {
    		def  props = new Properties()
    		//Get all the property names of test cases
    		//def names = context.testCase.getPropertyNames()
    		def names = context.testCase.getPropertyNames()
    		//loop thru names and set Properties object
    		if (names) {
        				names.each { name ->
            			//log.info "Set property ${name}"
            			props.setProperty(name, context.testCase.getPropertyValue(name))}
        			//Write properties object to a file
        			def propFile = new File(filePath)
        			props.store(propFile.newWriter(), null)
        			//log.info "Check the properties file: ${filePath}"} 
    		//else {
    			//log.info "There does not seem to have any test case properties to write, check it."
    		//	}
    			}
    		}
	def exportTestSuiteProperties(def context, String filePath) {
    		def  props = new Properties()
    		//Get all the property names of test cases
    		//def names = context.testCase.getPropertyNames()
    		def names = context.testCase.testSuite.getPropertyNames()
    		//loop thru names and set Properties object
    		if (names) {
        				names.each { name ->
            			//log.info "Set property ${name}"
            			props.setProperty(name, context.testCase.testSuite.getPropertyValue(name))}
        			//Write properties object to a file
        			def propFile = new File(filePath)
        			props.store(propFile.newWriter(), null)
        			//log.info "Check the properties file: ${filePath}"} 
    		//else {
    			//log.info "There does not seem to have any test case properties to write, check it."
    		//	}
    			}
    		}

}</script></con:config></con:testStep><con:testStep type="groovy" name="ManageTestCaseSteps" id="ca67e8b0-b136-4a4c-8d53-3e7cb1633767"><con:settings/><con:config><script>/*
 * Class which contains methods to enable and disable test case steps
 */

import org.apache.commons.lang.RandomStringUtils
context.setProperty("ManageTestCaseSteps", new ManageTestCaseSteps())

class ManageTestCaseSteps {
	
	def disableAllSteps(testCaseContext) {
			testCaseContext.testSuite.getTestCaseList().each
		{
    		it.testStepList.each 
    			{
         		if( it.disabled) { it.disabled = false } //if already disabled ignore
         		it.setDisabled(true) // disable the steps not already disabled
     	}}}
	

	def enableAllSteps (testCaseContext) {
			testCaseContext.testSuite.getTestCaseList().each
		{
    		it.testStepList.each 
    			{
         		if( it.disabled) { it.setDisabled(false)}
    			}}}

		
}


</script></con:config></con:testStep><con:testStep type="groovy" name="BioGenerator" id="e7fff75c-eea3-4798-ac4b-bf4d4b10851d"><con:settings/><con:config><script>/*
 * Class which contains random bio data
 */

//import java.util.Random
import org.apache.commons.lang.RandomStringUtils
context.setProperty("BioGenerator", new BioGenerator())

class BioGenerator {
	Random random = new Random()
	
	// random name generator (increase syllable lists to increase randomness)	
	def beginning = ["Kr", "Ca", "Ra", "Mi", "Le", "Jen", "Fran", "And", "Ant", "Br", "Cr", "Ba", "Be", "Bi", "Bo", "Bu"]
	def middle = ["ich", "eren", "ani", "ieo", "aen", "ion", "end", "ath", "ess", "oon", "ere", "ert", "erg", "iow", "obe", "abe", "ebe"]
	def ending = ["iel", "ten", "athon", "tis", "nco", "wis", "uel", "ini", "erd", "rnt", "anon", "wer", "rto", "ind", "end", "and", "urd", "usp"]
	def beg = random.nextInt(beginning.size())
	def mid = random.nextInt(middle.size())
	def end = random.nextInt(ending.size())
	def firstName = (beginning.toSet() as List)[beg] + (middle.toSet() as List)[mid] + (ending.toSet() as List)[end]
	def begg = random.nextInt(beginning.size())
	def midd = random.nextInt(middle.size())
	def endd = random.nextInt(ending.size())
	def lastName = (beginning.toSet() as List)[begg] + (middle.toSet() as List)[midd] + (ending.toSet() as List)[endd]

	// add more stuff here (eg gender, date of birth, identifiers, as per whatever the need)

}


/*
EXAMPLE GROOVY WHICH CALLS AND RUNS THE ABOVE
// Get the Classes/methods (eg below is on a per class/method (rather than to step through and load all under module-name)
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("Concepts")
scripts = core.testSuites["Library"]
scripts.testCases["module-name"].testSteps["bioGenerator"].run(testRunner, context)


// Call the required output (eg FirstName and LastName)
log.info "Random Name is " + context.bioGenerator.firstName + " " + context.bioGenerator.lastName

testRunner.testCase.testSuite.project.setPropertyValue("FirstName", firstName)
testRunner.testCase.testSuite.project.setPropertyValue("GivenName", lastName)

 
 */</script></con:config></con:testStep><con:testStep type="groovy" name="HardCodedDataEnvironmentSwitching" id="db198784-aa2f-4103-8bc7-054eda7c13a6"><con:settings/><con:config><script>context.setProperty("HardCodedDataEnvironmentSwitching", new HardCodedDataEnvironmentSwitching());

//import org.apache.commons.lang.RandomStringUtils
//import java.util.Random



class HardCodedDataEnvironmentSwitching {
	def orgSITAllSections
	def testEnvironmentValue
	def testEnvironment (testEnvironmentValue) {

	// DEV
	if ((testEnvironmentValue == "DEV")||(testEnvironmentValue == "Dev")) {
	orgDEVAllSections="4737";orgDEVDataItemPI01="4705";orgDEVDataItemPI02="4706";orgDEVDataItemPI03="4707";orgDEVDataItemPI04="4708";orgDEVDataItemPI05="4709";orgDEVDataItemPI06="4710";orgDEVDataItemPI07="4711"
	orgDEVDataItemPI08="4712";orgDEVDataItemPI09="4713";orgDEVDataItemPI10="4714";orgDEVDataItemPI11="4715";orgDEVDataItemPI12="4716";orgDEVDataItemPI13="4717";orgDEVDataItemPI14="4718";orgDEVDataItemPI15="4719"
	orgDEVDataItemPI16="4720";orgDEVDataItemPI17="4721";orgDEVDataItemPI18="4722";orgDEVDataItemPI19="4723";orgDEVDataItemPI20="4724";orgDEVDataItemPI21="4725";orgDEVDataItemPI22="4726";orgDEVDataItemPI23="4727"
	orgDEVDataItemPI24="4728";orgDEVDataModule1="4729";orgDEVDataModule2="4730";orgDEVDataModule3="4731";orgDEVDataModule4="4732";orgDEVDataModule5="4733";orgDEVDataModule6="4734";orgDEVDataModule7="4735"
	orgDEVDataModule8="4736"
	}

	//TEST
	else if ((testEnvironmentValue == "SIT")||(testEnvironmentValue == "Test")||(testEnvironmentValue == "TEST")) {
	orgSITAllSections="2815";orgSITDataItemPI01="2783";orgSITDataItemPI02="2784";orgSITDataItemPI03="2785";orgSITDataItemPI04="2786";orgSITDataItemPI05="2787";orgSITDataItemPI06="2788";orgSITDataItemPI07="2789"
	orgSITDataItemPI08="2790";orgSITDataItemPI09="2791";orgSITDataItemPI10="2792";orgSITDataItemPI11="2793";orgSITDataItemPI12="2794";orgSITDataItemPI13="2795";orgSITDataItemPI14="2796";orgSITDataItemPI15="2797"
	orgSITDataItemPI16="2798";orgSITDataItemPI17="2799";orgSITDataItemPI18="2800";orgSITDataItemPI19="2801";orgSITDataItemPI20="2802";orgSITDataItemPI21="2803";orgSITDataItemPI22="2804";orgSITDataItemPI23="2805"
	orgSITDataItemPI24="2806";orgSITDataModule1="2807";orgSITDataModule2="2808";orgSITDataModule3="2809";orgSITDataModule4="2810";orgSITDataModule5="2811";orgSITDataModule6="2812";orgSITDataModule7="2813"
	orgSITDataModule8="2815"}
   }
}</script></con:config></con:testStep><con:testStep type="groovy" name="SystemRelated" id="e22780f9-4b42-4a8c-bbd7-6d6d659193a1"><con:settings/><con:config><script>/*
Class consisting of random data for the Health Data Portal
*/
context.setProperty("SystemRelated", new SystemRelated());
class SystemRelated {
			
	/*
 	* 
 	*  Useful stuff to know/use when looking for system information (such as to where to get/store stuff, stuff to log, etc)
 	*/

	// user name
	String username = System.getProperty("user.name")
	//context.testCase.testSuite.project.setPropertyValue ("user", username)

	// user home location
	String userHomeFolder = System.getProperty("user.home")
	//context.testCase.testSuite.project.setPropertyValue ("userHome", userHomeFolder)


	// java class path (useful if needing to debug whether required classes/methods are loaded)
	String javaClassPath = System.getProperty("java.class.path")
	//context.testCase.testSuite.project.setPropertyValue ("javaClassPath", javaClassPath)

	// host name (should be an easier way)
	String hostname = InetAddress.getLocalHost().getHostName()

	//context.testCase.testSuite.project.setPropertyValue ("hostname", hostname)


	def today = new Date();def yesterday = today - 1;	def tomorrow = today + 1; 
	def lastMonth = today - 30; def lastQuarter = today - 90
	String tomorrowsDate = tomorrow.format("yyyy-MM-dd")
	String yesterdaysDate = yesterday.format("yyyy-MM-dd")
	String todaysDate = today.format("yyyy-MM-dd")
	String lastMonthsDate = lastMonth.format("yyyy-MM-dd")
	String lastQuartersDate = lastQuarter.format("yyyy-MM-dd")
	String dateTime1 = new java.text.SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.99999999+10:30").format(new Date())
	String dateTime2 = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())
	String dateTime3 = new java.text.SimpleDateFormat("yyyyMMddHHmmsss").format(new Date())
	String dateTime4 = new java.text.SimpleDateFormat("yyyy-MM-dd").format(new Date())

	
	/*
	log.info System.getProperty("user.name")
	log.info System.getProperty("user.dir")
	log.info System.getProperty("user.home")
	log.info System.getProperty("os.arch")
	log.info System.getProperty("os.name")
	log.info System.getProperty("os.version")
	log.info System.getProperty("path.separator")
	log.info System.getProperty("file.separator")
	log.info System.getProperty("java.class.path")
	log.info System.getProperty("java.home")
	log.info System.getProperty("java.vendor")
	log.info System.getProperty("java.vendor.url")
	log.info System.getProperty("java.version")
	

	Full list of Java System Properties
	
	Key	Meaning
	"file.separator"	Character that separates components of a file path. This is "/" on UNIX and "\" on Windows.
	"java.class.path"	Path used to find directories and JAR archives containing class files. Elements of the class path are separated by a platform-specific character specified in the path.separator property.
	"java.home"	Installation directory for Java Runtime Environment (JRE)
	"java.vendor"	JRE vendor name
	"java.vendor.url"	JRE vendor URL
	"java.version"	JRE version number
	"line.separator"	Sequence used by operating system to separate lines in text files
	"os.arch"	Operating system architecture
	"os.name"	Operating system name
	"os.version"	Operating system version
	"path.separator"	Path separator character used in java.class.path
	"user.dir"	User working directory
	"user.home"	User home directory
	"user.name"	User account name
	*/
	
}	

</script></con:config></con:testStep><con:testStep type="groovy" name="Security" id="e7dc1ae7-b976-4b9f-852c-bb60c89b151e"><con:settings/><con:config><script>/*
Class consisting of security related functionsortal
*/

import javax.crypto.spec.SecretKeySpec
import javax.crypto.Cipher

context.setProperty("Security", new Security());

class Security {
	
	//Use this method for unit testing
	def String classMethodCheck() {return "Reading the Security Class and Method correctly"} 


	// Password Encryption
	/*def encrypt_decrypt(password)
		{
    		enc_str = "h213j2kh3kj213h41k"
		def list = [password.toString(), enc_str]
		String result = list.join(",")
		
    		
    		def x = join([chr(ord(a) ^ ord(b)) for a,b
    		//return "".join([chr(ord(a) ^ ord(b)) for a,b
                        in zip(password,enc_str)])

		}*/

	public static String encoder(String clearText) throws Exception{

		def encode

		try {encode = clearText.bytes.encodeBase64().toString()} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e);
		}
		return encode;
	}


	public static String decoder(String encodedText) throws Exception{

		def decode

		try {
			byte [] y = encodedText.decodeBase64()
			decode = new String (y)
			} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e);
		}
		return decode;
	}

	
	public static String encrypt(String strClearText,String strKey) throws Exception{
		String strData="";
	
		try {
			SecretKeySpec skeyspec=new SecretKeySpec(strKey.getBytes(),"Blowfish");
			Cipher cipher=Cipher.getInstance("Blowfish");
			cipher.init(Cipher.ENCRYPT_MODE, skeyspec);
			byte[] encrypted=cipher.doFinal(strClearText.getBytes());
			encrypted=cipher.doFinal(strClearText.getBytes());
			strData=new String(encrypted);
		
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e);
		}
		return strData;
	}



	public static String decrypt(String strEncrypted,String strKey) throws Exception{
		String strData="";
	
		try {
			SecretKeySpec skeyspec=new SecretKeySpec(strKey.getBytes(),"Sausages");
			Cipher cipher=Cipher.getInstance("Blowfish");
			cipher.init(Cipher.DECRYPT_MODE, skeyspec);
			byte[] decrypted=cipher.doFinal(strEncrypted.getBytes());
			strData=new String(decrypted);
		
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e);
		}
	
		return strData;
	}

	}

/*
CALL TESTS (RUN IN SEPARATE GROOVY STEP)
core = context.testCase.testSuite.project //or using context (ok for this case because the methods are under the same project)
//core = testRunner.testCase.testSuite.project.workspace.getProjectByName("Concepts")
scripts = core.testSuites["Library"]
scripts.testCases["health-data"].testSteps["HealthData"].run(testRunner, context)
log.info context.abnGen
log.info context.classMethodCheck

 
 */

  
</script></con:config></con:testStep><con:testStep type="groovy" name="UNIT TESTING for Class and Method Calls" id="186bb648-0df3-4d33-b9cc-e8db6e66528b"><con:settings/><con:config><script>core = context.testCase.testSuite.project //or using context (ok for this case because the methods are under the same project)
scripts = core.testSuites["HowTo"]

// USE THIS LOGIC IF THE LIBRARY IS ON A DIFFERENT PROJECT (propCore) and SUITE (propScript)
	/*
	def core = testRunner.testCase.testSuite.getPropertyValue("propCore"); 
	core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
	
	def script = testRunner.testCase.testSuite.getPropertyValue("propScript"); 
	scripts = core.testSuites["${script}"] ; 
	scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)
	*/


/*
 * HealthData
 */

 /*
scripts.testCases["automation-v1"].testSteps["HealthData"].run(testRunner, context)
	//log.info context.HealthData.abnGen()
	//log.info context.HealthData.abn
	log.info context.HealthData.classMethodCheck()
	log.info context.HealthData.hardCodedDataPortalData()
	//log.info context.HealthData.dataPortalHCD["password"]
	def temp = context.HealthData.dataPortalHCD["password"]
	log.info temp
	log.info context.HealthData.assetData()
	log.info context.HealthData.dataAssetData["assetTitle"]
	log.info context.HealthData.dataAssetData["assetDescription"]
*/

/*
 * ManageSoapUIProperties - save to SoapUI properties or get from SoapUI properties into a property map
 */

 /*
scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)
context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, context.HealthData.dataPortalHCD)
	def tempMap = [:]
	context.ManageSoapUIProperties.getMyProperties(testRunner.testCase, tempMap)
	log.info tempMap["password"]

	scripts.testCases["automation-v1"].testSteps["HardCodedDataEnvironmentSwitching"].run(testRunner, context)
	log.info context.ManageSoapUIProperties.testEnvironment(DEV).orgSITAllSections
*/
	
/*
 * Security
 */
scripts.testCases["LibaryCalls"].testSteps["SystemRelated"].run(testRunner, context)
	//log.info context.Security.classMethodCheck()


/*
def x = context.Security.encrypt("michaeld","AAAAAAAA")
String y = context.Security.decrypt(x,"AAAAAAAA")
log.info x
log.info y
*/

/*

def x = "michael.derobertis@health.gov.au:He@lth2018"
def encodedValue = context.Security.encoder(x)
log.info encodedValue

def decodedValue = context.Security.decoder(encodedValue)
log.info decodedValue

*/

// not working
/*
context.ManageSoapUIProperties.readPropertiesFileToMap('fileProps','C:\\Temp\\testfiles\\test.properties')
log.info fileProps["Username"]
*/

/*
 *  ManageSoapUIProperties Read properties into SoapUI Properties
 */
//context.ManageSoapUIProperties.readPropertiesFile(testRunner.testCase,'C:\\Temp\\testfiles\\test.properties')
//context.ManageSoapUIProperties.exportTestCaseProperties(context,'C:\\Temp\\testCase1.properties')
//context.ManageSoapUIProperties.exportTestSuiteProperties(context,'C:\\Temp\\testSuite1.properties')


/*
 * ManageTestCaseSteps - turn all test case steps on/off 
 */

 /*
scripts.testCases["automation-v1"].testSteps["ManageTestCaseSteps"].run(testRunner, context)
	//context.ManageTestCaseSteps.disableAllSteps(context.testCase)
	//context.ManageTestCaseSteps.enableAllSteps(context.testCase)
*/


/*
 * BioGenerator - generate random bio data 
 */


scripts.testCases["automation-v1"].testSteps["BioGenerator"].run(testRunner, context)
	log.info "Random Name is " + context.BioGenerator.firstName + " " + context.BioGenerator.lastName


/*
 * SystemRelated 
 */


scripts.testCases["automation-v1"].testSteps["SystemRelated"].run(testRunner, context)
log.info context.SystemRelated.username
log.info context.SystemRelated.hostname

/*
 * GUI - not working
 */
//scripts.testCases["automation-v1"].testSteps["Gui"].run(testRunner, context)
//context.Gui.gui.show()



</script></con:config></con:testStep><con:testStep type="request" name="SoapStep" id="eff01084-f545-4859-8775-737c3014faff"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MDRDataServiceSoap12</con:interface><con:operation>SubmitDummyData</con:operation><con:request name="SoapStep" id="627ddad1-098d-4476-8e6b-8102d4d0b8e7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:591/</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:imp="http://improve.org.au/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <imp:SubmitDummyData/>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="7476b51e-e138-4ef2-a775-b280f386d243" disabled="true"/><con:assertion type="Simple Contains" id="2706f47a-3454-45b5-90b7-640e3883442b" name="Contains"><con:configuration><token>happyDays1</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="brossTest play jar application" id="f97ec222-d8e6-4f8b-99f2-22f8709cfc11"><con:settings/><con:config><script>import com.techtest.projects.brossTest.runners.*;
MyTests mytests = new MyTests();

</script></con:config></con:testStep><con:testStep type="jdbc" name="JDBC Request" id="8110f5f1-74be-4519-b273-0091036102a9"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="soapui_gurutester jar application" id="5e7bd7c7-2bf5-4209-90fc-97629fe90afe"><con:settings/><con:config><script>/*
import com.gurutester.HealthData  
import com.gurutester.BioData  
import com.gurutester.PropertiesUtil  
import com.gurutester.Security
import com.gurutester.SystemRelated
*/
import com.gurutester.*;



HealthData hd = new HealthData();
BioData bd = new BioData();
PropertiesUtil props = new PropertiesUtil();
Security s = new Security();
SystemRelated sr = new SystemRelated();
DatabaseUtilities db = new DatabaseUtilities();
//**********************************
// using health data and bio data
//**********************************
	//firstName = bd.firstName; lastName = bd.lastName; 
	//emailAddress = hd.emailAddress
	//log.info firstName + " " + lastName + " " + emailAddress

//**********************************
// using properties util remove property (add the property "deleteMe" before running)
//**********************************
	//props.removeProperty(testRunner.testCase, "deleteMe")


//**********************************
// using getMyProperties to a HashMap
//**********************************
	//HashMap x = new HashMap () // or def x=[:]
	//x = props.getMyProperties(testRunner.testCase)
	//log.info "USING getMyProperties: ${x.get('AbnAttribute')}" // or log.info x["AbnAttribute"]

	/*
	HashMap y = new HashMap();
	props.getMyPropertiesWIP(testRunner.testCase, y)
	log.info "USING getMyPropertiesWIP: ${y.get('AbnAttribute')}"
	log.info "${props.getMyPropertiesWIP(testRunner.testCase, y)}"
	log.info y["AbnAttribute"]
	*/


//********************
// using saveProperty
//*********************
	//props.saveProperty("MDR1","Test",testRunner.testCase);

//************************************
// using saveProperties from a HashMap
//************************************
	/*
	def mymap = [:]
	mymap["val1"] = "some value 1"
	mymap["val2"] = "some value 2"
	props.saveToProperties(testRunner.testCase,mymap)
	*/

//************************************
// using Security
//************************************
	/*
	encoder = (s.encoder("Michael")).toString()
	log.info encoder
	decoder = s.decoder(encoder)
	log.info decoder

	encryptOutput = (s.encrypt("michaeld", "AAAAAA")).toString()
	log.info encryptOutput
	decrypt = s.decrypt(encryptOutput,"AAAAAA")
	log.info decrypt
	*/
//************************************
// using SystemRelated
//************************************
	/*
	sr.hostname
	yesterday = sr.addDay(-1)
	today = sr.addDay(0)
	tomorrow = sr.addDay(1)
	nextMonth = sr.addDay(30)
	nextquarter = sr.addDay(90)
	log.info nextquarter
	*/
//************************************
// enable / disable steps
//************************************
	//props.enableAllSteps(testRunner.testCase)
	//props.disableAllSteps(testRunner.testCase)

//************************************
// remove all properties
//************************************
	//props.removeProperties(testRunner.testCase)

//************************
// read from Properties file
//************************
//props.readPropertiesFile("C:\\Temp\\test.properties", testRunner.testCase)
//props.readPropertiesFile("U:\\Documents\\soapui\\projects\\hprg\\bin\\hprg_TEST.properties", testRunner.testCase)
//props.readFile("U:\\Documents\\soapui\\projects\\hprg\\bin\\hprg_TEST.properties", testRunner.testCase)

/*
def x=[:]
Properties properties = new Properties();
File propsFile = new File("C:\\Temp\\test.properties");
FileInputStream fileInputStream = new FileInputStream(propsFile); 
properties.load(fileInputStream); 
fileInputStream.close();

for (String key : properties.stringPropertyNames()) {
    String value = properties.getProperty(key);
    testRunner.testCase.testSuite.setPropertyValue(key,value)    
}
*/

//************************
// DB Stuff
//************************
 //x = db.dbTestProperties("gui", "SIT", "dataportal", "oracle");
 //x = db.dbTestProperties("database", "DEV", "dataportal", "mysql");
//String schema = "caf" //works

/* METHOD WORKS
context.testCase.setPropertyValue("schema","testingservices")
String schema = context.testCase.getPropertyValue("schema")
*/

testProps = db.getDbTestProperties("database", "SIT", "dataportal", "caf");
        if (testProps.next()){
           log.info "${(testProps.getString(2))}";
           log.info "${(testProps.getString("PROPSTRATEGY"))}";}


testInput = db.getDbTestCaseData("a_derobm", "dataportal", "caf", "data", 1);
        if (testInput.next()){
            log.info "${(testInput.getString("TESTID"))}"
             log.info "${(testInput.getRow())}"
        }


			//logging
	//		setSuite["strategyLogger"] = setSuite["strategyLogger"] + ". Test Case ${testInput.getString(1)} read in."

			



/* Dont use this one
y = db.runQuery();
if (y.next()){ 	
	log.info "${(y.getString("PROPSTRATEGY"))}";
	log.info "${y.getString(2)}";
	}
*/

//*********************
// LOG FILE
//********************
props.logResults(testRunner.testCase, "c:\\Temp", "test01", "TEST");</script></con:config></con:testStep><con:properties><con:property><con:name>A</con:name><con:value>1</con:value></con:property><con:property><con:name>D</con:name><con:value>asjdio jsadio joiasd</con:value></con:property><con:property><con:name>C</con:name><con:value/></con:property><con:property><con:name>B</con:name><con:value>2</con:value></con:property><con:property><con:name>propDBAutoUser</con:name><con:value>test</con:value></con:property><con:property><con:name>zzpropDBAutoUser</con:name><con:value>caf_automation</con:value></con:property><con:property><con:name>propDriver</con:name><con:value>com.mysql.jdbc.Driver</con:value></con:property><con:property><con:name>zzpropDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>propCsv1</con:name><con:value>u:\Documents\soapui\projects\hprg\data\buildVerification.csv</con:value></con:property><con:property><con:name>zzpropDBAutoPwd</con:name><con:value>cafautomation</con:value></con:property><con:property><con:name>propStrategy</con:name><con:value>gui</con:value></con:property><con:property><con:name>zzpropSchema</con:name><con:value>CAF</con:value></con:property><con:property><con:name>propSchema</con:name><con:value>testingservices</con:value></con:property><con:property><con:name>propDBInTest</con:name><con:value>notusedcurrently</con:value></con:property><con:property><con:name>propDBAutoPwd</con:name><con:value>password</con:value></con:property><con:property><con:name>zzpropDBConnection</con:name><con:value>jdbc:oracle:thin:@clodbd06:1521:tst12c04</con:value></con:property><con:property><con:name>propDBConnection</con:name><con:value>jdbc:mysql://10.11.21.128:3306/testingservices</con:value></con:property><con:property><con:name>schema</con:name><con:value>testingservices</con:value></con:property></con:properties></con:testCase><con:testCase id="fd0114ae-ddec-46c9-8631-bbe0e962e0ad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Classes and Methods" searchProperties="true"><con:settings/><con:testStep type="groovy" name="removing properties" id="337dbbc5-412a-44fb-a6e2-ced443981357"><con:settings/><con:config><script>value = testRunner.testCase.getPropertyAt(0).value
name = testRunner.testCase.getPropertyAt(0).name
//log.info name + " " + value

List propertyList = testRunner.testCase.getPropertyList().name
Iterator it = propertyList.iterator()
//log.info propertyList
testRunner.testCase.removeProperty(it.next().toString())
while ( it.hasNext()) {
	log.info "USING it.next: " + it.next().toString()
	testRunner.testCase.removeProperty(it.next().toString())
	}


String[] propToRemove = new String[testSuite.getPropertyCount()];
propToRemove = testSuite.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    testSuite.removeProperty( propToRemove[i] );
	}
</script></con:config></con:testStep><con:testStep type="groovy" name="bioGenerator" id="e69278bd-e92b-4de7-bd6a-c4f0e8d0ea9c"><con:settings/><con:config><script>/*
 * Class which contains random bio data
 */

//import java.util.Random
import org.apache.commons.lang.RandomStringUtils
context.setProperty("bioGenerator", new bioGenerator())

class bioGenerator {
	Random random = new Random()
	
	// random name generator (increase syllable lists to increase randomness)	
	def beginning = ["Kr", "Ca", "Ra", "Mi", "Le", "Jen", "Fran", "And", "Ant", "Br", "Cr"]
	def middle = ["ich", "eren", "ani", "ieo", "aen", "ion", "end", "ath", "ess", "oon", "ere", "ert", "erg", "iow"]
	def ending = ["iel", "ten", "athon", "tis", "nco", "wis", "uel", "ini", "erd", "rnt", "anon", "wer", "rto"]
	def beg = random.nextInt(beginning.size())
	def mid = random.nextInt(middle.size())
	def end = random.nextInt(ending.size())
	def firstName = (beginning.toSet() as List)[beg] + (middle.toSet() as List)[mid] + (ending.toSet() as List)[end]
	def begg = random.nextInt(beginning.size())
	def midd = random.nextInt(middle.size())
	def endd = random.nextInt(ending.size())
	def lastName = (beginning.toSet() as List)[begg] + (middle.toSet() as List)[midd] + (ending.toSet() as List)[endd]

	// add more stuff here (eg gender, date of birth, identifiers, as per whatever the need)

}


/*
EXAMPLE GROOVY WHICH CALLS AND RUNS THE ABOVE
// Get the Classes/methods (eg below is on a per class/method (rather than to step through and load all under module-name)
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("Concepts")
scripts = core.testSuites["Library"]
scripts.testCases["module-name"].testSteps["bioGenerator"].run(testRunner, context)


// Call the required output (eg FirstName and LastName)
log.info "Random Name is " + context.bioGenerator.firstName + " " + context.bioGenerator.lastName

testRunner.testCase.testSuite.project.setPropertyValue("FirstName", firstName)
testRunner.testCase.testSuite.project.setPropertyValue("GivenName", lastName)

 
 */</script></con:config></con:testStep><con:testStep type="groovy" name="getMyProperties" id="3cb1fcd8-73c7-49d3-92da-8478697a41ea"><con:settings/><con:config><script>// Function to get SoapUI properties and store in Property Map


def getMyProperties = {propertyLocation, mapToCreate
	->
	for (prop in propertyLocation.getPropertyList()){
		propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
		mapToCreate[prop.getName()] = propertyMapValue
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="manageSoapUIProperties" id="2bf431f5-b63c-4257-88ff-bba672158f6e"><con:settings/><con:config><script>/*
 * Class which contains methods to get and save soapui properties to/from property maps
 */

import org.apache.commons.lang.RandomStringUtils
context.setProperty("manageSoapUIProperties", new manageSoapUIProperties())

class manageSoapUIProperties {
	def propertyMapValue
	
	//get soapui properties and save to a property map
	def getMyProperties = {propertyLocation, mapToCreate
		->
		for (prop in propertyLocation.getPropertyList()) {
			propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
			mapToCreate[prop.getName()] = propertyMapValue}
	}

	//save soapui properties to a specified property map
	def saveToProperties = {propertyLocation, mapToSave
		->
		mapToSave.each {propertyName,	propertyValue
			->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }
		
	}

		
}


</script></con:config></con:testStep><con:testStep type="groovy" name="manageTestCaseSteps" id="37f2b127-af32-4827-93e4-54d21e4a3e17"><con:settings/><con:config><script>/*
 * Class which contains methods to enable and disable test case steps
 */

import org.apache.commons.lang.RandomStringUtils
context.setProperty("manageTestCaseSteps", new manageTestCaseSteps())

class manageTestCaseSteps {
	def disableSteps = 	{testCaseInContext
		
		testCaseInContext.testSuite.getTestCaseList().each
		{
    
    		it.testStepList.each 
    			{
         		if( it.disabled) { it.disabled = false } //if already disabled ignore
         		it.setDisabled(true) // disable the steps not already disabled
        
            	}
    
		}

		
	}

	def enableSteps = {testCaseInContext
		
		testCaseInContext.testSuite.getTestCaseList().each
		{
    
    		it.testStepList.each 
    			{
         		if( it.disabled) { it.setDisabled(false)}
    			}

		}
	}

		
}



</script></con:config></con:testStep><con:testStep type="groovy" name="saveToProperties" id="d9a3239c-2426-4734-a88d-93314863899a"><con:settings/><con:config><script>
// Function to save to SoapUI properties from a Property Map

def saveToProperties = {propertyLocation, mapToSave
	->
	mapToSave.each {
		propertyName,
		propertyValue
		
		->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }
		
}</script></con:config></con:testStep><con:testStep type="groovy" name="encoder and decoder" id="ea1e9cbb-abf1-444d-8e7c-d840db064026"><con:settings/><con:config><script>//Encoder and Decoder


public static String encoder(String clearText) throws Exception{

	def encode

	try {encode = clearText.bytes.encodeBase64().toString()} catch (Exception e) {
		e.printStackTrace();
		throw new Exception(e);
	}
	return encode;
}


public static String decoder(String encodedText) throws Exception{

	def decode

	try {
		byte [] y = encodedText.decodeBase64()
		decode = new String (y)
		} catch (Exception e) {
		e.printStackTrace();
		throw new Exception(e);
	}
	return decode;
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="98f6f5cf-3dc0-4c8b-90e3-e84a7f1c950c" name="Miscellaneous"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="3f8a0d21-4902-43c8-be6d-be7101b464ab" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Manipulate strings" searchProperties="true"><con:settings/><con:testStep type="groovy" name="remove first and last characters" id="84daa3bf-6c83-475d-9009-0686a6bfcf85"><con:settings/><con:config><script>// Had to play to remove square brackets
x = x.getAt(1..x.length() - 1); x = x.substring(0, x.length() - 1)
y = y.getAt(1..y.length() - 1); y = y.substring(0, y.length() - 1)

</script></con:config></con:testStep><con:testStep type="groovy" name="split trim substring" id="a5d9d388-c650-4c3b-8085-1925a0078050"><con:settings/><con:config><script>String someString = "ffffffffffffff,fffffeeeeeeeee,eeeeeeeeeeey,fyyyyyyyyyyyyyyyyyyyyyyyyy"
String[] myString = someString.split(",")
stringTrim = myString[1].trim(); 
subStr = stringTrim.substring(1,10)
log.info subStr
//cdata = cdata.substring(3,12)
		
		
		/*
		usersim23Login = parts23[1].trim(); usersim23GUID = parts23[4].trim()		
		usersim25 = testRunner.testCase.testSuite.getPropertyValue("usersim25")
		String[] parts25 = usersim25.split(":");usersim25Login = parts25[1].trim()		
		testRunner.testCase.setPropertyValue("usersimSubmissionUploader", usersim23Login)
		testRunner.testCase.setPropertyValue("usersimGroupName", usersim23GpName)
		testRunner.testCase.setPropertyValue("usersimSuperUser", usersim25Login)
		testRunner.testCase.setPropertyValue("usersimGuid", usersim23GUID)		
		*/</script></con:config></con:testStep><con:testStep type="groovy" name="comma separation" id="1e1305da-d5d2-4f6d-829f-246e337a3d0f"><con:settings/><con:config><script>//Comma separate a string into an array and then return the first position (at position 0)


item = "62755495047,62 755 495 047,0000000001,Active,active,PETAL AND CRUMB ,Current,7 ,Business Name,,3104 VIC ,VIC ,3104 ,97"
x = (item.split(",")[0]).toString()  

log.info x  // will display “62755495047”
</script></con:config></con:testStep><con:testStep type="groovy" name="store comma separated string as an array" id="e9c002ff-da80-47bc-8b5e-25a231ff2b19"><con:settings/><con:config><script>// store elements in string arrays to cover multiple rows of data
status = '123, abc, $%^'
String[] statusList = status.split(", ")
log.info statusList[0]
log.info statusList[1]
log.info statusList[2]</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f9a9b971-a930-49fa-b865-8b6cb005eec8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Looping and related" searchProperties="true"><con:settings/><con:testStep type="groovy" name="file columns loop" id="d7c839c4-5900-48bf-b859-fa1aae720af6"><con:settings/><con:config><script>	def test=[:]


	// EG to Get the Row counts
	def testCounter = (testRunner.testCase.getPropertyValue("testCounter")).toInteger();def nextTestCounter = (testRunner.testCase.getPropertyValue("nextTestCounter")).toInteger()

	// EG to read the csv file, csv lines, and store the row
	def f = new File (csvLocation); 
	List r = f.readLines(); 
	String[] testInput = r[testCounter].split(',')

	// EG to loop up to the column length and do something 	
	for (int j = 0; j &lt; testInput.length; j++){
	test["test${j}"] = testInput[j]}

	context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, test)
	def currentTest = "ID: " + test["test0"] + " " + test["test1"] + test["test2"] 
	testRunner.testCase.setPropertyValue("002_read", currentTest + " has been loaded")
</script></con:config></con:testStep><con:testStep type="groovy" name="file rows loop" id="e3ec05d8-759f-4072-9e94-d839a374e978"><con:settings/><con:config><script>	// read the csv file and count rows to determine scope/quantities
	def f = new File (csvLocation);List r = f.readLines();rows = r.size.toInteger()

	
	// EG to loop up to the column length and do something 	
	for (int j = 0; j &lt; rows; j++){
	// do stuff with j
	test["test${j}"] = testInput[j]}

</script></con:config></con:testStep><con:testStep type="groovy" name="count repeating xml elements" id="2c29a354-0a4f-4a0c-81a8-ed5a3e7fbf32"><con:settings/><con:config><script>// eg for teradata jdbc step with this query: 
/*
select columnname from dbc.columns
where tablename = 'EPSD_T'
and databasename = 'EDW_DEV_ODS_IMMN_DB'
*/

x = context.expand( '${Teradata#ResponseAsXml#//ResultSet}' )
x = x.count('COLUMNS.COLUMNNAME') as Integer
</script></con:config></con:testStep><con:testStep type="groovy" name="loops for project suite and test case counts" id="a0fbe3a8-fa71-4574-94cd-fc75bba8d41e"><con:settings/><con:config><script>def project = context.testCase.testSuite.project;
def myTestCase = context.testCase 
def myTestSuite = context.testCase.testSuite

//log.info myTestCase.name
//log.info myTestSuite.name
//log.info "no of test suites " + project.getTestSuiteCount()
//log.info "no of test cases " + myTestSuite.getTestCaseCount()
//log.info "no of test steps " + myTestCase.getTestStepCount()

/*
def testSuite, testCaseCount, sum=0
for (int i = 0; i &lt; project.getTestSuiteCount(); i++)
{
testSuite = project.getTestSuiteAt(i)
testCaseCount = testSuite.getTestCaseCount();
//sum = sum + testCaseCount
log.info testSuite.getTestCaseAt(testCaseCount-1).name

}

//log.info sum
*/

// LOOP THE CURRENT TEST SUITE AND LOOK FOR A SPECIFIC TEST CASE
/*
for (int i = 0; i &lt; myTestSuite.getTestCaseCount(); i++)
{
if (myTestSuite.getTestCaseAt(i).name == 'automation-v1'){ assert True} //else {log.info "no match"}
//log.info myTestSuite.getTestCaseAt(i).name
}
*/
def found
for (int x = 0; x &lt; context.testCase.testSuite.project.getTestSuiteCount(); x++)
{
	testSuite = project.getTestSuiteAt(x)
	for (int i = 0; i &lt; testSuite.getTestCaseCount(); i++)
	{
	
	if (testSuite.getTestCaseAt(i).name == 'automation-v1')
	{ found=="true"; log.info "found"} else {fount =="false"; log.info "no match"}

	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="for loop" id="17890075-8843-4d18-bc71-674272888518"><con:settings/><con:config><script>for (i = 0; i &lt;6; i++) {
log.info i
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ab03da48-c479-4059-9bf9-de592d4ea31b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Logging" searchProperties="true"><con:settings/><con:testStep type="groovy" name="log(Asset)" id="2fef0029-f806-4d00-9ff9-0b8f7118b142"><con:settings/><con:config><script><![CDATA[/*
 *  Log Script
 *  Author : Michael De Robertis 
 *  05/11/2018	refactoring		
 */

import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)
import com.gurutester.*;  

//*************************************
// Get the Library and required Classes
//*************************************
	PropertiesUtil props = new PropertiesUtil();

//*************************************
// Setup properties for logging
//*************************************
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase()
	def strSoapTestCase = objCase.name; def strLogGlobal = ''; strLogProject = ''; strLogCase = ''; strLogStep = ''
	def testConditions = [:]; 
	testConditions = props.getMyProperties(testRunner.testCase)
	def testDataLog = [:]; 
	testDataLog = props.getMyProperties(testRunner.testCase.testSuite)
	
	def projectLocation = testRunner.testCase.testSuite.project.getPropertyValue("projectLocation")
	def strPath = "${projectLocation}\\log\\${testConditions["dateTime2"]}\\${testConditions["propEnvironment"]}\\"
	def strLogProps = "PROPERTIES_${strSoapTestCase}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"].substring(0,8)}.txt"
	def testSuite = context.expand((testRunner.testCase.testSuite).name)
	intLog = 1 // move to properties file in future, 1 = request/responses only, 2 = all, need a 0 option

//*******************************************************
// Generate Request and Responses and Properties file
//*******************************************************

// Loop through steps and log when the step has been enabled
	def step = objCase.getTestStepList()
	step = objCase.getTestStepList()
        step.each {
        	if (!it.disabled){
                if ((it instanceof WsdlRunTestCaseTestStep) || (it instanceof WsdlPropertiesTestStep)){
        
                    // Requires intLog = 2
                    if (intLog != 1){
                        //Properties
                        def prop = it.getPropertyList()
                        //loop through the list of testStep properties and log as required
                        prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
                        new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -TestCase  +  TestStep]:,${strLogCase}${strLogStep}")}
                } 
                if (it instanceof WsdlTestRequestStep){

                    //Get Request (will be xml if not jms)
                    if (it.getTestRequest().getRequestContent().substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"}
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.${strExt}")
                        .append(context.expand(it.getTestRequest().getRequestContent()))
                    
                    //Get Response if exists (will always be xml)
                    if (it.getTestRequest().getResponseContent() != null){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //SOAP Endpoint and Assertion
                    if (intLog != 1){ 
                         new File("${strPath}").mkdirs();new File("${testConditions["propWorkingFolder"]}\\log\\","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -Endpoint + Assertions]:,StepName=${it.name},Endpoint=${context.expand(it.getTestRequest().getEndpoint())},SOAPAssertion=${context.expand(objProject.getPropertyValue("svSoapAssertion"))}")
                    }
                } 

                else if (it instanceof JdbcRequestTestStep){ //OS... add "|| (it instanceof ProJdbcRequestTestStep)" for PRO 
                    //Request
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.sql")
                        .append(context.expand(it.getQuery().replaceAll(/\n/,'\r\n')))
                    //Response
                    if (it.getResponseContent().contains("<Row>")){ 
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //JDBC Connection String and  Assertion
                    if (intLog != 1){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -ConnStr  + Assertions]:,StepName=${it.name},ConnectionString=${context.expand(it.getConnectionString().replaceAll('/.+@/','/PASS_VALUE@/'))},JDBCAssertion=${context.expand(objProject.getPropertyValue("dbJdbcAssertion"))}")

                    }
                }

            }
        }

//******************************
// Generate the Results Log
//******************************
	def propsFile = "Results-${testSuite}-${testConditions["systemUser"]}-${testConditions["systemHost"]}-${testConditions["dateTime2"]}.csv" //csv properties file
	new File("${projectLocation}\\log\\","${propsFile}").append('\r\n' + "Time:${testConditions["dateTime1"]}, ${strSoapTestCase}${testConditions["testCounter"]}, ${testConditions["TestID"]}, ${testConditions["TestObjective"]}, ${testDataLog}")
log.info "AssetSimulator-log"	]]></script></con:config></con:testStep><con:testStep type="groovy" name="log(User)" id="dc1b3777-265a-46f8-b25f-ef168deb685c"><con:settings/><con:config><script><![CDATA[/*
 *  Log Script
 *  Author : Michael De Robertis 
 *  05/11/2018	refactoring		
 */

import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)
import com.gurutester.*;  

//*************************************
// Get the Library and required Classes
//*************************************
	PropertiesUtil props = new PropertiesUtil();

//*************************************
// Setup properties for logging
//*************************************
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase()
	def strSoapTestCase = objCase.name; def strLogGlobal = ''; strLogProject = ''; strLogCase = ''; strLogStep = ''
	def testConditions = [:]; 
	testConditions = props.getMyProperties(testRunner.testCase)
	def testDataLog = [:]; 
	testDataLog = props.getMyProperties(testRunner.testCase.testSuite)
	
	def projectLocation = testRunner.testCase.testSuite.project.getPropertyValue("projectLocation")
	def strPath = "${projectLocation}\\log\\${testConditions["dateTime2"]}\\${testConditions["propEnvironment"]}\\"
	def strLogProps = "PROPERTIES_${strSoapTestCase}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"].substring(0,8)}.txt"
	def testSuite = context.expand((testRunner.testCase.testSuite).name)
	intLog = 1 // move to properties file in future, 1 = request/responses only, 2 = all, need a 0 option

//*******************************************************
// Generate Request and Responses and Properties file
//*******************************************************

// Loop through steps and log when the step has been enabled
	def step = objCase.getTestStepList()
	step = objCase.getTestStepList()
        step.each {
        	if (!it.disabled){
                if ((it instanceof WsdlRunTestCaseTestStep) || (it instanceof WsdlPropertiesTestStep)){
        
                    // Requires intLog = 2
                    if (intLog != 1){
                        //Properties
                        def prop = it.getPropertyList()
                        //loop through the list of testStep properties and log as required
                        prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
                        new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -TestCase  +  TestStep]:,${strLogCase}${strLogStep}")}
                } 
                if (it instanceof WsdlTestRequestStep){

                    //Get Request (will be xml if not jms)
                    if (it.getTestRequest().getRequestContent().substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"}
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.${strExt}")
                        .append(context.expand(it.getTestRequest().getRequestContent()))
                    
                    //Get Response if exists (will always be xml)
                    if (it.getTestRequest().getResponseContent() != null){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //SOAP Endpoint and Assertion
                    if (intLog != 1){ 
                         new File("${strPath}").mkdirs();new File("${testConditions["propWorkingFolder"]}\\log\\","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -Endpoint + Assertions]:,StepName=${it.name},Endpoint=${context.expand(it.getTestRequest().getEndpoint())},SOAPAssertion=${context.expand(objProject.getPropertyValue("svSoapAssertion"))}")
                    }
                } 

                else if (it instanceof JdbcRequestTestStep){ //OS... add "|| (it instanceof ProJdbcRequestTestStep)" for PRO 
                    //Request
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.sql")
                        .append(context.expand(it.getQuery().replaceAll(/\n/,'\r\n')))
                    //Response
                    if (it.getResponseContent().contains("<Row>")){ 
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //JDBC Connection String and  Assertion
                    if (intLog != 1){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -ConnStr  + Assertions]:,StepName=${it.name},ConnectionString=${context.expand(it.getConnectionString().replaceAll('/.+@/','/PASS_VALUE@/'))},JDBCAssertion=${context.expand(objProject.getPropertyValue("dbJdbcAssertion"))}")

                    }
                }

            }
        }

//******************************
// Generate the Results Log
//******************************
	def propsFile = "Results-${testSuite}-${testConditions["systemUser"]}-${testConditions["systemHost"]}-${testConditions["dateTime2"]}.csv" //csv properties file
	new File("${projectLocation}\\log\\","${propsFile}").append('\r\n' + "Time:${testConditions["dateTime1"]}, ${strSoapTestCase}${testConditions["testCounter"]}, ${testConditions["TestID"]}, ${testConditions["TestObjective"]}, ${testDataLog}")
log.info "UserSimulator-log"	]]></script></con:config></con:testStep><con:testStep type="groovy" name="Setup a data sinc" id="087b5c13-a384-4bd2-9de4-ebc99e29a1bc"><con:settings/><con:config><script>// build a results sinc file based on specific properties defined

def objGlobal = com.eviware.soapui.SoapUI.globalProperties
def strDate = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())
def username = System.getProperty("user.name")
def userHomeFolder = System.getProperty("user.home")
def workingPath = "C:\\Temp\\testlog"
def hostname = InetAddress.getLocalHost().getHostName()

//define a path where the results sinc file will go
/*
 * Given that the path looks at the date, a new folder will 
 * 	be created daily
 */

def path = "${workingPath}\\${strDate}\\"
log.info path

def folder = new File("${path}")
	if (!folder.exists()) {
			folder.mkdirs()}
	
// define the sinc file and place it in the folder
/*
 *  Below is just an example using the properties we created above + some hard coded values
 */
def sinc = new File("${path}", "testResultsSinc.csv")
//eg before results 
sinc.append(context.expand("DATE, USERNAME, HOSTNAME, TESTRESULT\r\n"))
// hard coded egs
sinc.append(context.expand("20180607, mdr, my host, dummy test1\r\n"))
sinc.append(context.expand("20180606, mik, my other host, dummy test2\r\n"))
//eg after results available
sinc.append(context.expand("${strDate}, ${username}, ${hostname}, PASS\r\n"))  </script></con:config></con:testStep><con:testStep type="groovy" name="Copy of log(groovy)" id="c8899e3b-3570-4a71-8ec0-eaf78fd185b5"><con:settings/><con:config><script><![CDATA[/*
 *  Log Script
 *  Author : Michael De Robertis 
 *  21/05/2020 added REST response handling
 *  
 *  		
 *  				LOTS OF TO DOS TO CLEANUP AND ONLY REST PART IS RUNNING CORRECTLY		
 */

import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)
import com.gurutester.*;  
import java.text.SimpleDateFormat;
import java.util.Calendar;
//import java.net.UnknownHostException;
//import java.util.*;
import java.net.InetAddress;



    // user name
    String username = System.getProperty("user.name");

    // user home location
    String userHomeFolder = System.getProperty("user.home");

    // java class path (useful if needing to debug whether required classes/methods are loaded)
    String javaClassPath = System.getProperty("java.class.path");

    InetAddress localhostname = java.net.InetAddress.getLocalHost();
    String hostname = localhostname.getHostName();

//*************************************
// Local Methods and initial setup
//*************************************
	
	def getMyProperties = {propertyLocation, mapToCreate
		->
		for (prop in propertyLocation.getPropertyList()) {
			propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
			mapToCreate[prop.getName()] = propertyMapValue}
	}

    dateTime1 = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.99999999+10:30").format(new Date());
    dateTime2 = new SimpleDateFormat("yyyyMMdd").format(new Date());
    dateTime3 = new SimpleDateFormat("yyyyMMddHHmmsss").format(new Date());
    dateTime4 = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
    dateTime5 = new SimpleDateFormat("dd/MMM/yyyy").format(new Date());


//*************************************
// Setup properties for logging
//*************************************
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase()
	def strSoapTestCase = objCase.name; def strLogGlobal = ''; strLogProject = ''; strLogCase = ''; strLogStep = ''
	def testConditions = [:]; 
	getMyProperties(testRunner.testCase, testConditions)
	def testDataLog = [:]; 
	getMyProperties(testRunner.testCase.testSuite, testDataLog)
	
	//def projectLocation = testRunner.testCase.testSuite.project.getPropertyValue("projectLocation")
	def strPath = "${testConditions["projectLocation"]}\\log\\${dateTime2}\\${testConditions["projectEnvironment"]}\\"
	def strLogProps = "PROPERTIES_${strSoapTestCase}_someenv_someuser_somehost_somedate.txt"
	def testSuite = context.expand((testRunner.testCase.testSuite).name)
	intLog = 1 // move to properties file in future, 1 = request/responses only, 2 = all, need a 0 option

//*******************************************************
// Generate Request and Responses and Properties file
//*******************************************************

// Loop through steps and log when the step has been enabled
	def step = objCase.getTestStepList()
	step = objCase.getTestStepList()
        step.each {
        	if (!it.disabled){
                if ((it instanceof WsdlRunTestCaseTestStep) || (it instanceof WsdlPropertiesTestStep)){
        
                    // Requires intLog = 2
                    if (intLog != 1){
                        //Properties
                        def prop = it.getPropertyList()
                        //loop through the list of testStep properties and log as required
                        prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
                        new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -TestCase  +  TestStep]:,${strLogCase}${strLogStep}")}
                } 
                if (it instanceof WsdlTestRequestStep){

                    //Get Request (will be xml if not jms)
                    if (it.getTestRequest().getRequestContent().substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"}
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.${strExt}")
                        .append(context.expand(it.getTestRequest().getRequestContent()))
                    
                    //Get Response if exists (will always be xml)
                    if (it.getTestRequest().getResponseContent() != null){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //SOAP Endpoint and Assertion
                    if (intLog != 1){ 
                         new File("${strPath}").mkdirs();new File("${testConditions["propWorkingFolder"]}\\log\\","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -Endpoint + Assertions]:,StepName=${it.name},Endpoint=${context.expand(it.getTestRequest().getEndpoint())},SOAPAssertion=${context.expand(objProject.getPropertyValue("svSoapAssertion"))}")
                    }
                } 
                if (it instanceof RestTestRequestStep){

           
                    //Get Response if exists (will always be xml)
                    if (it.getTestRequest().getResponseContentAsXml() != null){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${dateTime3}_soapRES_${strSoapTestCase}_${it.name}_${testConditions["projectEnvironment"]}_${username}_${hostname}_${dateTime3}.xml")
                            .append(it.getTestRequest().getResponseContentAsXml().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }

                } 
                else if (it instanceof JdbcRequestTestStep){ //OS... add "|| (it instanceof ProJdbcRequestTestStep)" for PRO 
                    //Request
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.sql")
                        .append(context.expand(it.getQuery().replaceAll(/\n/,'\r\n')))
                    //Response
                    if (it.getResponseContent().contains("<Row>")){ 
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //JDBC Connection String and  Assertion
                    if (intLog != 1){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -ConnStr  + Assertions]:,StepName=${it.name},ConnectionString=${context.expand(it.getConnectionString().replaceAll('/.+@/','/PASS_VALUE@/'))},JDBCAssertion=${context.expand(objProject.getPropertyValue("dbJdbcAssertion"))}")

                    }
                }

            }
        }

//******************************
// Generate the Results Log
//******************************
	def propsFile = "Results-${testSuite}-${username}-${hostname}-${dateTime2}.csv" //csv properties file
	new File("${testConditions["projectLocation"]}\\log\\","${propsFile}").append('\r\n' + "Time:${testConditions["dateTime1"]}, ${strSoapTestCase}${testConditions["testCounter"]}, ${testConditions["TestID"]}, ${testConditions["TestObjective"]}, ${testDataLog}")
log.info "UserSimulator-log"	]]></script></con:config></con:testStep><con:testStep type="groovy" name="log(soapui based) 25062020" id="95dcea5f-6d94-423c-900c-55aa861f5674"><con:settings/><con:config><script><![CDATA[import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.impl.wsdl.teststeps.*
import java.util.concurrent.TimeUnit

	def getProps=[:], setProj=[:], setTest=[:], testConditions=[:]

	core = testRunner.testCase.testSuite.project //if library is in the same project
	scripts = core.testSuites["Library"] //test suite holding the library
	scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context) 		
	context.ManageSoapUIProperties.getMyProperties(testRunner.testCase.testSuite, testConditions) 



//*************************************
// Setup properties for logging
//*************************************
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase()
	def strSoapTestCase = objCase.name; def strLogGlobal = ''; strLogProject = ''; strLogCase = ''; strLogStep = ''
	context.ManageSoapUIProperties.getMyProperties(testRunner.testCase, testConditions)
	def testDataLog = [:]; context.ManageSoapUIProperties.getMyProperties(testRunner.testCase.testSuite, testDataLog)
	
	def projectLocation = testRunner.testCase.testSuite.project.getPropertyValue("projectLocation")
	def propGlobalLog = testRunner.testCase.testSuite.getPropertyValue("propGlobalLog")
	if (propGlobalLog!=null) {projectLocation = propGlobalLog.toString()}
	
	def projectEnvironment = testRunner.testCase.testSuite.project.getPropertyValue("projectEnvironment")
	def strPath = "${projectLocation}\\log\\${projectEnvironment}\\"

	// note - will overwrite previous run but creates the log folder if non-existed
	File directory = new File(strPath);
        if (!directory.exists()) {
            directory.mkdirs();
        }

	
	def testSuite = context.expand((testRunner.testCase.testSuite).name)
	intLog = 1 // move to properties file in future, 1 = request/responses only, 2 = all, need a 0 option


//*******************************************************
// Generate Request and Responses and Properties file
//*******************************************************

// Loop through steps and log when the step has been enabled
	def step = objCase.getTestStepList()
	step = objCase.getTestStepList()
        step.each {
        	if (!it.disabled){
                
                
                if ((it instanceof WsdlRunTestCaseTestStep) || (it instanceof WsdlPropertiesTestStep)){
        
                    // PROPERTIES File (requires intLog = 2)
                    if (intLog != 1){
                        //Properties
                        def prop = it.getPropertyList()
                        //loop through the list of testStep properties and log as required
                        prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
                        new File("${strPath}").mkdirs(); new File("${strPath}",

                        //filename
                        "PROPERTIES_${strSoapTestCase}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"].substring(0,8)}.txt")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -TestCase  +  TestStep]:,${strLogCase}${strLogStep}")}
               		} 
                
                //SOA Steps
                if (it instanceof WsdlTestRequestStep){

                    //Get Request (will be xml if not jms)
                    if (it.getTestRequest().getRequestContent().substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"}
                     new File("${strPath}").mkdirs(); new File("${strPath}",
                     
                     	//filename
                     	"${testConditions["TestID"]}_soapREQ_${strSoapTestCase}_${it.name}.${strExt}")
                        .append(context.expand(it.getTestRequest().getRequestContent()))
                    
                    //Get Response if exists (will always be xml)
                    if (it.getTestRequest().getResponseContent() != null){
                         new File("${strPath}").mkdirs(); new File("${strPath}",
                         
                         //filename
                         "${testConditions["TestID"]}_soapRES_${strSoapTestCase}_${it.name}.xml")
                            .append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    
                     // PROPERTIES File (requires intLog = 2, SOAP Endpoint and Assertion)
                    if (intLog != 1){ 
                         new File("${strPath}").mkdirs();new File("${strPath})",

                         //filename
                         "PROPERTIES_${strSoapTestCase}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"].substring(0,8)}.txt")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -Endpoint + Assertions]:,StepName=${it.name},Endpoint=${context.expand(it.getTestRequest().getEndpoint())},SOAPAssertion=${context.expand(objProject.getPropertyValue("svSoapAssertion"))}")
                    }

                    
                } 

                
               // REST Steps                 
               if (it instanceof RestTestRequestStep){

           
                    //Get Response if exists (will always be xml)
                    if (it.getTestRequest().getResponseContentAsXml() != null){
                         new File("${strPath}").mkdirs(); new File("${strPath}",
                         
                         //filename
                         "${testConditions["TestID"]}_restRES_${strSoapTestCase}_${it.name}.xml")
                            .append(it.getTestRequest().getResponseContentAsXml().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }

                } 


			// HTTP Steps
               if (it instanceof HttpTestRequestStep) {

               	                    
                    if (it.getTestRequest().getResponseContentAsXml() != null){
                         new File("${strPath}").mkdirs(); new File("${strPath}",
                         
                         //filename
                         "${testConditions["TestID"]}_httpRES_${strSoapTestCase}_${it.name}.xml")
                            .append(it.getTestRequest().getResponseContentAsXml().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }

              	
  
                }

                //JDBC Steps
                if (it instanceof JdbcRequestTestStep){ //OS... add "|| (it instanceof ProJdbcRequestTestStep)" for PRO 
                    
                    //Request
                     new File("${strPath}").mkdirs(); new File("${strPath}",
                     
                    	 //filename
                     	"${testConditions["TestID"]}_jdbcREQ_${strSoapTestCase}_${it.name}_${testConditions["projectEnvironment"]}.sql")
                        .append(context.expand(it.getQuery().replaceAll(/\n/,'\r\n')))
                    
                    //Response
                    if (it.getResponseContent().contains("<Row>")){ 
                         new File("${strPath}").mkdirs(); new File("${strPath}",

                         //filename
                         "${testConditions["TestID"]}_jdbcRES_${strSoapTestCase}_${it.name}_${testConditions["projectEnvironment"]}.xml")
                            .append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    
                    //JDBC Connection String and  Assertion
                    if (intLog != 1){
                         new File("${strPath}").mkdirs(); new File("${strPath}",

                         //filename
                         "PROPERTIES_${strSoapTestCase}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"].substring(0,8)}.txt")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -ConnStr  + Assertions]:,StepName=${it.name},ConnectionString=${context.expand(it.getConnectionString().replaceAll('/.+@/','/PASS_VALUE@/'))},JDBCAssertion=${context.expand(objProject.getPropertyValue("dbJdbcAssertion"))}")

                    }
                }


            }
        }

//******************************
// Generate the Results Sinc
//******************************
	def propsFile = "Results-${testSuite}-${testConditions["systemUser"]}-${testConditions["systemHost"]}-${testConditions["dateTime2"]}.csv" //csv properties file
	new File("${projectLocation}\\log\\","${propsFile}").append('\r\n' + "Time:${testConditions["dateTime1"]}, ${strSoapTestCase}${testConditions["testCounter"]}, ${testConditions["TestID"]}, ${testConditions["TestObjective"]}, ${testConditions}")
]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="18a90810-56c9-4bfa-8b18-e0a6fa4f6003" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Working with Maps" searchProperties="true"><con:settings/><con:testStep type="groovy" name="java maps" id="792b84ca-5a8b-4e77-a3e8-cec2c31c378a"><con:settings/><con:config><script>// Java Map egs

HashMap myMap = new HashMap();
myMap.put (1, "A");
myMap.put(2,"B");
myMap.put(3,"C");
log.info myMap
String value1 = myMap.get(1);
log.info value1


//Iterate over keys
Iterator itr = myMap.keySet().iterator();
while (itr.hasNext())
{
	Integer key = itr.next();
	String value = myMap.get(key);
	log.info "Key_[A]: ${key} Value_[A]: ${value}"
	log.info myMap[1]
}

//Iterate over values
Iterator iter = myMap.entrySet().iterator();
while (iter.hasNext())
{
	Map.Entry entry = iter.next();
	log.info "Key_[B]: ${entry.getKey()} Value_[B]: ${entry.getValue()}"
	
}

// Store soapui properties in a hash map
//def newMap=[:]
HashMap myMap2 = new HashMap();
for (prop in testRunner.testCase.getPropertyList()) {
			propertyMapValue = testRunner.testCase.getPropertyValue(prop.getName())
			myMap2[prop.getName()] = propertyMapValue}
log.info myMap2
log.info myMap2["tc1"]
</script></con:config></con:testStep><con:testStep type="groovy" name="hash map storage of object" id="3d629f7e-1045-494c-a04d-82f8932f029e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestProperty;
import com.eviware.soapui.model.TestPropertyHolder;

myMap = new HashMap(); // map to store the object
Object propSource = testRunner.testCase // object
if (propSource instanceof TestPropertyHolder) {  // if the object is a testpropertyholder
	//log.info "HELLO"
	List&lt;TestProperty> properties = propSource.getPropertyList()
	//log.info properties
	
	for (TestProperty p : properties) {
		String propValue = propSource.getPropertyValue(p.getName());
		myMap.put(p.getName(), propValue);
		} 

}
log.info myMap
log.info myMap["AbnAttribute"]

	</script></con:config></con:testStep><con:properties><con:property><con:name>propertyOne</con:name><con:value>some value</con:value></con:property><con:property><con:name>AbnAttribute</con:name><con:value>ABNorganization</con:value></con:property></con:properties></con:testCase><con:testCase id="2a09218b-950b-4bdc-9b05-3129648dd0aa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Test Steps" searchProperties="true"><con:settings/><con:testStep type="groovy" name="enable all steps if disabled" id="617cd327-abca-406a-b57b-2bf4965af6d7"><con:settings/><con:config><script>//Enable all steps if disabled
// enable all steps (as a default, starting position)
context.testCase.testSuite.getTestCaseList().each {
    it.testStepList.each 
    	{
    		if( it.disabled) { it.setDisabled(false); log.info "All steps enabled by default"} } };log.info ""</script></con:config></con:testStep><con:testStep type="groovy" name="enable and disable steps" id="b218ff76-03ec-4fa1-89ba-798df641ad18"><con:settings/><con:config><script>// DISABLE STEPS
context.testCase.testSuite.getTestCaseList().each
{
    
    it.testStepList.each 
    {
         if( it.disabled) { it.disabled = false } //if already disabled ignore
         it.setDisabled(true) // disable the steps not already disabled
        
        
context.testCase.testSuite.getTestCaseList().each
{
    
    it.testStepList.each 
    {
         if( it.disabled) { it.disabled = false } //if already disabled ignore
         it.setDisabled(true) // disable the steps not already disabled
        
        //it.setDisabled(false)  //enable steps
    }
    
}
// DISABLE STEPS
context.testCase.testSuite.getTestCaseList().each
{
    
    it.testStepList.each 
    {
         if( it.disabled) { it.disabled = false } //if already disabled ignore
         it.setDisabled(true) // disable the steps not already disabled
        
        //it.setDisabled(false)  //enable steps
    }
    
}
.setDisabled(false)  //enable steps
    }
    
}



// ENABLE STEPS
context.testCase.testSuite.getTestCaseList().each
{
    
    it.testStepList.each 
    {
         if( it.disabled) { it.setDisabled(false)
         //else { it.disabled = false }
        
        
    }
    
}

}</script></con:config></con:testStep><con:testStep type="groovy" name="find test step by name" id="9308c881-c108-4280-ad6a-c5b3308e87fa"><con:settings/><con:config><script>//eg for the current test case
context.testCase.getTestStepByName("updateReportingRoundV01").setDisabled(true)

</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="a600da16-9f6a-406c-bf35-a3ee1bad8744" name="Authentication"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="df93738b-6436-4b65-871e-286cceca84b1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="urlEncoder" searchProperties="true"><con:settings/><con:testStep type="groovy" name="url encoder" id="90396345-b2a0-4f77-a26e-d24fdbcfb9f4"><con:settings/><con:config><script>import java.net.URLEncoder

def toEncode = "PH17/5268"
def encodedValue = java.net.URLEncoder.encode(toEncode, "UTF-8")
//def decodedValue = java.net.URLEncoder.decode(encodedValue, "UTF-8")

//assert java.net.URLEncoder.encode(toEncode, "UTF-8") == "dehydrogenase+%28NADP%2B%29"

log.info toEncode
log.info encodedValue
//log.info decodedValue

//{id[156%20or%20157%20or%20158%20or%20159%20or%20160]}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="bd693ebc-0706-4660-864b-910151a25a50" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Base64Encoder" searchProperties="true"><con:settings/><con:testStep type="groovy" name="base64 encoder decoder" id="8ef495c0-ec8d-4057-94b6-b5f949942abc"><con:settings/><con:config><script>public static String encoder(String clearText) throws Exception{

		def encode

		try {encode = clearText.bytes.encodeBase64().toString()} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e);
		}
		return encode;
	}


public static String decoder(String encodedText) throws Exception{

		def decode

		try {
			byte [] y = encodedText.decodeBase64()
			decode = new String (y)
			} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e);
		}
		return decode;
	}

//def x = "passw0rd"
//def x = "michael.derobertis@health.gov.au:He@lth2018"
//def x = "derobm:Password123"
def x = "This is an edited test file being used for web services automation testing"

def encodedValue = encoder(x)
log.info encodedValue

def decodedValue = decoder(encodedValue)
log.info decodedValue</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9814c8cf-b5e1-47e7-8395-ced66e9807c7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PasswordManagement Encryption and Encoding" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Encrypt" id="23d19071-d891-4321-8f9f-6f5c10d91a14"><con:settings/><con:config><script>import com.eviware.soapui.support.UISupport

// Call the Library and the Security Class (containing encrypt and decrypt functions)
core = context.testCase.testSuite.project 
scripts = core.testSuites["Library"]
scripts.testCases["automation-v1"].testSteps["Security"].run(testRunner, context)

// Define the Key 
def key = "AAAAAAAA"

// Prompt for user input
def passwordPrompt = UISupport.prompt("Enter your ALM Password","Password", "Password123")

// Encrypt
def encryptedPassword = context.Security.encrypt(passwordPrompt,key)
//log.info "Encrypted Password is: " + encryptedPassword
 //UISupport.showInfoMessage("Encrypted Password is: ${encryptedPassword}","")
UISupport.prompt("Here is your Encrypted Password you thilly thousage! Copy to your properties file","", "${encryptedPassword}")



String propALMPw = context.Security.decrypt(encryptedPassword,"AAAAAAAA")
log.info "decrypted value: " + propALMPw

</script></con:config></con:testStep><con:testStep type="groovy" name="Encoder" id="ed6a99cb-19cc-4c3b-b463-1d73c9390778"><con:settings/><con:config><script>import com.eviware.soapui.support.UISupport

// Call the Library and the Security Class (containing encrypt and decrypt functions)
core = context.testCase.testSuite.project 
scripts = core.testSuites["Library"]
scripts.testCases["automation-v1"].testSteps["Security"].run(testRunner, context)


// Prompt for user input
def passwordPrompt = UISupport.prompt("Enter your ALM Password","Password", "Password123")

// Encode
def encodedPassword = context.Security.encoder(passwordPrompt)

// Display output
UISupport.prompt("Here is your Encoded Password. Please copy to your properties file","", "${encodedPassword}")

String propALMPw = context.Security.decoder(encodedPassword)
log.info "decoded value: " + propALMPw
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="57f49cf9-0e58-4271-97fd-48654018ffcc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="encode decode encrypt decrypt" searchProperties="true"><con:settings/><con:testStep type="groovy" name="encoder decoder" id="0a3ffaae-7b25-4d94-a663-0738c974eed8"><con:settings/><con:config><script>//Encoder and Decoder


public static String encoder(String clearText) throws Exception{

	def encode

	try {encode = clearText.bytes.encodeBase64().toString()} catch (Exception e) {
		e.printStackTrace();
		throw new Exception(e);
	}
	return encode;
}


public static String decoder(String encodedText) throws Exception{

	def decode

	try {
		byte [] y = encodedText.decodeBase64()
		decode = new String (y)
		} catch (Exception e) {
		e.printStackTrace();
		throw new Exception(e);
	}
	return decode;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="encrypter decrypter" id="74e30b22-911f-4ebc-b0d6-5adfe380569f"><con:settings/><con:config><script>Encrypter and Decrypter

public static String encrypt(String strClearText,String strKey) throws Exception{
	String strData="";

	try {
		SecretKeySpec skeyspec=new SecretKeySpec(strKey.getBytes(),"Blowfish");
		Cipher cipher=Cipher.getInstance("Blowfish");
		cipher.init(Cipher.ENCRYPT_MODE, skeyspec);
		byte[] encrypted=cipher.doFinal(strClearText.getBytes());
		encrypted=cipher.doFinal(strClearText.getBytes());
		strData=new String(encrypted);
	
	} catch (Exception e) {
		e.printStackTrace();
		throw new Exception(e);
	}
	return strData;
}



public static String decrypt(String strEncrypted,String strKey) throws Exception{
	String strData="";

	try {
		SecretKeySpec skeyspec=new SecretKeySpec(strKey.getBytes(),"Sausages");
		Cipher cipher=Cipher.getInstance("Blowfish");
		cipher.init(Cipher.DECRYPT_MODE, skeyspec);
		byte[] decrypted=cipher.doFinal(strEncrypted.getBytes());
		strData=new String(decrypted);
	
	} catch (Exception e) {
		e.printStackTrace();
		throw new Exception(e);
	}

	return strData;
}

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4d655015-f794-4b82-abd3-8d114ecdd6c7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="REST examples" searchProperties="true"><con:settings/><con:testStep type="groovy" name="jwt authentication eg for a Login Post" id="2adccc1d-e227-4891-82aa-abadcafa8fab"><con:settings/><con:config><script>/*
 ***Content that goes into the REST Request***
  
 
 eg Payload, Media Type = application/json ; Type = REQUEST
{ 
     "client_id": "${#Project#client_id}", 
     "client_secret": "${#Project#client_secret}" 
}
*/


/*
  ***Content that goes into the REST step script***

 
 */
// Reads the response, stores response header cookies, and sets into the request headers for the next step

def sessionidPair
def token1Pair
context.testCase.getTestStepByName("sign_in_step1").testRequest.response.responseHeaders["Set-Cookie"].each { 
    if (it.contains("OCTANE_USER=")) octaneUser = it
    if (it.contains("LWSSO_COOKIE_KEY=")) lwsso = it
}
//testRunner.testCase.getTestStepByName("2nd test step").testRequest.requestHeaders += ["Cookie": ["${sessionidPair};${token1Pair}".toString()]]
//context.testCase.setPropertyValue("OctaneUser_cookie", octaneUser.toString())
//context.testCase.setPropertyValue("Lwsso_cookie", lwsso.toString())

context.testCase.getTestStepByName("getDefects_step2").testRequest.requestHeaders += ["Cookie": ["${lwsso};${octaneUser}".toString()]]
log.info octaneUser
log.info lwsso

// the above eg script creates a header called Cookie with value OCTANE_USER= or LWSSO_COOKIE_KEY= to the variable (as per the if logic)</script></con:config></con:testStep><con:testStep type="groovy" name="base64 authentication eg for a login request" id="98b1d350-3065-45ad-b4a7-6cb1ff214526"><con:settings/><con:config><script>// At the project, suite, or test case level prompt for the value (eg password) to be encoded
/*
base64AuthALM = UISupport.getDialogs().prompt("Value", "Enter ALM &lt;username>:&lt;password>", "derobm:Password123")
project.setPropertyValue("base64AuthALM", "${encoder(base64AuthALM)}") 

//requires an encoder function to do the base64 encoding
*/

/*The value then gets sent as a header as follows:
 * 	Header name = Authorization
 * 	Value = Basic ${base64AuthALM}
 * 
 * 
 */</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="0ac1ba36-6417-40e1-ab34-a8ca5e86e4be" name="UI"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8585eb02-e66a-4e98-9b4e-3c6b3359bff5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="user interfaces" searchProperties="true"><con:settings/><con:testStep type="groovy" name="UISupport_getDialogs" id="aa9bfb77-2f69-4f34-b4bc-dafe77070ade"><con:settings/><con:config><script>import com.eviware.soapui.support.UISupport
x = com.eviware.soapui.support.UISupport.getDialogs().prompt("Field", "Header")
log.info x

//com.eviware.soapui.support.UISupport.alert.showErrorMessage("Hello World !")


UISupport.showErrorMessage("This is an Error Message !")
UISupport.showInfoMessage("Hello World !")


</script></con:config></con:testStep><con:testStep type="groovy" name="Prompt for input" id="eae8b01e-bcf4-4b09-a573-89867e1be9da"><con:settings/><con:config><script>//Prompt for user input

import com.eviware.soapui.support.UISupport

def userHomeFolder = System.getProperty("user.home")
def projectLocation = project.getPropertyValue("projectLocation")
def projectEnvironmentExists = project.getPropertyValue("projectTestEnvironment")

// Set the workspace path if does not exist
if ((projectLocation == "")||(projectLocation ==null)||(projectLocation =="null")) {
//String projectLocation = UISupport.getDialogs().prompt("Value", "Set the path where your SoapUI Project is located", "${userHomeFolder}\\Documents\\Michael\\soapui\\projects\\dataportal")
projectLocation = UISupport.getDialogs().prompt("Value", "Set the path where your SoapUI Project is located", "${userHomeFolder}\\Documents\\soapui\\projects\\${project.name}")
project.setPropertyValue("projectLocation", "${projectLocation}") 
}



//Prompt Input, Display Error, Display Info
import com.eviware.soapui.support.UISupport
x = com.eviware.soapui.support.UISupport.getDialogs().prompt("Field", "Header")
log.info x

//com.eviware.soapui.support.UISupport.alert.showErrorMessage("Hello World !")


UISupport.showErrorMessage("This is an Error Message !")
UISupport.showInfoMessage("Hello World !")


</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="92aa18c3-1149-4995-a976-37138e3b3191" name="Wsdls Interfaces and Endpoints"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2603c149-5a06-4b63-839d-98c6b4f68bc7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Interface Summary (bindings)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="working with endpoints" id="83e98e23-ffc8-4a08-90af-d2dab56388b4"><con:settings/><con:config><script>// set an endpoint for a step (needs a real soap message to work)
testRunner.testCase.getTestStepByName("MySOAPRequest").getHttpRequest().setEndpoint("http://blah.blah")</script></con:config></con:testStep><con:testStep type="groovy" name="get interface and operation names" id="8e718944-deec-4808-9f45-213b0cc4ad21"><con:settings/><con:config><script>def project = testRunner.testCase.testSuite.project

log.info project.interfaceList[0].name
log.info project.interfaceList[0].operationList[0].name

/*
log.info "Interfaces in project " + project.name
for( iface in project.interfaceList )
{
    log.info "Interface: " + iface.name
}
*/</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d0ba78dc-08c1-47c5-aa6b-a23e237a9440" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Wsdl Management" searchProperties="true"><con:settings/><con:testStep type="groovy" name="createWsdls" id="7cc2e4ed-d0a5-4204-9348-4705e6702068"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.registry.*;
import com.eviware.soapui.impl.wsdl.teststeps.*;
import groovy.io.FileType

def list = []
def dir = new File("\\\\central.health\\dfsuserenv\\Users\\User_01\\DEROBM\\Documents\\Michael\\soapui\\wsdls")
dir.eachFileRecurse (FileType.FILES) { file ->
  list &lt;&lt; file
	}

for ( file in list ) {
 	testRunner.testCase.testSuite.project.importWsdl(file.toString(),true)
	}
/*
def testSuiteName = "TestSuite";
EWHtestSuite = testRunner.testCase.testSuite.project.addNewTestSuite(testSuiteName);
for (iFace in testRunner.testCase.testSuite.project.getInterfaceList()) {
 if (iFace.getName().matches(".*?[0-9]")) {
  EWHtestCase = EWHtestSuite.addNewTestCase(iFace.getName());
  EWHtestCase.setKeepSession(true);
  log.info EWHtestCase.addTestStep(((WsdlTestStep)testRunner.testCase.getTestStepByName("Login")).getConfig())
  for (operation in iFace.getOperationList()) {
   TStepC = WsdlTestRequestStepFactory.createConfig(operation, operation.getName());
   testStep = EWHtestCase.addTestStep(TStepC);
  }
 }
}
*/</script></con:config></con:testStep><con:testStep type="groovy" name="updateExistingWsdlDefinitions" id="7b1d81db-868e-4f68-91a3-6e4979383c76"><con:settings/><con:config><script>
// FROM SETUP SCRIPT

import com.eviware.soapui.support.UISupport
import com.eviware.soapui.impl.wsdl.WsdlInterface

//String disclaimer = UISupport.prompt("Click Okay to accept that you have knowledge of SOAP Terminology, location of your Wsdls, and understanding the risks involved with binding updates")

String ifName = UISupport.prompt("Select the Interface","Interface","DataAssetSOAP12", "AccountManagementV2SOAP12","ProviderDirectoryV3SOAP12", "IFADataServiceSoap12")
def localPath, remotePath


if (ifName == "AccountManagementV2SOAP12")
	{ 
	localPath = "file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/account-management-v2.wsdl"
	remotePath = "http://10.11.13.37/usermanagementservices-web-v2/AccountManagementV2/WEB-INF/wsdl/account-management-v2.wsdl"
	}
	
	else if (ifName == "DataAssetSOAP12")
	{
	localPath = "file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/data-asset-v2.wsdl"
	remotePath = "http://10.11.13.37/data-asset-service-web-v2/DataAssetV2/WEB-INF/wsdl/data-asset-v2.wsdl"
	}

		else if (ifName == "ProviderDirectoryV3SOAP12")
		{
		localPath = "file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/provider-directory-v3.wsdl"
		remotePath = "http://10.11.13.37/provider-directory-service-web-v3/ProviderDirectoryV3/WEB-INF/wsdl/provider-directory-v3.wsdl"
		}

		else if (ifName == "IFADataServiceSoap12")
		{
		localPath = "file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/indigenous-health-data-v1.wsdl"
		remotePath = "https://dataportal-test/indigenous-health-data-service-web-v1/IndigenousHealthDataV1?wsdl"
		}
	https://dataportal-test/indigenous-health-data-service-web-v1/IndigenousHealthDataV1?wsdl


String definition = UISupport.prompt("Set the path for the ${ifName} interface selected","Interface","", "${localPath}", "${remotePath}")
//String confirm = UISupport.prompt("Click Okay to confirm ${ifName} update to ${definition}")

log.info "${ifName} and ${definition}"

/*

myInterface=(WsdlInterface) testRunner.testCase.testSuite.project.getInterfaceByName("${ifName}");
myInterface.updateDefinition("${definition}", true);
log.info "WSDL definition has been loaded. Please check"

*/
/*

myInterface=(WsdlInterface) testRunner.testCase.testSuite.project.getInterfaceByName("AccountManagementV2SOAP12");
//myInterface.updateDefinition("http://10.11.13.37/usermanagementservices-web-v2/AccountManagementV2/WEB-INF/wsdl/account-management-v2.wsdl", true);
myInterface.updateDefinition("file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/account-management-v2.wsdl", true);
log.info " WSDL definition loaded from '" + myInterface.getDefinition() + "'";



myInterface=(WsdlInterface) testRunner.testCase.testSuite.project.getInterfaceByName("IFADataServiceSoap12");
//myInterface.updateDefinition("https://dataportal-test/indigenous-health-data-service-web-v1/IndigenousHealthDataV1?wsdl", true)
myInterface.updateDefinition("file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/indigenous-health-data-v1.wsdl", true)
log.info " WSDL definition loaded from '" + myInterface.getDefinition() + "'";


myInterface=(WsdlInterface) testRunner.testCase.testSuite.project.getInterfaceByName("IFADataServiceSoap");
//myInterface.updateDefinition("https://dataportal-test/indigenous-health-data-service-web-v1/IndigenousHealthDataV1?wsdl", true)
myInterface.updateDefinition("file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/indigenous-health-data-v1.wsdl", true)
log.info " WSDL definition loaded from '" + myInterface.getDefinition() + "'";



myInterface=(WsdlInterface) testRunner.testCase.testSuite.project.getInterfaceByName("ProviderDirectoryV3SOAP12");
//myInterface.updateDefinition("http://10.11.13.37/provider-directory-service-web-v3/ProviderDirectoryV3/WEB-INF/wsdl/provider-directory-v3.wsdl", true)
myInterface.updateDefinition("file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/provider-directory-v3.wsdl", true)
log.info " WSDL definition loaded from '" + myInterface.getDefinition() + "'";

*/
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="580383d2-dbf4-4cb1-98c4-03369065b700" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="workspace and wsdl related" searchProperties="true"><con:settings/><con:testStep type="groovy" name="using workspace" id="10614b08-a97a-46ef-a9e0-4ffb74865701"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.*
import com.eviware.soapui.impl.WsdlInterfaceFactory

def workspace = testRunner.testCase.testSuite.project.workspace
def project =   workspace.createProject('Project2',new File('C:/temp/myProject.xml')) 
WsdlInterfaceFactory.importWsdl(project, 'path/to/yourWsdl', true)</script></con:config></con:testStep><con:testStep type="groovy" name="save script maybe" id="c97a3ef3-2fcc-43a8-928f-8a64e8138a36"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.*
import com.eviware.soapui.impl.WsdlInterfaceFactory

def project = new WsdlProject()
project.setName("Project1")
WsdlInterfaceFactory.importWsdl(project, 'path/to/yourWsdl', true)

// file to save the project
def projectFilePath = 'C:/temp/myProject.xml'
// save the project
project.saveAs(projectFilePath) 
// load the project from disc to workspace
testRunner.testCase.testSuite.project.workspace.importProject(projectFilePath)</script></con:config></con:testStep><con:testStep type="groovy" name="update wsdl definition" id="5eab2662-c128-4415-977a-a045d723a8cb"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.WsdlInterface

myInterface=(WsdlInterface) testRunner.testCase.testSuite.project.getInterfaceByName("interface name");

myInterface.updateDefinition("wsdl url here", false);

log.info " WSDL definition loaded from '" + myInterface.getDefinition() + "'";</script></con:config></con:testStep><con:testStep type="groovy" name="update wsdl definition and recreate all requests based on the updated schema" id="a01fec60-6776-475f-8ff3-d6fcef0a4c3d"><con:settings/><con:config><script>import static com.eviware.soapui.impl.wsdl.actions.iface.UpdateInterfaceAction.recreateRequests
import static com.eviware.soapui.impl.wsdl.actions.iface.UpdateInterfaceAction.recreateTestRequests

project = testRunner.testCase.testSuite.project; //get the project reference
def ifaceList = project.getInterfaceList(); //get all the interfaces present in the project in a list

//start a loop for number of interfaces
for(int i = 0; i &lt; project.getInterfaceCount() ; i++)
{

def iface = project.getInterfaceAt(i);
def url = iface.definition;
iface.updateDefinition( url, true); //updateDefinition(String url , Boolean createRequests)

//The above part updates the definition
//The part below recreates the requests based on updated wsdl definition

//syntax - 
//recreateRequests( WsdlInterface iface, boolean buildOptional, boolean createBackups, boolean keepExisting, boolean keepHeaders )

recreateRequests(iface,true,true,true,true);
recreateTestRequests(iface,true,true,true,true);
}
//End of Script//</script></con:config></con:testStep><con:setupScript>import com.eviware.soapui.impl.wsdl.WsdlInterface


myInterface=(WsdlInterface) testRunner.testCase.testSuite.project.getInterfaceByName("DataAssetSOAP12");
//myInterface.updateDefinition("http://10.11.13.37/data-asset-service-web-v2/DataAssetV2/WEB-INF/wsdl/data-asset-v2.wsdl", true);
myInterface.updateDefinition("file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/data-asset-v2.wsdl", true);
log.info " WSDL definition loaded from '" + myInterface.getDefinition() + "'";



myInterface=(WsdlInterface) testRunner.testCase.testSuite.project.getInterfaceByName("AccountManagementV2SOAP12");
//myInterface.updateDefinition("http://10.11.13.37/usermanagementservices-web-v2/AccountManagementV2/WEB-INF/wsdl/account-management-v2.wsdl", true);
myInterface.updateDefinition("file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/account-management-v2.wsdl", true);
log.info " WSDL definition loaded from '" + myInterface.getDefinition() + "'";



myInterface=(WsdlInterface) testRunner.testCase.testSuite.project.getInterfaceByName("IFADataServiceSoap12");
//myInterface.updateDefinition("https://dataportal-test/indigenous-health-data-service-web-v1/IndigenousHealthDataV1?wsdl", true)
myInterface.updateDefinition("file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/indigenous-health-data-v1.wsdl", true)
log.info " WSDL definition loaded from '" + myInterface.getDefinition() + "'";


myInterface=(WsdlInterface) testRunner.testCase.testSuite.project.getInterfaceByName("IFADataServiceSoap");
//myInterface.updateDefinition("https://dataportal-test/indigenous-health-data-service-web-v1/IndigenousHealthDataV1?wsdl", true)
myInterface.updateDefinition("file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/indigenous-health-data-v1.wsdl", true)
log.info " WSDL definition loaded from '" + myInterface.getDefinition() + "'";



myInterface=(WsdlInterface) testRunner.testCase.testSuite.project.getInterfaceByName("ProviderDirectoryV3SOAP12");
//myInterface.updateDefinition("http://10.11.13.37/provider-directory-service-web-v3/ProviderDirectoryV3/WEB-INF/wsdl/provider-directory-v3.wsdl", true)
myInterface.updateDefinition("file:////central.health/dfsuserenv/Users/User_01/DEROBM/Documents/Michael/soapui/wsdls/current/provider-directory-v3.wsdl", true)
log.info " WSDL definition loaded from '" + myInterface.getDefinition() + "'";


</con:setupScript><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="8b47c40b-f945-4e4b-b0e2-eab9a9266cd0" name="Context Properties Objects"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="c8bba7f6-637c-4921-8f7f-e13800da2ec4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Context" searchProperties="true"><con:description>Working with SoapUI properties is critical to getting SoapUI API automation up and running.

Framework Relevance:

1) When reading in from a data source, store to properties (which can then be pulled down and applied).
	Eg 
	1. User says they want to run "Test1"
	2. "Test1" is stored into the SoapUI Project Properties under parameter "TestCase" and value "Test1"
	3. Logic in the SoapUI Automation Test Case then applies:
		a) Set the required steps (eg some steps might need enabling and others disabling)
		b) Build the data conditions (eg Test1 might require a specific client of a certain profile to be created)

2) Property transfer between the various layers. Eg: 
	1. Global properties might contain Enterprise / Health IT related configuration stuff
	2. Project properties might store the test environment settings (logins, accesses, etc)
	3. Test Case properties might store Test strategy/planning details
	4. Responses from Steps might need to be pushed up to the Test Case properties level (so that the next step can be properly set)

3) Good way to use as teardown/startup (eg remove all old properties, load new properties for the next test, execute test, etc)</con:description><con:settings/><con:testStep type="groovy" name="context and test case object" id="a32b1edd-4eec-403a-bdfb-78ce318d67fe"><con:settings/><con:config><script>


// how to get a step context (not the name)
x = context.testCase.getTestStepAt(1) //0 is the first step, hence 1 is the second step
y = context.testCase.getTestStepByName("Load per row from testplan.csv") //if the same step number as above then x and y will be the same

log.info x
log.info y

/*
 *  Can then do all sorts of stuff like
 *  	rename the step eg x.setName ("NameChange")
 */

 // how to get the name of the soapui test case
 def soapTCName = (context.expand((testRunner.testCase).name))
 log.info soapTCName

 // how to get the name of a step or one based on the step index specified
 def currentStepName = (context.expand((testRunner.testCase.getTestStepAt(context.currentStepIndex)).name))
 log.info currentStepName
 
 def prevStepName = (context.expand((testRunner.testCase.getTestStepAt(context.currentStepIndex -1)).name))
 log.info prevStepName

 // test case stuff 
 def myTestCase = context.testCase //set context to my test case
 
 // stuff that can be done with the test case object
 def objTestCase = testRunner.getTestCase() 
 def stepList = objTestCase.getTestStepList().name
 log.info stepList
 def stepCount = objTestCase.getTestStepCount()
 log.info stepCount

 // get the project name
 def projectName = context.testCase.testSuite.project.name
 log.info projectName
 
 

 </script></con:config></con:testStep><con:testStep type="groovy" name="context play" id="c69bc379-4003-4186-8d76-43a290846266"><con:settings/><con:config><script>def project = context.testCase.testSuite.project;
def myTestCase = context.testCase 
def myTestSuite = context.testCase.testSuite

//log.info myTestCase.name
//log.info myTestSuite.name
//log.info "no of test suites " + project.getTestSuiteCount()
//log.info "no of test cases " + myTestSuite.getTestCaseCount()
//log.info "no of test steps " + myTestCase.getTestStepCount()

/*
def testSuite, testCaseCount, sum=0
for (int i = 0; i &lt; project.getTestSuiteCount(); i++)
{
testSuite = project.getTestSuiteAt(i)
testCaseCount = testSuite.getTestCaseCount();
//sum = sum + testCaseCount
log.info testSuite.getTestCaseAt(testCaseCount-1).name

}

//log.info sum
*/

for (int i = 0; i &lt; myTestSuite.getTestCaseCount(); i++)
{
if (myTestSuite.getTestCaseAt(i).name == 'automation-v1'){ assert True} else {log.info "no match"}
//log.info myTestSuite.getTestCaseAt(i).name

}

//log.info context.expand((testRunner.testCase.testSuite.project.getPropertyValue("project")))
log.info context.expand((testRunner.testCase).name)
</script></con:config></con:testStep><con:testStep type="groovy" name="play" id="c7473b6b-4cc8-4c59-80ec-aa828feda217"><con:settings/><con:config><script>def project = context.testCase.testSuite.project;
def myTestCase = context.testCase 
def myTestSuite = context.testCase.testSuite
project.getTestSuiteAt(1).name
mySuite = project.getTestSuiteByName('Test')
log.info mySuite.getName()
//log.info "no of test suites " + project.getTestSuiteCount()
//project.getTestSuiteCount()
//testSuite = project.getTestSuiteAt(i)
//testSuite.getTestCaseAt(testCaseCount-1).name
//myTestSuite.getTestCaseAt(i).name 
//log.info myTestSuite.getTestCaseAt(i).name
//log.info context.expand((testRunner.testCase.testSuite.project.getPropertyValue("project")))
//log.info context.expand((testRunner.testCase).name)
</script></con:config></con:testStep><con:testStep type="groovy" name="test suite context from project" id="72400185-e4a7-48b3-8e94-1f6a2875df55"><con:settings/><con:config><script>def project = project.testSuites["TEST"].setPropertyValue("TIM", "hello")</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8b930114-bf54-4a00-98f4-77cac873b835" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Properties" searchProperties="true"><con:settings/><con:testStep type="groovy" name="remove properties" id="52c05868-f00a-4a65-8065-116df8d1d225"><con:settings/><con:config><script>// clear properties
String[] propToRemove = new String[project.getPropertyCount()];
propToRemove = project.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    project.removeProperty( propToRemove[i] );
	}


</script></con:config></con:testStep><con:testStep type="groovy" name="work with properties step" id="1632da7e-2a40-472c-b733-0cd250b077d0"><con:settings/><con:config><script>//set Properties step with property X and value of 1
context.testCase.getTestStepByName("Properties").setPropertyValue("X","1")</script></con:config></con:testStep><con:testStep type="groovy" name="count total and clear all" id="1159b645-706d-4118-8831-36077c3f338c"><con:settings/><con:config><script>String[] propToRemove = new String[project.getPropertyCount()];
propToRemove = project.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    project.removeProperty( propToRemove[i] );
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7915fcf3-49e8-4baa-a6e5-5e289b0a71ab" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Objects" searchProperties="true"><con:settings/><con:testStep type="groovy" name="getTestCase TestSuite Project TestStepList" id="096412d6-a7fe-4ce6-a26b-53cb00f2ac0f"><con:settings/><con:config><script>/*

Useful for understanding the different types of steps (applicable in log logic)

*/
import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)

def objGlobal = com.eviware.soapui.SoapUI.globalProperties
def objProject = testRunner.getTestCase().getTestSuite().getProject()
def objCase = testRunner.getTestCase()

log.info objCase.getTestStepList()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e749d8af-a505-4396-896a-f4cc2861a196" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Test objects from other projects suites cases" searchProperties="true"><con:settings/><con:testStep type="groovy" name="write to other project object from soap cdata response" id="ccfde1e2-4a5a-4905-873b-b629f2d3c315"><con:settings/><con:config><script>// Set variables for test case and step controls from other suites

	def project = context.testCase.testSuite.project;
	def testSuite = project.getTestSuiteByName('TEST')
	def assetSimulator = testSuite.getTestCaseByName('AssetSimulator')

// Hold the response
def response = context.response

//Closure to parse and extract the data
def getData = { data, element ->
  def pXml = new XmlSlurper().parseText(data)
  def codes = pXml.'**'.findAll { it.name() == element}  
}

// Get the cdata part
def cdata1 = getData(response, 'extaccountId')[1] as String
assetSimulator.setPropertyValue("existingUserGuid", cdata1)
</script></con:config></con:testStep><con:testStep type="groovy" name="write to other project object" id="2f2d4664-e205-48a6-b651-4b244da5a2b4"><con:settings/><con:config><script>def a = testRunner.testCase.testSuite.project.testSuites["AUTO"].testCases["Simulator"].getPropertyValue("respFileId")
def b = testRunner.testCase.testSuite.project.testSuites["AUTO"].testCases["Simulator"].getPropertyValue("respUserId")
testRunner.testCase.setPropertyValue("fileId",a)
testRunner.testCase.setPropertyValue("userId",b)</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="44948080-04e1-4c9c-b700-fbcae875e2be" name="Data Generation"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="efd9bcf8-8e78-4b0f-b788-bc6405091f82" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Data Generation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="variousRandomStuff" id="276d5f98-5389-4155-b9fa-d3c8f1b99b65"><con:settings/><con:config><script>import java.util.Random
import org.apache.commons.lang.RandomStringUtils

Random random = new Random()

// generate a random number with a prefixed string
id = "ID${random.nextInt(999999-111111)+111111}"
log.info id

// generate random char from the testChars list
testChars = ("M" + "S" + "R")
code = "${RandomStringUtils.random(1, testChars.toCharArray())}"
log.info code

// generate a random number between 1 and 9 then add a 0
months = ('1'..'9').join()
month = "0${RandomStringUtils.random(1, months.toCharArray())}"
log.info month

// define a property map to hold data eg date time stuff (instead of defining individually named properties)
def defaultData = [:]
defaultData["HH:MM:SS"] = new Date().format('HH:MM:SS')
//log.info defaultData["HH:MM:SS"]

defaultData["dateTimeDefault"] = new Date()
//log.info defaultData["dateTimeDefault"]

defaultData["strDate"] = new java.text.SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.99999999+10:30").format(new Date())
log.info defaultData["strDate"]

//defaultData["datetime"] = new java.text.SimpleDateFormat("YYYY-MM-DD").format(new Date())
//log.info defaultData["datetime"]




//2018-04-04T15:40:01.8826218+10:30
</script></con:config></con:testStep><con:testStep type="groovy" name="randomNameGenerator" id="1c9e958a-5fe4-49f3-ae2e-ad4561b3bc23"><con:settings/><con:config><script>/*
 * Basic script which combines three syllables to produce a name (then repeat to produce another name, ie First Name Last Name). 
 */

import java.util.Random
Random random = new Random()

def beginning = ["kr", "Ca", "Ra"]
def middle = ["ich", "eren", "ani"]
def ending = ["iel", "ten", "athon"]

beg = random.nextInt(beginning.size())
mid = random.nextInt(middle.size())
end = random.nextInt(ending.size())

firstName = (beginning.toSet() as List)[beg] + (middle.toSet() as List)[mid] + (ending.toSet() as List)[end]

beg = random.nextInt(beginning.size())
mid = random.nextInt(middle.size())
end = random.nextInt(ending.size())

lastName = (beginning.toSet() as List)[beg] + (middle.toSet() as List)[mid] + (ending.toSet() as List)[end]

log.info "Random Name is " + firstName + " " + lastName

testRunner.testCase.testSuite.project.setPropertyValue("FirstName", firstName)
testRunner.testCase.testSuite.project.setPropertyValue("GivenName", lastName)</script></con:config></con:testStep><con:testStep type="groovy" name="java system properties" id="539ae534-9703-4d63-9cf4-c1a87415fcd3"><con:settings/><con:config><script>/*
 * 
 *  Useful stuff to know/use when looking for system information (such as to where to get/store stuff, stuff to log, etc)
 */


// user name
String username = System.getProperty("user.name")
context.testCase.testSuite.project.setPropertyValue ("user", username)

// user home location
String userHomeFolder = System.getProperty("user.home")
context.testCase.testSuite.project.setPropertyValue ("userHome", userHomeFolder)

// java class path (useful if needing to debug whether required classes/methods are loaded)
String javaClassPath = System.getProperty("java.class.path")
context.testCase.testSuite.project.setPropertyValue ("javaClassPath", javaClassPath)

// host name (should be an easier way)
hostname = InetAddress.getLocalHost().getHostName()
context.testCase.testSuite.project.setPropertyValue ("hostname", hostname)


/*
log.info System.getProperty("user.name")
log.info System.getProperty("user.dir")
log.info System.getProperty("user.home")
log.info System.getProperty("os.arch")
log.info System.getProperty("os.name")
log.info System.getProperty("os.version")
log.info System.getProperty("path.separator")
log.info System.getProperty("file.separator")
log.info System.getProperty("java.class.path")
log.info System.getProperty("java.home")
log.info System.getProperty("java.vendor")
log.info System.getProperty("java.vendor.url")
log.info System.getProperty("java.version")


Full list of Java System Properties

Key	Meaning
"file.separator"	Character that separates components of a file path. This is "/" on UNIX and "\" on Windows.
"java.class.path"	Path used to find directories and JAR archives containing class files. Elements of the class path are separated by a platform-specific character specified in the path.separator property.
"java.home"	Installation directory for Java Runtime Environment (JRE)
"java.vendor"	JRE vendor name
"java.vendor.url"	JRE vendor URL
"java.version"	JRE version number
"line.separator"	Sequence used by operating system to separate lines in text files
"os.arch"	Operating system architecture
"os.name"	Operating system name
"os.version"	Operating system version
"path.separator"	Path separator character used in java.class.path
"user.dir"	User working directory
"user.home"	User home directory
"user.name"	User account name
*/


</script></con:config></con:testStep><con:testStep type="groovy" name="random ABN Generator" id="1093cea4-56f9-405f-80e0-a5e42908e652"><con:settings/><con:config><script>/*

ABN GENERATOR

1.Pick nine arbitrary (random) digits.
2.Put 00 in front of those digits (just temporarily).
3.Apply the weighting factor per position : 10 1 3 5 7 9 11 13 15 17 19
4.Calculate the remainder when you divide by 89.
5.Subtract that remainder from 89.
6.Add 10 to that result to get the new leftmost digits.

 */

import java.util.Random

//def abnGenerator() {
Random random = new Random()


// generate a random number with 9 digits
num = "${random.nextInt(999999999-111111111)+111111111}"
//log.info num

// append with "10"
num = "00${num}"
//log.info num

// split into chars (eg num[0], num[1],....,num[10])
num.split("(?!^)")

//apply weighing formula
sum = num[0].toInteger() *10 + num[1].toInteger()*1 + num[2].toInteger()*3 + num[3].toInteger()*5 + num[4].toInteger()*7 + num[5].toInteger()*9 + num[6].toInteger()*11 + num[7].toInteger()*13 + num[8].toInteger()*15 + num[9].toInteger()*17 + num[10].toInteger()*19
//log.info sum
sum=sum.toInteger()
remainder = sum % 89
remainder = 89 - remainder
remainder = (remainder + 10).toString()
//log.info remainder

//return abn = "${remainder}${num[2]}${num[3]}${num[4]}${num[5]}${num[6]}${num[7]}${num[8]}${num[9]}${num[10]}"
abn = "${remainder}${num[2]}${num[3]}${num[4]}${num[5]}${num[6]}${num[7]}${num[8]}${num[9]}${num[10]}"
log.info abn
//}
</script></con:config></con:testStep><con:testStep type="groovy" name="create data to a property map" id="4f55e52d-5602-4fcf-bc31-d59b1c9fbc27"><con:settings/><con:config><script><![CDATA[//
//
//	Name: Data Generator script for Data Portal
//	Author: Michael De Robertis
//	Version: V01
//	Description: 
//		V01 is the first attempt at building hard-coded and random data which will cover data needs for running through a New External User Epic. 
//		The New External User Epic includes the following Scenarios: Create User -> Register Person -> Add Security Token -> Assign Roles -> Add Folder/File Permissions -> Submit Data -> Check Data
//		As distinct from running remote library calls, all of the logic has been built directly into this script (for V01).
//		It is intended that in a future version, this logic will be better structured in respective methods/classes.  
//
//
//	How to Use: For detailed information consult the Automation Test Team	
//		1. Copy and paste as a new Data Generator Step OR Merge into your existing Data Generator Step
//		2. Map relevant / required SoapUI properties into respective components (SOAP Requests, JDBC Requests, Assertions, Other Scripts)
//
//	Conditions of Use: 
//		1. You have been Authorised by the Automation Test Team to perform a specific task to view or use or replicate or modify this artifact
//		2. You have been qualified by the Automation Test Team as having sufficient skills and experience in SoapUI
//
//	Change Log:
//		V01 15/06/2018 - first version
//
/* 
 * Data Portal Hard Coded Data (HCH)
 * 	The data generated here is hardcoded in the event of not wanting/needing to randomly generate new data.
 * 	If a property is appended with "HardCoded" it's to inform the Tester that they should use this only if it's the
 * 	actual hard coded value expected (given that this value is returned from a response). Similarly for those appended
 * 	with "Assert" are also response values but which can be used for asserting results
 */

def dataPortalHCD = [:]

	dataPortalHCD["userID"] = "tester"
	dataPortalHCD["requestSystem"] = "DP" 
	dataPortalHCD["ABNorganisation"] = "28509543616" //used my abn generator didnt check abn lookup
	dataPortalHCD["organisation"] = "MDRTest with ${dataPortalHCD["ABNorganisation"]}"
	dataPortalHCD["givenName"] = "Mdr"
	dataPortalHCD["familyName"] = "Tester" //surname
	dataPortalHCD["password"] = "passw0rd" //should generate a random value and store locally for use
	dataPortalHCD["accType"] = "AKEY"
	dataPortalHCD["acceptedTCidRequest"] = "401"	//is this a terms and conditions acceptance flag?
	dataPortalHCD["acceptedTCidAssert"] = "812"	//unsure if this is always the hard-coded response for Add Security Token Response ??	
	dataPortalHCD["termsValue"] = '<![CDATA[<!-- Managed Content Start --><p><p dir="ltr"><strong><u>TERMS OF USE</u></strong></p><p dir="ltr">Welcome to the Health Data Portal (dataportal.health.gov.au). As condition of Your use of the <strong>secure area </strong>(which requires users to log in for access) of the Health Data Portal You must agree to these Terms of Use.</p><p dir="ltr">In these Terms of Use, the terms â€œYouâ€ and â€œYourâ€ refer to the user of the Health Data Portal.</p><p dir="ltr">The Commonwealth of Australia as represented by the Department of Health (the â€˜<strong>Department</strong>â€™) may at its discretion update these Terms of Use.&nbsp; By continuing to use the Health Data Portal, You accept the Terms of Use as they apply from time to time.</p><p dir="ltr"><strong>YOUR OBLIGATIONS</strong></p><p dir="ltr">You must:</p><ol dir="ltr" style=" list-style-type: lower-alpha;"><li>only use the Health Data Portal for Your own lawful purposes, in accordance with these Terms of Use or any condition posted by the Department on the Health Data Portal, and in a manner that does not infringe the intellectual property rights of or restrict or inhibit the use and enjoyment of the Health Data Portal by any third party. &nbsp;</li><li>not re-transmit, distribute, disclose or make available any of the materials on the <strong>secure area</strong> of the Health Data Portal to any person without the written consent of an authorised person of the Department.</li><li>not attempt to undermine the security or integrity of the Health Data Portal.</li><li>not attempt to gain unauthorised access to any materials other than those to which You have been given express permission by the Department.</li><li>ensure that Your username and password required to access the Health Data Portal is kept secure and confidential at all times, and not permit any other person to use your username and password. You must immediately notify the Department of any unauthorised use of Your password or any other breach of security and You must take all other actions that the Department reasonably deems necessary to maintain or enhance the security of the Health Data Portal.</li><li>not use, or misuse the Health Data Portal in any way which may disrupt or impair the functionality of the Health Data Portal or other systems used for the Health Data Portal.</li><li>not transmit, or input via the Health Data Portal, any:<ol style=" list-style-type: lower-roman;"><li>harmful code;</li><li>unlawful, defamatory, obscene, offensive or scandalous material, or any material that constitutes or encourages conduct that would contravene any law or which may harass or cause distress or inconvenience to any person; and</li><li>material in violation of any intellectual property rights or any laws for which You do not have the right to use or transmit or input into the Health Data Portal.</li></ol></li><li><span style="font-family:helvetica,sans-serif;"><span style="font-size:10.0pt;">if You are a Primary Health Network (<strong>PHN</strong>) user -&nbsp;comply with the terms of use for the Qlik Sense Enterprise Production Site (â€˜<strong>Qlik Sense</strong>â€™) on the Health Data Portal set out below under the heading â€˜QLIK SENSEâ€™.</span></span></li></ol><p dir="ltr">Materials on the Health Data Portal may be protected by intellectual property rights. You must not use any intellectual property on the Health Data Portal for a purpose You do not have express permission from the intellectual property rights owner. If You have any doubt as to Your right to use the intellectual property, please contact its owner. The Department is not liable if You breach an ownerâ€™s intellectual property rights.</p><p dir="ltr">You remain solely responsible for complying with all applicable laws in connection to Your use of the Health Data Portal. It is Your responsibility to check that storage of, transfer and access to the materials you transmit or input via the Health Data Portal will comply with all laws applicable to You.</p><p dir="ltr">The Department may collect, use and disclose personal information about You or about third parties that You input or transmit via the Health Data Portal for the purpose of administering the Health Data Portal. The Department will handle the personal information in accordance with the <em>Privacy Act 1988</em> and relevant state and territory privacy laws.</p><p dir="ltr">By You disclosing other peopleâ€™s personal information to the Department via the Health Data Portal, You warrant to the Department that:</p><ol dir="ltr" style=" list-style-type: lower-alpha;"><li>the people to whom the personal information relates have consented to the Department collecting, using and disclosing their personal information as described in the Departmentâ€™s privacy notice located on the Health Data Portal homepage under the heading â€˜Privacy Statementâ€™; and</li><li>You have drawn to those peopleâ€™s attention that Departmental privacy notice.</li></ol><p dir="ltr">For further details about how the Department handles personal information, see also the Departmentâ€™s privacy policy at <a href="http://www.health.gov.au/internet/main/publishing.nsf/content/privacy-policy" >http://www.health.gov.au/internet/main/publishing.nsf/content/privacy-policy</a>.</p><p dir="ltr">You indemnify the Department for any loss or damage it suffers in connection with Your use of the Health Data Portal. Your liability to indemnify the Department under these Terms of Use will be reduced proportionately to the extent that any negligent or other tortious act or omission of the Department contributed to the relevant loss or damage.</p><p dir="ltr">If You:</p><ol dir="ltr" style=" list-style-type: lower-alpha;"><li>breach any of these Terms of Use or conditions posted by the Department on the Health Data Portal; or</li><li>are engaging in fraudulent immoral or illegal activities,</li></ol><p dir="ltr">the Department may, without limiting its rights, terminate Your access to the Health Data Portal or suspend for any period of time Your use of the Health Data Portal.</p><p dir="ltr"><strong>QLIK SENSE</strong> (Applicable to PHN users only)</p><p dir="ltr">If You are a PHN user, the Department will provide You with access to Qlik Sense via the Health Data Portal during the term of the Departmentâ€™s licence agreement with QlikTech Australia Pty Ltd. You may only use Qlik Sense in accordance with the licence (Qlik Sense Developer Licence or Qlik Sense Viewer Licence) You have been allocated by the Department.</p><p dir="ltr">If the Department allocates You a Qlik Sense Developer Licence, You may only use Qlik Sense:</p><ol dir="ltr" style=" list-style-type: lower-alpha;"><li>to upload, interrogate, modify and adapt datasets and create Your own dashboards and, if You so choose, share those datasets and dashboards with other PHN users and the Department; and</li><li>to access information, data and dashboards provided by, and to, the Department and other PHN users.</li></ol><p dir="ltr">If the Department allocates You a Qlik Sense Viewer Licence, You may only use Qlik Sense to â€˜viewâ€™ data in connection with the Qlik Sense dashboards on the Health Data Portal. You must not use Your Qlik Sense Viewer Licence to create, update, upload, or modify any of the data or administer any field changes to, or in connection with, the Qlik Sense dashboards.</p><p dir="ltr">You may use Qlik Sense for non-commercial purposes only.</p><p dir="ltr">You acknowledge and accept that the Department or QlikTech Australia Pty Ltd may conduct an audit of Your use of Qlik Sense via the Health Portal.</p><p dir="ltr"><strong>DISCLAIMERS</strong></p><p dir="ltr">You agree that Your use of the Health Data Portal is entirely at Your own risk, and You have made Your own assessment on the risk of use of the Health Data Portal and any materials on the Health Data Portal.</p><p dir="ltr">The Department may at any time change the content, including removal of any materials held in the Health Data Portal at its discretion and without notice.</p><p dir="ltr">You agree that material You transmit or input via the Health Data Portal may be accessed by other users who are permitted access to the material by the Department. Therefore, You should consider and assess the risk of which users will have access to material You transmit or input via the Health Data Portal before using the Health Data Portal.&nbsp;</p><p dir="ltr">The materials on the Health Data Portal may include the views or recommendations of third parties and does not necessarily reflect the views of the Australian Government or indicate a commitment to a particular course of action.</p><p dir="ltr">The Health Data Portal is not a substitute for independent professional advice and You should obtain any appropriate professional advice relevant to Your particular circumstances. The Department cannot guarantee and assumes no legal liability or responsibility for the accuracy, currency, completeness or interpretation of any of the materials on the Health Data Portal.</p><p dir="ltr">We strive to protect the materials available through the Health Data Portal. However, the Department gives no warranty in connection with the Health Data Portal and its materials and cannot guarantee that the use of the Health Data Portal and its materials will not breach intellectual property rights, will be uninterrupted or error free, that defects will be corrected, or that the Health Data Portal is free of harmful code.</p><p dir="ltr">To the maximum extent permitted by law, the Department excludes all liability and responsibility to You (or any other person) for any loss (including loss of information, data, profits and savings) or damage resulting, directly or indirectly, in connection from Your (or any other person) use of or reliance on, the Health Data Portal or its materials.</p><p dir="ltr">Where connection to a system or website outside our control compromises the objectives of the Health Data Portal, we may sever links to that website or system.</p><p dir="ltr"><strong>GENERAL</strong></p><p dir="ltr">These Terms of Use are governed by the laws of the Australian Capital Territory, Australia, and You agree to submit to the exclusive jurisdiction of the courts of the Australian Capital Territory.</p><p dir="ltr">If any of these Terms of Use are held to be invalid, unenforceable or illegal for any reason, the remaining Terms of Use will continue in full force.</p><p dir="ltr">If either party waives any breach of these Terms of Use, this will not constitute a waiver of any other breach. No waiver will be effective unless made in writing.</p></p><!-- Managed Content End -->]]]]>><![CDATA['
	dataPortalHCD["true"] = "true" //use for accepting terms, confirming certified, etc
	dataPortalHCD["emailAddress"] = "mdrtestingdirectexternaluserload@test.com.au"	
	dataPortalHCD["phoneNumber"] = "(02) 6211 2222"
	dataPortalHCD["usage"] = "HOME" // as seen in a request
	dataPortalHCD["usageAssert"] = "BUSN" //as seen in a response	
	dataPortalHCD["servicesName"] = "DEFAULT"	
	dataPortalHCD["externalAccountIdHardCoded"] = "625827643" //depending on the service might be an externalAccountID or userID
	dataPortalHCD["externalIdHardCoded"] = "JsaWjRWPF0gKjjVh5MynyJyGbFRQKo" //never likely needed here (will need to map from the Add Security Token response
	dataPortalHCD["accountTypeHardAssert"] = "SECT" //use to assert the Add Security Token Response
	dataPortalHCD["successNewPersonAssert"] = "SUCCESS_NEW_PERSON" //use for assertion
	dataPortalHCD["statusActiveAssert"] = "Active" //use for assertion

	//roles (external)
	dataPortalHCD["roleKeyDP_EXT_SUB_UPLOADER"] = "DP_EXT_SUB_UPLOADER"	
	dataPortalHCD["roleValueDP_EXT_SUB_UPLOADER"] = "Uploader of data assets for submission"		

	dataPortalHCD["roleKeyDP_EXT_SUB_REVIEWER"] = "DP_EXT_SUB_REVIEWER"
	dataPortalHCD["roleValueDP_EXT_SUB_REVIEWER"] = "Reviewer of data assets for submission"	

	dataPortalHCD["roleKeyDP_EXT_SUB_APPROVER"] = "DP_EXT_SUB_APPROVER"
	dataPortalHCD["roleValueDP_EXT_SUB_APPROVER"] = "Approver of data assets for submission"	

	dataPortalHCD["roleKeyDP_EXT_USER_ADMIN"] = "DP_EXT_USER_ADMIN"
	dataPortalHCD["roleValueDP_EXT_USER_ADMIN"] = "User Administrator"	

	dataPortalHCD["roleKeyDP_EXT_REPORT_VIEWER"] = "DP_EXT_REPORT_VIEWER"
	dataPortalHCD["roleValueDP_EXT_REPORT_VIEWER"] = "Interactive Report Viewer"	

	dataPortalHCD["roleKeyDP_EXT_REPORT_DEVELOPER"] = "DP_EXT_REPORT_DEVELOPER"
	dataPortalHCD["roleValueDP_EXT_REPORT_DEVELOPER"] = "Interactive Report Developer"	

	dataPortalHCD["roleKeyDP_EXT_SUB_PROCESSED_VIEWER"] = "DP_EXT_SUB_PROCESSED_VIEWER"
	dataPortalHCD["roleValueDP_EXT_SUB_PROCESSED_VIEWER"] = "Viewer of Processed Data in submission"	

	dataPortalHCD["roleKeyDP_EXT_SUB_RECEIVER"] = "DP_EXT_SUB_RECEIVER"
	dataPortalHCD["roleValueDP_EXT_SUB_RECEIVER"] = "Receiver of data assets for submission"	

	//roles (internal)
	dataPortalHCD["roleKeyDP_INT_SUB_UPLOADER"] = "DP_INT_SUB_UPLOADER"	
	dataPortalHCD["roleValueDP_INT_SUB_UPLOADER"] = "Uploader of data assets for submission"		

	dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"] = "DP_INT_SUB_REVIEWER"
	dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"] = "Reviewer of data assets for submission"	

	dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"] = "DP_INT_SUB_APPROVER"
	dataPortalHCD["roleValueDP_INT_SUB_APPROVER"] = "Approver of data assets for submission"	

	dataPortalHCD["roleKeyDP_INT_SUB_RECEIVER"] = "DP_INT_SUB_RECEIVER"
	dataPortalHCD["roleValueDP_INT_SUB_RECEIVER"] = "Receiver of data assets for submission"	

	dataPortalHCD["roleKeyDP_INT_PRODUCER"] = "DP_INT_PRODUCER"
	dataPortalHCD["roleValueDP_INT_PRODUCER"] = "Producer of data assets for publication"	

	dataPortalHCD["roleKeyDP_INT_REVIEWER"] = "DP_INT_REVIEWER"
	dataPortalHCD["roleValueDP_INT_REVIEWER"] = "Reviewer of data assets for publication"	

	dataPortalHCD["roleKeyDP_INT_PUBLISHER"] = "DP_INT_PUBLISHER"
	dataPortalHCD["roleValueDP_INT_PUBLISHER"] = "Publisher of data assets for publication"	

	dataPortalHCD["roleKeyDP_INT_USER_ADMIN"] = "DP_INT_USER_ADMIN"
	dataPortalHCD["roleValueDP_INT_USER_ADMIN"] = "User Administrator"	

	dataPortalHCD["roleKeyDP_INT_SEC_CAT_ADMIN"] = "DP_INT_SEC_CAT_ADMIN"
	dataPortalHCD["roleValueDP_INT_SEC_CAT_ADMIN"] = "File Permission / Security Category Administrator"	

	dataPortalHCD["roleKeyDP_INT_GROUPING_ADMIN"] = "DP_INT_GROUPING_ADMIN"
	dataPortalHCD["roleValueDP_INT_GROUPING_ADMIN"] = "Folder Administrator"	

	dataPortalHCD["roleKeyDP_INT_REPORT_VIEWER"] = "DP_INT_REPORT_VIEWER"
	dataPortalHCD["roleValueDP_INT_REPORT_VIEWER"] = "Interactive Report Viewer"	
   
	dataPortalHCD["roleKeyDP_INT_REPORT_DEVELOPER"] = "DP_INT_REPORT_DEVELOPER"
	dataPortalHCD["roleValueDP_INT_REPORT_DEVELOPER"] = "Interactive Report Developer"	

	dataPortalHCD["roleKeyDP_INT_REPORTING_ROUND_ADMIN"] = "DP_INT_REPORTING_ROUND_ADMIN"
	dataPortalHCD["roleValueDP_INT_REPORTING_ROUND_ADMIN"] = "Reporting Round Administrator"	

	dataPortalHCD["roleKeyDP_INT_ORGANISATION_ADMIN"] = "DP_INT_ORGANISATION_ADMIN"
	dataPortalHCD["roleValueDP_INT_ORGANISATION_ADMIN"] = "Organisation Administrator"	

      

















	
	]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="be4325dc-280d-40e8-9108-b8a8c9ce6249" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Random" searchProperties="true"><con:settings/><con:testStep type="groovy" name="random number" id="b1f2cdec-359a-4dc0-90b3-2f8bb5c1e171"><con:settings/><con:config><script>Random random = new Random()
String ranNum = "${random.nextInt(212-13)+13}"</script></con:config></con:testStep><con:testStep type="groovy" name="random character" id="86c2ba8f-2ef0-451a-b2a2-faf304a41c77"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils
testChars = ("M" + "S" + "R" + "A" + "X" + "H")
sample2 = "${RandomStringUtils.random(1, testChars.toCharArray())}"
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="7675cfb6-930b-41dc-93c7-9469a2013321" name="Selenium"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ca99c4e9-d5c0-48d6-bdf1-e4edccee153e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Selenium play" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="1af2f2f0-b2dc-4362-a085-bec694074a01"><con:settings/><con:config><script>import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
//import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.ie.InternetExplorerDriver;

/*
try {
    log.info("create FirefoxDriver object");
    WebDriver driver;
    driver = new FirefoxDriver();
    driver.get("http://www.google.com");
} catch (Exception e) {
    log.error(e.message);
    driver = null;
}
*/

try {
    log.info("create ChromeDriver object");
    WebDriver driver;
    System.setProperty("webdriver.chrome.driver", "C:\\tools\\ChromeDriver\\chromedriver.exe");
    driver = new ChromeDriver();
    driver.get("http://www.google.com");
} catch (Exception e) {
    log.error(e.message);
    driver = null;
}

/*
try {    
    log.info("create InternetExplorerDriver object");
    WebDriver driver;
    //System.setProperty("webdriver.ie.driver", "C:\\DevTools\\Selenium\\IEDriverServer.exe");    
    driver = new InternetExplorerDriver();
    driver.get("http://www.google.com");    
} catch (Exception e) {
    log.error(e.message);
    driver = null;
}
*/</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="52fab6e3-14b3-4c4d-9b36-3820aaabbaab" name="Simulators and Datadrivers (historical)"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="941c833c-8846-4809-85f3-700ac968b96f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Simulator Template V01" searchProperties="true"><con:settings/><con:testStep type="groovy" name="initiate" id="1240007c-b33c-4470-a59f-b301e053fd19"><con:settings/><con:config><script>// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// read the csv file location
def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 

// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	// read the csv file
	def f = new File (csvLocation)
	
	// count the rows to determine scope/quantities
	List r = f.readLines()
	rows = r.size.toInteger()

	// set the number of tests (and number of rows)
	testRunner.testCase.setPropertyValue("numberOfRows", rows.toString())
	testRunner.testCase.setPropertyValue("numberOfTests", (rows-1).toString())
	log.info "Number of tests in csv file " + f + " has been stored in readiness for execution"

	// initialise the counters for csv 
	testRunner.testCase.setPropertyValue("Stop", "F") //check if correct
	testRunner.testCase.setPropertyValue("testCounter", "1")
	testRunner.testCase.setPropertyValue("nextTestCounter", "2")

	
	break;
}


	testRunner.testCase.testSuite.project.getMockServiceByName("LocalMockService").start() //start the mock service
	testRunner.testCase.setPropertyValue("endpoint", "http://localhost:591/")
	//data["propEndpoint1"] = data["propEndpoint2"] = data["propEndpoint3"] = data["propEndpoint4"] = data["propEndpoint5"] = "http://localhost:591/" //set the endpoints to the mock service


sleep 2000


</script></con:config></con:testStep><con:testStep type="groovy" name="read" id="fb3dc1c1-0f9d-4470-8adc-0c4c0bf4e8e2"><con:settings/><con:config><script>// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// read the csv file location
def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 

// get the counters
def testCounter = (testRunner.testCase.getPropertyValue("testCounter")).toInteger()
def nextTestCounter = (testRunner.testCase.getPropertyValue("nextTestCounter")).toInteger()


// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	
	// read the csv file
	def f = new File (csvLocation)
	
	// read the lines
	List r = f.readLines()

	// store the row
	String[] testInput = r[testCounter].split(',')

	/* 
	 *  CRITICAL REQUIREMENT
	 *  the list of properties here need to align with your csv file
	 */

	// map the row into properties(using matching names for readability)
	def testID = testInput[0]
	def testObjective = testInput[1]
	def testEnvironment = testInput[2]
	def application = testInput[3]

	//def user = testInput[3] // property called "user" represents an array of rows at position 3 (Column D, hence column named "User")
	//def password = testInput[4] // property called "password" represents an array of rows at position 4 (Column E, hence column named "Pwd")


	// store into soapui properties
	testRunner.testCase.setPropertyValue("TestID", testID)
	testRunner.testCase.setPropertyValue("TestObjective", testObjective)
	testRunner.testCase.setPropertyValue("Application", application)

	//testRunner.testCase.setPropertyValue("Username", user) //map property "user" to SoapUI Test Case Property "Username"
	//testRunner.testCase.setPropertyValue("Password", password) //map property "password" to SoapUI Test Case Property "Password"


	// create a property which describes the test (and then that property can be used inthe data sinc for example)
	def currentTest = "ID: " + testID + " " + "Objective: " + testObjective + "App: " + application
	log.info currentTest
	break;
}

/*
 * 
 * TO DO - this is a good stage for:
 * 	setting up properties for a datasinc (ie to record pre-execution status)
 *	OR alternatively, save properties to a file (as the pre-execution status)
 * 	
 * 	After debugging for correctness, remove old log.info checks	
 */

 sleep 2000
	
</script></con:config></con:testStep><con:testStep type="groovy" name="set" id="1c912df5-638c-4939-9b2b-71b8d1b7e726"><con:settings/><con:config><script>// based on the test being executed, enable/disabled required steps and assertions

// enable all steps (as a default, starting position)
context.testCase.testSuite.getTestCaseList().each {
    it.testStepList.each 
    	{
    		if( it.disabled) { it.setDisabled(false); log.info "All steps enabled by default"} } };log.info ""


// disable any steps that are not required for this test
/*
 * 	For an immature version, your simulator might be quite basic and consist only of a few or single services. Hence the concept of turning stuff off will likely not apply.
 * 		However for a more complicated setup which has multiple service calls, and for which some are optional (depending on the test), scripting below will need
 * 			some logic to cater for this. 
 * 			
 * 			Process:
 * 			1. Read in soapui properties for the test inputs
 * 			2. Run if/switch logic on that input
 * 			3. Enable / Disable stuff
 * 	//context.testCase.getTestStepByName("STEP1").getAssertionByName("Assert1").disabled = true
 *	//context.testCase.getTestStepByName("DummyStep1").setDisabled(true)
 *
 * 
 */
 //context.testCase.getTestStepByName("log").setDisabled(true)

 sleep 2000</script></con:config></con:testStep><con:testStep type="groovy" name="data" id="6904c60d-70d4-4c72-b3fc-91dd217f2793"><con:settings/><con:config><script>// as per the "set" step, the conditions of the test being executed will drive what data is generated (for mapping into SOAP/REST/JDBC/ASSERTIONS etc)
/*
 * During early/immature stages, the simulator will require you to generate the data you need and to do the step mapping.
 * 	However a future version will consist of a data generator template which mimicks all of the possible data generation combinations, and
 * 		which enables the Tester to port/copy into their framework
 * 	

 * 			Process:
 * 			1. Read in soapui properties for the test inputs
 * 			2. Run if/switch logic on that input
 * 			3. Create Data
 * 			
 */
 
 
 /*
  *  eg data below
  */

import java.util.Random
import org.apache.commons.lang.RandomStringUtils

Random random = new Random()

sample1 = "ID${random.nextInt(999999-111111)+111111}"
testChars = ("M" + "S" + "R" + "A" + "X" + "H")
sample2 = "${RandomStringUtils.random(1, testChars.toCharArray())}"
testRunner.testCase.setPropertyValue("SampleTestDataItem1", sample1)
testRunner.testCase.setPropertyValue("SampleTestDataItem2", sample2)

//
//
//
// SOAP / REST / JDBC STUFF GOES AFTER THIS POINT
//
//
//

sleep 2000
</script></con:config></con:testStep><con:testStep type="request" id="e64b54da-1a7c-449a-b3e2-4f18c7246152" name="SubmitDummyData"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MDRDataServiceSoap</con:interface><con:operation>SubmitDummyData</con:operation><con:request name="SubmitDummyData" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="5bf2460b-ae10-43d4-8b45-08777b43db4c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:imp="http://improve.org.au/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <imp:SubmitDummyData>\r
         <!--Optional:-->\r
         <imp:DummySummaryData>\r
         	<dummy1>${#TestCase#SampleTestDataItem1}</dummy1>
         	<dummy2>${#TestCase#SampleTestDataItem2}</dummy2>
         </imp:DummySummaryData>\r
      </imp:SubmitDummyData>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="1914c457-f086-4e46-95ce-ccc939abb986" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://improve.org.au/SubmitDummyData"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="log" id="a0697bed-2bb1-4889-a0ce-f837e675ca95"><con:settings/><con:config><script><![CDATA[import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)
//import org.apache.commons.lang.RandomStringUtils
//fn to manage props
	def getMyPropertiesLocal = {propertyLocation, mapToCreate
		->
		for (prop in propertyLocation.getPropertyList()) {
			propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
			mapToCreate[prop.getName()] = propertyMapValue}}
	
	def saveToPropertiesLocal = {propertyLocation, mapToSave
		->
		mapToSave.each {propertyName,	propertyValue
			->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }}
// init stuff
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase()
	def strSoapTestCase = objCase.name; def strLogGlobal = ''; strLogProject = ''; strLogCase = ''; strLogStep = ''
	def data = [:]
	def testConditions = [:]; getMyPropertiesLocal(testRunner.testCase.testSuite, testConditions)
	def testDataLog = [:]; getMyPropertiesLocal(testRunner.testCase.testSuite, testDataLog)
	def projectLocation = testRunner.testCase.testSuite.project.getPropertyValue("projectLocation")
	data["dateTime3"] = new java.text.SimpleDateFormat("yyyyMMddHHmmsss").format(new Date())	
	data["dateTime2"] = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())
	data["systemUser"] = "tester"; data["systemHost"] = "TESTMACHINE"
	data["dateTime1"] = new java.text.SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.99999999+10:30").format(new Date())
	
	def strPath = "${projectLocation}\\log\\${data["dateTime2"]}\\${testConditions["propEnvironment"]}\\"
	//def strLogProps = "PROPERTIES_${strSoapTestCase}_${testConditions["propEnvironment"]}_${data["systemUser"]}_${data["systemHost"]}_${data["dateTime3"].substring(0,8)}.txt"
	def testSuite = context.expand((testRunner.testCase.testSuite).name)
	intLog = 1 // move to properties file in future, 1 = request/responses only, 2 = all, need a 0 option

// as per ML original script with some mods -:)

// Loop through steps and log when the step has been enabled
def step = objCase.getTestStepList()
step = objCase.getTestStepList()
        step.each {
        	if (!it.disabled){
                if ((it instanceof WsdlRunTestCaseTestStep) || (it instanceof WsdlPropertiesTestStep)){
        
                    // Requires intLog = 2
                    if (intLog != 1){
                        //Properties
                        def prop = it.getPropertyList()
                        //loop through the list of testStep properties and log as required
                        prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
                        new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -TestCase  +  TestStep]:,${strLogCase}${strLogStep}")}
                } 
                if (it instanceof WsdlTestRequestStep){
                //else if (it instanceof WsdlTestRequestStep){

                    //Get Request (will be xml if not jms)
                    if (it.getTestRequest().getRequestContent().substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"}
                    // new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.${strExt}")
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${data["systemUser"]}_${data["systemHost"]}_${data["dateTime3"]}.${strExt}")
                        .append(context.expand(it.getTestRequest().getRequestContent()))
                    
                    //Get Response if exists (will always be xml)
                    if (it.getTestRequest().getResponseContent() != null){
					//new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.xml")
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${data["systemUser"]}_${data["systemHost"]}_${data["dateTime3"]}.xml")
                            .append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //SOAP Endpoint and Assertion
                    if (intLog != 1){ 
                         new File("${strPath}").mkdirs();new File("${testConditions["propWorkingFolder"]}\\log\\","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -Endpoint + Assertions]:,StepName=${it.name},Endpoint=${context.expand(it.getTestRequest().getEndpoint())},SOAPAssertion=${context.expand(objProject.getPropertyValue("svSoapAssertion"))}")
                    }
                } 

                else if (it instanceof JdbcRequestTestStep){ //OS... add "|| (it instanceof ProJdbcRequestTestStep)" for PRO 
                    //Request
                     //new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.sql")
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${data["systemUser"]}_${data["systemHost"]}_${data["dateTime3"]}.sql")
                        .append(context.expand(it.getQuery().replaceAll(/\n/,'\r\n')))
                    //Response
                    if (it.getResponseContent().contains("<Row>")){ 
                         //new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.xml")
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //JDBC Connection String and  Assertion
                    if (intLog != 1){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -ConnStr  + Assertions]:,StepName=${it.name},ConnectionString=${context.expand(it.getConnectionString().replaceAll('/.+@/','/PASS_VALUE@/'))},JDBCAssertion=${context.expand(objProject.getPropertyValue("dbJdbcAssertion"))}")

                    }
                }

            }
        }

//if (test["propMock"] == "on"){
//	testRunner.testCase.testSuite.project.getMockServiceByName("LocalhostMock").stop()
	


// Generate the Results Log
def propsFile = "Results-${testSuite}-${data["systemUser"]}-${data["systemHost"]}-${data["dateTime2"]}.csv" //csv properties file
//new File("${projectLocation}\\log\\","${propsFile}").append('\r\n' + "Time:${testConditions["dateTime3"]}, ${strSoapTestCase}${testConditions["testCounter"]}, ${testConditions["TestID"]}, ${testConditions["TestObjective"]}, ${testDataLog}")
new File("${projectLocation}\\log\\","${propsFile}").append('\r\n' + "Time:${data["dateTime1"]}, ${strSoapTestCase}${testConditions["testCounter"]}, ${testConditions["TestID"]}, ${testConditions["TestObjective"]}, ${testDataLog}")
log.info "I MADE IT TO THE END OF LOG"
sleep 2000]]></script></con:config></con:testStep><con:testStep type="groovy" name="loop" id="1282f877-84f7-4e31-b784-16091446ecce"><con:settings/><con:config><script>// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// get current counter positions
numberOfRows = testRunner.testCase.getPropertyValue("numberOfRows").toInteger()
numberOfTests = testRunner.testCase.getPropertyValue("numberOfTests").toInteger()
testCounter = testRunner.testCase.getPropertyValue("testCounter").toInteger()
nextTestCounter = testRunner.testCase.getPropertyValue("nextTestCounter").toInteger()

// log an update to screen
log.info "Test ${testCounter} was completed"

// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	
	// increment the counter (as the test has already been executed)
	testCounter = testCounter + 1
	nextTestCounter = nextTestCounter + 1
	testRunner.testCase.setPropertyValue("testCounter", testCounter.toString())
	testRunner.testCase.setPropertyValue("nextTestCounter", nextTestCounter.toString())

	// check if at the end of the test list
	if (testCounter > numberOfTests) {
		testRunner.testCase.setPropertyValue("Stop", "T")
		testRunner.testCase.testSuite.project.getMockServiceByName("LocalMockService").getMockRunner().stop() 
		//project.getMockServiceByName("mymockservice")getMockRunner().stop()		
		//no loop
		assert true}
	else {
		testRunner.testCase.setPropertyValue("Stop", "F")
		//need to continue the loop

		sleep(1000) //temp delay to see logic
		testRunner.gotoStepByName("read")}
	break;
}</script></con:config></con:testStep><con:setupScript>import com.eviware.soapui.support.UISupport
import groovy.swing.SwingBuilder
import java.awt.FlowLayout as FL  // **LOOKS LIKE THIS IMPORT IS NOT WORKING***
import javax.swing.BoxLayout as BXL

// Building the SwingBuilder GUI here but not invoked unless "GUI" is selected (see testStrategy switch logic)

// TURNED OFF BECAUSE OF IMPORT ISSUE
		
def s = new SwingBuilder()
s.setVariable('myDialog-properties',[:])
def vars = s.variables
	/*
def gui = s.dialog(title:'Test Plan',size:[500,500],modal:true)
	
	{
	panel() {
		boxLayout(axis:BXL.Y_AXIS)

		//project
		panel(alignmentX:Of) {
			flowLayout(alignment:FL.LEFT)
			label('Project')
			textField(id:'project',columns:20)}
			
		//test environment
		panel(alignmentX:Of) {
			flowLayout(alignment:FL.LEFT)
			label('TestEnvironment')
			textField(id:'testEnvironment',columns:20)}
		
		//application
		panel(alignmentX:Of) {
			flowLayout(alignment:FL.LEFT)
			label('Application')
			application = comboBox(items:["MyApp1", "MyApp2", "MyApp3"], selectedIndex:0)}
			}
	}
	*/	

//UISupport.showInfoMessage("Test Strategy Example")
String testStrategy = UISupport.prompt("Select the data source for running your Test Plan.","Test Strategy","csv", "GUI", "Database")
testRunner.testCase.setPropertyValue("testStrategy", testStrategy)

switch(testStrategy) {
	case "GUI":
	// display the SwingBuilder GUI, read inputs, and write to soapui properties
	gui.show()
	testRunner.testCase.testSuite.project.setPropertyValue("Project", vars.project.text)
	testRunner.testCase.testSuite.project.setPropertyValue("Environment", vars.environment.text)
	testRunner.testCase.testSuite.project.setPropertyValue("Application", application.getSelectedItem())	

	break;
	case "csv":
	String csvLocation = UISupport.prompt("Enter the full path and location of your csv file","", "\\\\central.health\\dfsuserenv\\Users\\User_01\\DEROBM\\Documents\\soapui\\projects\\concepts\\testplan.csv")
	testRunner.testCase.setPropertyValue("csvLocation", csvLocation)
	case "Database":
	log.info "" //do nothing here (covered in the simulator test case step)
	break;
}</con:setupScript><con:properties><con:property><con:name>testStrategy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">csv</con:value></con:property><con:property><con:name>csvLocation</con:name><con:value>\\central.health\dfsuserenv\Users\User_01\DEROBM\Documents\soapui\projects\concepts\testplan.csv</con:value></con:property><con:property><con:name>numberOfRows</con:name><con:value>6</con:value></con:property><con:property><con:name>numberOfTests</con:name><con:value>5</con:value></con:property><con:property><con:name>Stop</con:name><con:value>T</con:value></con:property><con:property><con:name>testCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>nextTestCounter</con:name><con:value>7</con:value></con:property><con:property><con:name>TestID</con:name><con:value>5</con:value></con:property><con:property><con:name>TestObjective</con:name><con:value>My name is Frank</con:value></con:property><con:property><con:name>Application</con:name><con:value>MyApp4</con:value></con:property><con:property><con:name>SampleTestDataItem1</con:name><con:value>ID963933</con:value></con:property><con:property><con:name>SampleTestDataItem2</con:name><con:value>X</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>http://localhost:591/</con:value></con:property></con:properties></con:testCase><con:testCase id="2602c027-2aa8-4ff8-8abf-57391cd9bd85" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="jxlDataDriver" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Use JXL to read from excel data source into &quot;Properties&quot;" id="f43590d0-8d54-4c69-b745-f24d10872d24" disabled="true"><con:settings/><con:config><script>/*
 * 
 * 
 *  Initial Conditions : 
 *  	Set a property rowCounter = 0
 *  	Define an excel source eg dataSource
 *  	**REQUIRES THE JXL JAR FILE**
 */


import java.io.File
import jxl.*
import jxl.write.*
 
// set the property step
propertyStep = context.testCase.getTestStepByName("Properties")

// get the rowCounter value from the property step and convert to integer
rowCounter = propertyStep.getPropertyValue("rowCounter").toInteger()
//log.info rowCounter

// get the data source and convert to string
dataSource = propertyStep.getPropertyValue("dataSource").toString()
log.info dataSource

//Workbook myWorkbook = Workbook.getWorkbook(new File ("dataSource"))
Workbook myWorkbook = Workbook.getWorkbook(new File ("\\\\central.health\\dfsuserenv\\Users\\User_01\\DEROBM\\Documents\\Michael\\soapui\\projects\\edw\\tmp\\Temp.xls"))
//wb = Workbook.getWorkbook(new File('c:/Temp/Temp.xls'))

WritableWorkbook workbook = Workbook.createWorkbook(new File("c:\\Temp\\output.xls"))
WritableSheet sheet = workbook.createSheet("Worksheet 1", 0)
//log.info(sheet.isHidden())
Label label = new Label(0, 2, "Test data in Column A, Row 3"); //column=0=A,row=0=1
sheet.addCell(label);
Label label1 = new Label(2, 2, "Column C, Row 3");
sheet.addCell(label1);
workbook.write()
workbook.close()
</script></con:config></con:testStep><con:testStep type="groovy" name="jxl_2" id="b1dac6a9-f107-4e3c-9abc-1eee661d2bed" disabled="true"><con:settings/><con:config><script>/*
 * 
 * 
 *
 */
  

import java.io.File
import jxl.*
import jxl.write.*
 
Workbook myWorkbook = Workbook.getWorkbook(new File ("c:/Temp/Temp.xls"))
workbook = Workbook.createWorkbook(new File("c:/Temp/Temp.xls"), myWorkbook)
sheet = workbook.getSheet(0)

(1 .. sheet.getRows()).each {
 row ->

 xml = new XmlParser().parseText(base_xml)

 log.info 'new xml'


}</script></con:config></con:testStep><con:testStep type="groovy" name="datadriver" id="a6f7b76f-7349-4e50-9155-cb41656ffd2c"><con:settings/><con:config><script>/*
* 
// Script : DataSourceDriver
// Author : Michael De Robertis
// Version : DataSourceDriver.2.0
// Objective : 
//            1.0: This script enables data to be read from an excel file for application as a data source step. The script uses jxl to invoke excel control,
//            and cylces through contents of the specified worksheet, and stores cell values into properties defined in the properties step. This script should
//            be used in open source versions of SoapUI whereby data driven testing via an excel spreadsheet is required 
//            NOTE:
//            1)This script only sets the excel data sheet to the properties step, it does not do the looping. Refer to script call "DataLoop"
//            2) Set the default value of Count in the Properties to be on the first data row (eg 0 if row 1, 5 if row 6)
//            
//            1.1: Added TestCase and TestDescription properties
//            1.2: Parameterised Home Path and Data Source Properties
//            
//            2.0: Major upgrade. Features include: 
/*   Paremeterised data source to the project property, 
 *            Added a property which counts the number of columns and used this to set a maximum value for looping
*            Set properties to be a loop of the first row through to the maximum column number
*            Use maximum column number to do looping for getCell getContents, and setPropertyValue
*            All these updates now enable one generic DataSourceDriver to be applied, and one generic data properties step built by the datasource driver + default properties used for looping
*            Renamed data properties step to a generic name "DataProperties"
*            NOTE - this version requires the test case name to be set to the same name as the data excel source sheet 
 *            
 *            TO DO
*            Add local prefix letters to the properties in DataProperties step which are used for looping (ie those not coming from the external properties
*/


//import libraries
import com.eviware.soapui.support.XmlHolder
import jxl.* // jxl is an open source java api enabling read write and modificaiton of excel spreadsheets
import jxl.write.*

//declare variables used for storing number of rows/columns and for looping through each row/column
def rows, columns, rowCounter, columnCounter, nextRow, nextColumn 

// set context to current test case and store in variable
def myTestCase = context.testCase 

// setting variables for using excel workbook and sheet calls
def homepath = context.expand( '${projectDir}' )
//log.info "Homepath : ${homepath}"

// store a name for the test case and use it to get the excel worksheet 
def soapTestCaseName = (context.expand((testRunner.testCase).name)) //if the test case name is not = excel worksheet name test execution will fail

// store a name for the data source properties step
def dataSourcePropertiesStep = (context.expand((testRunner.testCase.getTestStepAt(context.currentStepIndex +1)).name))

// get data source name from project properties 
def dataSourceName = context.expand ('${#TestCase#dataSourceName}')

// define excel workbook as the data source
Workbook myWorkbook = Workbook.getWorkbook(new File("${homepath}\\${dataSourceName}")) //data source file work

//Sheet mySheet = myWorkbook.getSheet("${dataSourcePropertiesStep}") //if the Data Properties name is not = excel worksheet name test execution will fail
Sheet mySheet = myWorkbook.getSheet("${soapTestCaseName}")
// store the number of rows
rows = mySheet.getRows().toInteger() 

// get name of the test step for properties
propertyStep = myTestCase.getTestStepByName("${dataSourcePropertiesStep}") 

// set the total number of rows into properties
propertyStep.setPropertyValue("Rows", rows.toString()) 

// set the rowCounter to the value stored in the Property (defaulted to 5 and then as per the incremented value)
rowCounter = propertyStep.getPropertyValue("RowCount").toString()
rowCounter = rowCounter.toInteger() // convert rowCounter to integer
nextRow = (rowCounter > rows-2? 1: rowCounter+1) //set next to rowCounter + 1 if the value of rowCounter is not greater than rows - 2, otherwise start at row 5 (row number 6)

// setting up a per row loop across every column
columns = mySheet.getColumns().toInteger() //maximum number of columns
propertyStep.setPropertyValue("Columns", columns.toString()) //store to properties (not really required) 

//set the excel heading as the project property, set the value in that heading column for the current row, and loop to the last column
for (int j = 0; j &lt; (columns); j++) {
propertyStep.setPropertyValue (mySheet.getCell(j,4).getContents(),mySheet.getCell(j, rowCounter).getContents())}

// Set the next count values for rows into the relevant property
propertyStep.setPropertyValue("RowCount", nextRow.toString())

// Logic to check if at the last row or not and to set a stop loop value of yes or no accordingly. The DataSource loop step will then loop back or not as per the value set
if (rowCounter == rows - 1) {
                propertyStep.setPropertyValue("Stop", "T")}

else if (rowCounter == 0){
                def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
                propertyStep.setPropertyValue("Stop", "F")}

else {     
                propertyStep.setPropertyValue("Stop", "F")}
</script></con:config></con:testStep><con:testStep type="properties" name="jxlDataDriver" id="d3fd1969-0d64-4af7-9ba4-312332d486c2"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>rowCounter</con:name><con:value>0</con:value></con:property><con:property><con:name>dataSource</con:name><con:value>C:\\Temp\\testfiles\\dataSource.xlsx</con:value></con:property><con:property><con:name>RowCount</con:name><con:value>1</con:value></con:property><con:property><con:name>Rows</con:name><con:value>19</con:value></con:property><con:property><con:name>Columns</con:name><con:value>2</con:value></con:property><con:property><con:name>CHCKD_IMMUNSNG_PRVDR_NMBR</con:name><con:value>LST_PRCSSNG_EPSDE_DT</con:value></con:property><con:property><con:name>Checked provider number</con:name><con:value>Last processing date for episode</con:value></con:property><con:property><con:name>Stop</con:name><con:value>T</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="dataloop" id="f3d3356e-b0d5-485b-8a1b-2adcd55fba61"><con:settings/><con:config><script>//
// Script : DataSourceLoop
// Author : Michael De Robertis
// Date : 30/08/2016
// Version : 2.0
// Objective : 
//            DataSourceLoop.1.0 - This script checks for a true or false value and stops or loops back to the datasource driver accordingly
//            DataSourceLoop.2.0 - Parameterised, usable for all test cases

def myTestCase = context.testCase // set the context

// define variable to store name of data source properties
def dataSourceProperties = (context.expand((testRunner.testCase.getTestStepAt(context.currentStepIndex -1)).name))

propertyStep = myTestCase.getTestStepByName("${dataSourceProperties}") // store property step (future version will refer to the type of test step not the actual name)

endLoop = propertyStep.getPropertyValue("Stop").toString() // get stop value

//check if stop value matches that set as true in the data driver step

if (endLoop.toString() == "T")
{
                
                assert true
                                                
}

// if not then go back to the data driver step

else
{
                testRunner.gotoStepByName("datadriver")
                
}
</script></con:config></con:testStep><con:properties><con:property><con:name>dataSourceName</con:name><con:value>mappingData.xls</con:value></con:property></con:properties></con:testCase><con:testCase id="a42d298c-a41e-482d-a0da-491d7366cebd" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CoreSimulatorV04" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:description>This version is up to date with work done for dataportal POC to 14/08/2018, which includes completion of a working end to end simulator for ORG, USER, and B2G Asset Submission. Also incorporates working logic for logging of request/response messages, properties, and results log
SOAP, JDBC, and Customised Steps existent in the source dataportal test have been removed and replaced with the manual test step 
</con:description><con:settings/><con:testStep type="groovy" name="initiate" id="0787ea55-caa3-4f0d-975c-90a3de7ed319"><con:settings/><con:config><script>/*
 *  Initiate Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which reads csv file and does quantity counts for building the loop
 *  	
 *  V02 18/06/2018 :
 *  	Added functionality to read from a properties file. As distinct from the test plan csv, this is where env properties will be stored. 
 *  		A future version will have switchability (ie to a Test DB) 
 *  	
 *  	Originally added then removed functionality to read from the properties file. Now moved into Test Case startup script (to improve library loading)
 *  	from 04/07/2018 - Cleanup (comments for future updates not being maintained here)
 *  		
 *  
*/

//*********************************************************
// read inputs (test strategy selection, csv file location)
//*********************************************************
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")
def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 
//csvLocation = ("\\" + csvLocation).toString()
def logger

//******************************************
// apply logic for csv or Database selection
//******************************************
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;
	case "csv":
	// read the csv file and count rows to determine scope/quantities
	def f = new File (csvLocation);List r = f.readLines();rows = r.size.toInteger()

	// set the number of tests (and number of rows)
	testRunner.testCase.setPropertyValue("numberOfRows", rows.toString());testRunner.testCase.setPropertyValue("numberOfTests", (rows-1).toString())
	logger = "The number of tests in csv file " + f + " has been stored in readiness for execution"

	// initialise the counters for csv 
	testRunner.testCase.setPropertyValue("Stop", "F");testRunner.testCase.setPropertyValue("testCounter", "1");testRunner.testCase.setPropertyValue("nextTestCounter", "2")
	break;
}

//***************
//Update Logger
//***************
testRunner.testCase.setPropertyValue("001_initiate", "${logger}. Initilisation completed and counters set")</script></con:config></con:testStep><con:testStep type="groovy" name="read" id="d1c4c76c-c71f-4d30-92c3-1ef8ff71152f"><con:settings/><con:config><script>/*
 *  Read Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which reads a DEMO csv file and maps into soapui properties for consumption. User will need to customise for their application
 *  	This version also commenced the creation of a property which could be used for a future data sinc
 *	
 *  V02 20/06/2018
 *  	Customising for the first POC (Data Portal User Simulator)
 *  	
 *  V03 28/06/2018
 *   Customising for Data Portal Asset Simulator (replacing previous customisation)
 *  	from 04/07/2018 - Cleanup (comments for future updates not being maintained here)
 */

//*****************
// Get the Library
//*****************
def core = testRunner.testCase.getPropertyValue("propCore")
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
def script = testRunner.testCase.getPropertyValue("propScript") 
scripts = core.testSuites["${script}"]

// call the function to manage properties
scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)


//***********************************
// Define property maps to store data
//***********************************
def test=[:]

//*****************************************************************************
// read inputs (test strategy selection, csv file location, test case counters)
//*****************************************************************************
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy");def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 


//*******************************************
// apply logic for csv or Database selection
//*******************************************
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;
	case "csv":
	def testCounter = (testRunner.testCase.getPropertyValue("testCounter")).toInteger();def nextTestCounter = (testRunner.testCase.getPropertyValue("nextTestCounter")).toInteger()
	// read the csv file, csv lines, and store the row
	def f = new File (csvLocation); List r = f.readLines(); String[] testInput = r[testCounter].split(',')

	// core mappings from data source (ie need to align with your csv / data source otherwise your test setup will be incorrect)
	test["TestID"] = testInput[0]; test["TestObjective"] = testInput[1]; test["TestEnvironment"] = testInput[2]; test["Application"] = testInput[3]

	// customised mappings from data source (ie need to align with your csv / data source otherwise your test setup will be incorrect)
	test["testAssetChangeType"] = testInput[4];	test["testAssetType"] = testInput[5]
	test["testAssetAction1"] = testInput[6]; test["testAssetAction2"] = testInput[7]; test["testAssetAction3"] = testInput[8];test["testAssetAction4"] = testInput[9]; test["testAssetAction5"] = testInput[10]; test["testAssetAction6"] = testInput[11]
	test["testRoles"] = testInput[12]; test["testGroupings"] = testInput[13]; test["testGroupAction"] = testInput[14]; ; test["testOrg"] = testInput[15]	

	//******************************************************
	// Save Data to Test Case Properties and update logging
	//******************************************************
	context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, test)

	//******************
	// Logging update
	//******************
	// create a test descriptor (for logging etc), includes customisations
	def currentTest = "ID: " + test["TestID"] + " " + "Objective: " + test["TestObjective"] + "App: " + test["Application"] 
	//+ " Asset Change Type: " + test["testAssetChangeType"] + " User Roles: " + test["testRoles"] + " Groupings: " + test["testGroupings"] + "Org : " + test["testOrg"]
	testRunner.testCase.setPropertyValue("002_read", currentTest + " has been loaded")
	break;}</script></con:config></con:testStep><con:testStep type="groovy" name="set" id="a0f8d4c3-364b-43b4-8e6f-e5308fe6523b"><con:settings/><con:config><script>/*
 *  Set Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which counts through each step and turns them all on by default.
 *  	This version is not using a libary call. A Future version will do this
 *  	
 *  V02 19/06/2018 :
 *  Added library calls and used to enable all steps
 *  
 *  V03 28/06/2018
 *   Customising for Data Portal Asset Simulator (replacing previous customisation)
 *  	from 05/07/2018 - Cleanup (comments for future updates not being maintained here)
 */
//*****************
// Get the Library
//*****************
def core = testRunner.testCase.getPropertyValue("propCore")
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
def script = testRunner.testCase.getPropertyValue("propScript") 
scripts = core.testSuites["${script}"]
scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)

//****************************
// Enable All steps by default
//****************************
scripts.testCases["automation-v1"].testSteps["ManageTestCaseSteps"].run(testRunner, context)
context.ManageTestCaseSteps.enableAllSteps(context.testCase)
def setLogger = "Steps have been disabled by default. "

//*************************************************************************
// Get Test Conditions
// use testConditions property map and get existing test case properties, 
//	which will include testing conditions
//*************************************************************************
def testConditions = [:] // Map to store test conditions 
//testConditions["testAssetType"] = testRunner.testCase.getPropertyValue("testAssetType")   // *** REMOVE AFTER TESTING E2E *****
context.ManageSoapUIProperties.getMyProperties(testRunner.testCase, testConditions)


//*****************************************
// Apply Data Logic For Asset Types
//	Currently handling B2G only
//	To do - integrate non-Indigenous
//	for Publications Workflow
//*****************************************

// When the Asset Type is B2G
if (testConditions["testAssetType"] == "B2G") { }
else if (testConditions["testAssetType"] == "ForPublication") { context.testCase.getTestStepByName("saveB2GDataAsset").setDisabled(true) }
else if (testConditions["testAssetType"] == "") { 
		// turning off Asset steps when no type set
	context.testCase.getTestStepByName("custom").setDisabled(true);context.testCase.getTestStepByName("saveB2GDataAsset").setDisabled(true);context.testCase.getTestStepByName("searchDataAsset").setDisabled(true); context.testCase.getTestStepByName("retrieveDataAsset").setDisabled(true); context.testCase.getTestStepByName("saveDataAssetWithAction").setDisabled(true)
	
	// turn off User Steps leave Org steps on (ie run an Org only)
	if (testConditions["testOrg"] == "new") {context.testCase.getTestStepByName("createUser").setDisabled(true);context.testCase.getTestStepByName("registerPersonIfNotExists").setDisabled(true);context.testCase.getTestStepByName("addSecurityTokenToPerson").setDisabled(true);context.testCase.getTestStepByName("updateUserRoles").setDisabled(true); context.testCase.getTestStepByName("createGrouping").setDisabled(true);context.testCase.getTestStepByName("updateUserGroupings").setDisabled(true);}

	// turn off Org Steps leave User steps on (ie run a User only)
	else if (testConditions["testOrg"] == "default") {context.testCase.getTestStepByName("abnLookup").setDisabled(true);context.testCase.getTestStepByName("createOrUpdateOrganisation").setDisabled(true);context.testCase.getTestStepByName("retrieveOrganisationById").setDisabled(true)}
	}



//************************************************************************************
// Save Test Conditions Data Change back to Test Case Properties and update the logger
//************************************************************************************
context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, testConditions)
setLogger = setLogger + "Customised Step conditions have been applied for the Test"
testRunner.testCase.setPropertyValue("003_set", setLogger)
 
</script></con:config></con:testStep><con:testStep type="groovy" name="data" id="370d15e1-290b-4c49-b953-e8e985e8fbef"><con:settings/><con:config><script><![CDATA[/*
 *  Data Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	First working version which produces DEMO data and writes to properties for Consumption.
 *		As per the "set" step, the conditions of the test being executed will drive what data is generated (for mapping into SOAP/REST/JDBC/ASSERTIONS etc)
 * 		During early/immature versions, the simulator will require you to generate the SPECIFIC data you need and to do the step mapping.
 * 		However a future version will consist of a data generator template which mimicks all of the possible data generation combinations, and
 * 		which enables the Tester to port/copy into their framework
 * 	

 * 			Process:
 * 			1. Read in soapui properties for the test inputs
 * 			2. Run if/switch logic on that input
 * 			3. Create Data
 * 			
 *  V02 from 14/06/2018 :
 *  	Building data based on library calls plus customisations (for User Sim)

 *  V03 from 28/06/2018
 *   As per V02 but for Asset Sim
 *   
 *  	from 04/07/2018 - Cleanup (comments for future updates not being maintained here)
 *  	  	
 * 			
 */
 
import java.util.Random
import org.apache.commons.lang.RandomStringUtils

//***********************************
// Define property maps to store data
//***********************************
def data=[:]; def test=[:]; def testLogger=[:]

//**************
// Get Library
//**************
def core = testRunner.testCase.getPropertyValue("propCore")
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
def script = testRunner.testCase.getPropertyValue("propScript") 
scripts = core.testSuites["${script}"]

//*****************************
// Get Classes (from Library)
//*****************************
scripts.testCases["automation-v1"].testSteps["BioGenerator"].run(testRunner, context)
scripts.testCases["automation-v1"].testSteps["HealthData"].run(testRunner, context)
context.HealthData.assetData()
context.HealthData.hardCodedDataPortalData()
scripts.testCases["automation-v1"].testSteps["SystemRelated"].run(testRunner, context)
scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)


//*********************************************************
// Create Data 
//	includes calls to the Library
//	include data for User and Assets
//*********************************************************
data["dataFirstName"] = context.BioGenerator.firstName; data["dataLastName"] = context.BioGenerator.lastName; 
data["dataTester"] = context.SystemRelated.username;data["dataGivenNameKey"] = context.HealthData.dataPortalHCD["GivenNameKey"]; data["dataLastNameKey"] = context.HealthData.dataPortalHCD["LastNameKey"]
data["dataRequestSystem"] = context.HealthData.dataPortalHCD["requestSystem"]; data["dataFalse"] = context.HealthData.dataPortalHCD["false"]
data["dataAbnAttribute"] = context.HealthData.dataPortalHCD["AbnAttribute"]; data["dataPasswordKey"] = context.HealthData.dataPortalHCD["PasswordKey"]
data["dataPassword"] = context.HealthData.dataPortalHCD["password"]; data["dataAccType"] = context.HealthData.dataPortalHCD["accType"]; data["dataAccTCId"] = context.HealthData.dataPortalHCD["acceptedTCidRequest"]	
data["dataTermsValue"] = context.HealthData.dataPortalHCD["termsValue"]; data["dataTrue"] = context.HealthData.dataPortalHCD["true"]; data["dataEmailAddress"] = context.HealthData.dataPortalHCD["emailAddress"]
data["dataPhoneNumber"] = context.HealthData.dataPortalHCD["phoneNumber"]; data["dataUsage"] = context.HealthData.dataPortalHCD["usage"]; data["dataUsageAssert"] = context.HealthData.dataPortalHCD["usageAssert"]
data["dataServicesName"] = context.HealthData.dataPortalHCD["servicesName"];data["dataFalse"] = context.HealthData.dataPortalHCD["false"]
data["dataAssetTitle"] = context.HealthData.dataAssetData["assetTitle"];data["dataAssetDescription"] = context.HealthData.dataAssetData["assetDescription"]
data["dataReportingRndRefId"] = context.HealthData.dataAssetData["assetRepRndRefId"]
data["dateTime1"] = new java.text.SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.99999999+10:30").format(new Date())
data["dateTime2"] = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())
data["dateTime3"] = new java.text.SimpleDateFormat("yyyyMMddHHmmsss").format(new Date())
data["dataRegisterPersonExpectedOutcome"] = "SUCCESS_NEW_PERSON";data["dataAddTokenExpectedOutcome"]="Active";data["dataUpdateRolesExpectedOutcome"]="UPDATED"
data["dataExistingGroupingExpectedResponse"] = "ALREADY_EXISTS"; data["dataUpdateUserGroupingsExpectedOutcome"]="UPDATED"; data["dataSaveDataAssetExpectedOutcome"]="UPDATED"
//***************************************************************************************************
// Get Test Conditions
//***************************************************************************************************
context.ManageSoapUIProperties.getMyProperties(testRunner.testCase, test)


//****************************************************************************
// Apply logic - Set the parent and create default ORG Data when required
//	Set the Parent ORG - hardcoding method at this stage to track data
//	Set the Default ORG - default currently hard-coded set to AUTOMATION ORG
//	NOTE - latest ORG is generated in createOrUpdateOrganisation and when 
//	applied dataAbn will be set there (ie will override this if statement)
//****************************************************************************

// set a parent org and related properties
data["parentOrgName"] = "AUTOMATION TESTING ORG PARENT TWO"; data["parentOrgId"] = "2478"; data["testDefaultAbnSet"] = "66059658641"
data["defaultAdmin"] = "477898381"; data["defaultGuid"] = "hvXCWFWyiJuPZGgT8MllYKEVxPJnhh"
// parents list
/*
AUTOMATION TESTING ORG 2326
AUTOMATION TESTING ORG PARENT ONE 2457
77271254850 AUTOMATION TESTING ORG PARENT TWO 2478
52057789983 AUTOMATION TESTING ORG PARENT THREE 2477
*/

// logic for the default case, otherwise the latest abn is in the response of createOrUpdateOrganisation
if (test["testOrg"] == "default"){ data["dataAbn"] = "${data["testDefaultAbnSet"]}"; data["usersimUserkey"] = "${data["defaultGuid"]}"
	testLogger["Log_DefaultAbn"] = data["dataAbn"]; testLogger["Log_DefaultAdmin"] = data["defaultAdmin"]; testLogger["Log_DefaultKey"] = data["defaultGuid"]}


 

//***********************************
// Generate an Abn lookup search word
//***********************************
Random random = new Random()
// random word generator used as the Abn search criterion (increase list of words to increase randomness)	
def searchWords = ["abc", "test","aaa", "first", "best", "nice", "happy"]
def sWord = random.nextInt(searchWords.size())
data["abnLookupSearchCriterion"] = (searchWords.toSet() as List)[sWord]
//testRunner.testCase.setPropertyValue("abnLookupSearchCriterion", "${searchCriterion}")


//********************
// Generate org title
//********************
String ranNum = "${random.nextInt(99999-11111)+11111}"
data["orgTitle"] = "AutoOrgTest${ranNum}_childOf${data["parentOrgId"]}"
//testRunner.testCase.setPropertyValue("orgTitle", orgTitle)


//****************************************************
// Apply Data Logic
//	Org Cases - whether to use latest or default Org
//****************************************************
// **TESTING** Turned off as this is now deriver from the response message for the "latest" case (the test condition in the data source is still a placeholder)
//if (test["testOrg"] == "latest"){ data["dataAbn"] = test["latestAbnCreated"]; log.info "i am here"} 


//********************************
// Apply Data Logic
//	User Case - setting roles 
//	covering external roles only
//********************************
if (test["testRoles"] == "SubmissionUploaderReviewerApproverExt") {data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_UPLOADER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_UPLOADER"];data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_REVIEWER"]; 	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_REVIEWER"];data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_APPROVER"];	data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_APPROVER"];data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_APPROVER"];	data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_APPROVER"] } //upload, review, approve submissions
else if (test["testRoles"] == "SubmissionUploaderExt") {data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_UPLOADER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_UPLOADER"];data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_UPLOADER"]; data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_UPLOADER"];data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_UPLOADER"]; data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_UPLOADER"];data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_UPLOADER"]; data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_UPLOADER"]	}
else if (test["testRoles"] == "SubmissionReviewerExt") {data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_REVIEWER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_REVIEWER"];data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_REVIEWER"]; 	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_REVIEWER"];data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_REVIEWER"]; data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_REVIEWER"];data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_REVIEWER"]; data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_REVIEWER"]}
else if (test["testRoles"] == "SubmissionApproverExt") {data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_APPROVER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_APPROVER"];data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_APPROVER"];	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_APPROVER"];data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_APPROVER"];	data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_APPROVER"];data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_APPROVER"];	data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_APPROVER"] }
else if (test["testRoles"] == "UserAdminExt") {data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_USER_ADMIN"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_USER_ADMIN"];data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_USER_ADMIN"];	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_USER_ADMIN"];data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_USER_ADMIN"];data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_USER_ADMIN"];data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_USER_ADMIN"];	data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_USER_ADMIN"] }
else if (test["testRoles"] == "ReportViewerExt") {data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_REPORT_VIEWER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_REPORT_VIEWER"];data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_REPORT_VIEWER"];data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_REPORT_VIEWER"];data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_REPORT_VIEWER"];data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_REPORT_VIEWER"];data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_REPORT_VIEWER"];data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_REPORT_VIEWER"] }
else if (test["testRoles"] == "ReportDeveloperExt") {data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_REPORT_DEVELOPER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_REPORT_DEVELOPER"];data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_REPORT_DEVELOPER"];data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_REPORT_DEVELOPER"];data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_REPORT_DEVELOPER"];data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_REPORT_DEVELOPER"];data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_REPORT_DEVELOPER"];data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_REPORT_DEVELOPER"] }
else if (test["testRoles"] == "SubmissionProcessedViewerExt") {data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_PROCESSED_VIEWER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_PROCESSED_VIEWER"];data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_PROCESSED_VIEWER"];data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_PROCESSED_VIEWER"];data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_PROCESSED_VIEWER"];data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_PROCESSED_VIEWER"];data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_PROCESSED_VIEWER"];data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_PROCESSED_VIEWER"] }
else if (test["testRoles"] == "SubmissionReceiverExt") {data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_RECEIVER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_RECEIVER"];data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_RECEIVER"];data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_RECEIVER"];data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_RECEIVER"];data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_RECEIVER"];data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_EXT_SUB_RECEIVER"];data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_EXT_SUB_RECEIVER"] }

//*****************************************
// Apply Data Logic
//	User Case - setting groupings and subs
//	Currently hard-coding to TESTGROUPMDR
//	and Indigenous Health
//*****************************************
if (test["testGroupings"] == "TESTGROUPMDR") {data["dataSubGroupings"] = ""; data["dataSubGroupings2"] = ""; data["dataSubGroupings3"] = ""; data["dataSubSubGroupings"] = "";/*data["dataSubSubGroupings1"] = "";*/ ;data["dataSubSubGroupings1"] = "" ;	data["dataSubSubGroupings2"] = ""; data["dataSubSubGroupings3"] = "" }
else if (test["testGroupings"] == "Indigenous Health") { data["dataSubGroupings1"] = "nKPI"; data["dataSubSubGroupings1"] = "" ;data["dataSubGroupings2"] = "HCP"; data["dataSubSubGroupings1"] = ""; data["dataSubSubGroupings2"] = "";data["dataSubGroupings3"] = "OSR"; data["dataSubSubGroupings3"] = "" }

//*******************************************
// Apply Data Logic
//	User Case - setting grouping actions
//	Currently support ADD and DELETE but 
//	have not matured logic for a DELETE case
//*******************************************
if (test["testGroupAction"] == "AddGroup") { data["dataGroupAction"] = "ADD" } 
else if (test["testGroupAction"] == "DeleteGroup") { data["dataGroupAction"] = "DELETE" }


//************************************************************************
// Apply Data Logic
//	Asset Cases - Publications related (***TO REDO AND TEST LATER***)
//***********************************************************************

		/*

		 if (test["testAssetType"]=="SomeTestFile.xml") { 
		data["dataAssetId"] = "0" // applicable for Publications via saveDataAssetWithAction whereby the first draft asset has no asset id ***WIP to be moved and redone***
		data["dataRevisionNumber"] = "0" // applicable for Publications via saveDataAssetWithAction whereby the first draft asset has no prior revision ***WIP to be moved and redone***
		data["dataFileChangeType"] = "ADD" // applicable for Publications for first draft via saveDataAssetWithAction ***WIP to be moved and redone***
		data["dataFileId"] = "0" // applicable for Publications for first draft via saveDataAssetWithAction ***WIP to be moved and redone***
		data["dataFileRevisionNumber"] = "1" // applicable for Publications for first draft via saveDataAssetWithAction ***WIP to be moved and redone***
		data["usersimUserkeyUploader"] = "derobm" // yet to test this
		data["usersimGroupName"] = "TESTGROUPMDR"
		data["dataAssetStatus"] = "Draft Publication" 
		data["dataAssetTitle"] = test["testAssetType"]
		data["dataAssetAction"] = "Save Changes"	}
		*/

//************************************************
// Apply Data Logic
//	Cases - Overarching logic for all B2G cases
//************************************************
if (test["testAssetType"]=="B2G") { 

		//data["usersimUserkeyUploader"] = testRunner.testCase.testSuite.getPropertyValue("latestAdminGuid") // covered in addSecurityTokenToPerson response for e2e sim
		//data["usersimSuperUser"] = testRunner.testCase.testSuite.getPropertyValue("latestAdminCreated") // covered in addSecurityTokenToPerson response for e2e sim
		data["usersimGroupName"] = "Indigenous Health" // set the required grouping
		data["usersimUserkey"] = data["usersimUserkeyUploader"] // apply the required user key to the property mapped in the request
		data["dataxmlFileStart"] = "<!--" // turning off the file block in the saveDataAssetWithAction as na for B2G
		data["dataxmlFileEnd"] = "-->" // turning off the file block in the saveDataAssetWithAction as na for B2G 
		data["dataAssetStatusToAssert"] = "Draft Submission" //status at the starting point (post draft submission)
}


//*********************************************************************************
// Apply Data Logic
//	Asset Cases - B2G cases when the first saveDataAssetWithAction post draft submission
//		is a request review 
//*********************************************************************************
if ((test["testAssetAction2"]=="requestReview")&&(test["testAssetType"]=="B2G")) 
{
		data["dataAssetStatus"] = "Draft Submission" // set the required status
		data["dataAssetAction"] = "Request Review" // set the first action
		data["dataSearchAssetStatus"] = "Draft Submission" //same as status but separating for future search capability		
		//data["dataSearchAssetStatus"] = "Submission Ready For Review" //** NEED TO FIX**
		}

//************************************************************************
// Apply Data Logic
//	Asset Cases - when the first saveDataAssetWithAction post draft submission
//		is a request approval 
//***********************************************************************
if ((test["testAssetAction2"]=="")&&(test["testAssetAction3"]=="requestApproval")&&(test["testAssetType"]=="B2G")) 
{
		data["dataAssetStatus"] = "Draft Submission" // set the required status		
		data["dataAssetAction"] = "Request Approval" // set the first action
		data["dataSearchAssetStatus"] = "Draft Submission" //same as status but separating for future search capability 
		//data["dataSearchAssetStatus"] = "Submission Ready For Approval" //** NEED TO FIX**
		
		}

//************************************************************************
// Apply Data Logic
//	Asset Cases - when the first saveDataAssetWithAction post draft submission
//		is an approve for submission 
//***********************************************************************
if ((test["testAssetAction2"]=="")&&(test["testAssetAction3"]=="")&&(test["testAssetAction4"]=="approveForSubmission")&&(test["testAssetType"]=="B2G")) 
{
		data["dataAssetStatus"] = "Submission Ready For Approval" // set the required status		
		data["dataAssetAction"] = "Approve for Submission" // set the first action
		data["dataSearchAssetStatus"] = "Draft Submission" //same as status but separating for future search capability 		
		//data["dataSearchAssetStatus"] = "Submission Approved" //** NEED TO FIX**
		
		}

//******************************
// Post Data Logic additions
//	
//******************************
data["dataExternalActionComment"] = "Testing for action ${data["dataAssetAction"]}" // comment to accompany the action


//******************************************************
// Save Data to SoapUI Properties and update logging
//******************************************************
context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, data)
context.ManageSoapUIProperties.saveToProperties(testRunner.testCase.testSuite, testLogger)

// Generate a string of Data and Test conditions (for Logging/Reporting purposes). Do this by storing the entire property maps.
testRunner.testCase.setPropertyValue("004_data", "Data generated: ${data.toString()} ; For Testing conditions: ${test.toString()}")

// screen logger **logic doesnt work here for the first off test needs to move in the B2G + multi action switches**
// log.info "Data has been set for ${test["testAssetType"]} ${data["dataAssetStatus"]} with next action of ${data["dataAssetAction"]} and comment ${data["dataExternalActionComment"]}"]]></script></con:config></con:testStep><con:testStep type="manualTestStep" name="INSERT YOUR SOAP JDBC ETC HERE" id="388ff557-e2aa-4f13-a40f-9a77a7d2cb82"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="groovy" name="log" id="3e20ec8a-a3aa-48b1-a263-009000186829"><con:settings/><con:config><script><![CDATA[/*
 *  Log Script
 *  Date : 14/08/2018
 *  Author : Michael De Robertis 
 *  	Enhanced version which incorporates properties, csv results, and request/response logging, and customisations for dataportal
 *  			
 */

import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)

//*************************************
// Get the Library and required Classes
//*************************************
def core = testRunner.testCase.getPropertyValue("propCore"); core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
def script = testRunner.testCase.getPropertyValue("propScript"); scripts = core.testSuites["${script}"]
scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)

//*************************************
// Setup properties for logging
//*************************************
def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase()
def strSoapTestCase = objCase.name; def strLogGlobal = ''; strLogProject = ''; strLogCase = ''; strLogStep = ''
def testConditions = [:]; context.ManageSoapUIProperties.getMyProperties(testRunner.testCase, testConditions)
def testDataLog = [:]; context.ManageSoapUIProperties.getMyProperties(testRunner.testCase.testSuite, testDataLog)
def strPath = "${testConditions["propWorkingFolder"]}\\log\\${testConditions["dateTime2"]}\\${testConditions["propEnvironment"]}\\"
def strLogProps = "PROPERTIES_${strSoapTestCase}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"].substring(0,8)}.txt"
def testSuite = context.expand((testRunner.testCase.testSuite).name)
intLog = 1 // move to properties file in future, 1 = request/responses only, 2 = all, need a 0 option

//*******************************************************
// Generate Request and Responses and Properties file
//*******************************************************

// Loop through steps and log when the step has been enabled
def step = objCase.getTestStepList()
step = objCase.getTestStepList()
        step.each {
        	if (!it.disabled){
                if ((it instanceof WsdlRunTestCaseTestStep) || (it instanceof WsdlPropertiesTestStep)){
        
                    // Requires intLog = 2
                    if (intLog != 1){
                        //Properties
                        def prop = it.getPropertyList()
                        //loop through the list of testStep properties and log as required
                        prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
                        new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -TestCase  +  TestStep]:,${strLogCase}${strLogStep}")}
                } 
                if (it instanceof WsdlTestRequestStep){
                //else if (it instanceof WsdlTestRequestStep){

                    //Get Request (will be xml if not jms)
                    if (it.getTestRequest().getRequestContent().substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"}
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.${strExt}")
                     //new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.${strExt}")
                        .append(context.expand(it.getTestRequest().getRequestContent()))
                    
                    //Get Response if exists (will always be xml)
                    if (it.getTestRequest().getResponseContent() != null){
					new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.xml")
                         //new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //SOAP Endpoint and Assertion
                    if (intLog != 1){ 
                         new File("${strPath}").mkdirs();new File("${testConditions["propWorkingFolder"]}\\log\\","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -Endpoint + Assertions]:,StepName=${it.name},Endpoint=${context.expand(it.getTestRequest().getEndpoint())},SOAPAssertion=${context.expand(objProject.getPropertyValue("svSoapAssertion"))}")
                    }
                } 

                else if (it instanceof JdbcRequestTestStep){ //OS... add "|| (it instanceof ProJdbcRequestTestStep)" for PRO 
                    //Request
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.sql")
                     //new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.sql")
                        .append(context.expand(it.getQuery().replaceAll(/\n/,'\r\n')))
                    //Response
                    if (it.getResponseContent().contains("<Row>")){ 
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.xml")
                         //new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //JDBC Connection String and  Assertion
                    if (intLog != 1){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -ConnStr  + Assertions]:,StepName=${it.name},ConnectionString=${context.expand(it.getConnectionString().replaceAll('/.+@/','/PASS_VALUE@/'))},JDBCAssertion=${context.expand(objProject.getPropertyValue("dbJdbcAssertion"))}")

                    }
                }

            }
        }

//******************************
// Generate the Results Log
//******************************
def propsFile = "Results-${testSuite}-${testConditions["systemUser"]}-${testConditions["systemHost"]}-${testConditions["dateTime2"]}.csv" //csv properties file
new File("${testConditions["propWorkingFolder"]}\\log\\","${propsFile}").append('\r\n' + "Time:${testConditions["dateTime3"]}, ${strSoapTestCase}${testConditions["testCounter"]}, ${testConditions["TestID"]}, ${testConditions["TestObjective"]}, ${testDataLog}")

//*********
//Clean up 
//*********
String[] propToRemove = new String[testRunner.testCase.testSuite.getPropertyCount()];
propToRemove = testRunner.testCase.testSuite.getPropertyNames();
for ( int i = 0 ; i < propToRemove.size(); i++ ){
    testRunner.testCase.testSuite.removeProperty( propToRemove[i] );}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="loop" id="38ec73ff-39c5-4cdd-8fc0-98cc38da37ea"><con:settings/><con:config><script>/*
 *  Loop Script
 *  Date : 14/08/2018
 *  Author : Michael De Robertis 
 *  Customisations for DataPortal
 *  
 */

//*******************************************
//TEST CASE LOOP
//	customised with Agile Workflow sub-loop
//*******************************************


// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// get current counter positions and test case descriptors
def numberOfRows, numberOfTests, testCounter, nextTestCounter, testID, testObjective
numberOfRows = testRunner.testCase.getPropertyValue("numberOfRows").toInteger()
numberOfTests = testRunner.testCase.getPropertyValue("numberOfTests").toInteger()
testCounter = testRunner.testCase.getPropertyValue("testCounter").toInteger()
nextTestCounter = testRunner.testCase.getPropertyValue("nextTestCounter").toInteger()
testID = testRunner.testCase.getPropertyValue("TestID")
testObjective = testRunner.testCase.getPropertyValue("TestObjective")

// log an update to screen and to step logger
stepLogger = "Test ${testCounter}"  + " " + "${testID}" + " " + "${testObjective}" + " was completed"
log.info stepLogger

// Customisations **AS REQUIRED*



// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	
	// increment the counter (as the test has already been executed)
	testCounter = testCounter + 1
	nextTestCounter = nextTestCounter + 1
	testRunner.testCase.setPropertyValue("testCounter", testCounter.toString())
	testRunner.testCase.setPropertyValue("nextTestCounter", nextTestCounter.toString())

	// check if at the end of the test list
	if (testCounter > numberOfTests) {
		testRunner.testCase.setPropertyValue("Stop", "T")
		//no loop
		assert true}
	else {
		testRunner.testCase.setPropertyValue("Stop", "F")
		//need to continue the loop

		sleep(1000) //temp delay to see logic
		testRunner.gotoStepByName("read")}
	break;
}
</script></con:config></con:testStep><con:setupScript>/*
 *  End To End Simulator
 *  Author : Michael De Robertis 
 *  V01 from 10/08/2018: 
 *  	Integrates Org, User, and Asset Test Cases into a first version End to End B2G Submissions Simulator
 *  	Reads environment properties, and incorporates Csv and Gui input data sources for test case conditions
 *  	Logs properties, csv results, and step request/response xml
 *  	Custom script inclusion to enable asset workflow simulation (ie loops and re-runs retrieve and save data asset steps as per the need)
 *  	For more details on logic, refer to CreateOrganisations, CreateExternalUsers, and AssetSimulator (from which this simulator was built)
 *	Uses classes/methods in library built in SoapUI (path managed in properties)
 *	
 *	NOTE - this version requires manual setup roughly as follows:
 *		1. import the project and update bindings (currently using local)
 *		2. setup the properties file as per your environment
 *		3. setup the csv file as per your test cases (refer to the master test plan)
 *		4. save the project and run
 *	
 *	ASSUMPTIONS
 *		1. Good knowledge of web services architecture (particularly around wdsl bindings stuff)
 *		2. Good knowledge of the dataportal project
 *		3. That your user profile has the ability to do asset submission approvals and processing (as it is used for these functions)
 *		4. That you can grasp the automation design particularly around how to setup your environment properties, build test cases (and knowing the scope), execute tests, and interpret results 
 *	
 *	
 */

import com.eviware.soapui.support.UISupport
import groovy.swing.SwingBuilder
import java.awt.FlowLayout as FL  // **LOOKS LIKE THIS IMPORT IS NOT WORKING***
import javax.swing.BoxLayout as BXL

//****************************
// Initialisation as required
//****************************
def strategyLogger


//******************************************************
// Properties file management - get the file and load it
//******************************************************

// Get required stuff to build the location and file name
def projectName = testRunner.testCase.testSuite.project.name
String userHomeFolder = System.getProperty("user.home")
String userSoapUIHome = "${userHomeFolder}\\Documents\\Michael\\soapui"
//log.info userSoapUIHome

// Get the properties file location and read content to soapui test case properties
String propsLocation = UISupport.prompt("Enter the full path and location of your Environment Properties file","Location","${userSoapUIHome}\\projects\\dataportal\\bin\\${projectName}.properties", "${userSoapUIHome}\\projects\\dataportal\\bin\\${projectName}.DEV.properties","${userHomeFolder}\\projects\\dataportal\\bin\\${projectName}.properties")
testRunner.testCase.setPropertyValue("propsLocation", propsLocation)

// Store properties file into soapui properties
Properties props = new Properties()
File propsFile = new File("${propsLocation}")
propsFile.withInputStream { stream -> props.load(stream) }
//def fileProps = [:]
props.each { testRunner.testCase.setPropertyValue(it.key, it.value)}		

//*********************
// Library Management  
//*********************

// Get Library
def core = testRunner.testCase.getPropertyValue("propCore")
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
def script = testRunner.testCase.getPropertyValue("propScript") 
scripts = core.testSuites["${script}"]

/*
//****************************************************************************
// ORG Management (for default settings)
//	Set the Parent ORG - hardcoding method at this stage to track data
//	Set the Default ORG - default currently hard-coded set to AUTOMATION ORG
//	NOTE - latest ORG is generated in createOrUpdateOrganisation
//****************************************************************************

parentOrgName = "AUTOMATION TESTING ORG PARENT ONE"; parentOrgId = "2457" //parentOrgName = "AUTOMATION TESTING ORG"; parenOrgId = "2326"
defaultORG = "66059658641"; defaultAdmin = "477898381"; defaultGuid = "hvXCWFWyiJuPZGgT8MllYKEVxPJnhh"
testRunner.testCase.setPropertyValue("parentOrgName", parentOrgName)
testRunner.testCase.setPropertyValue("parentOrgId", parentOrgId)
testRunner.testCase.setPropertyValue("testDefaultAbnSet","${defaultORG}")
*/

/*
//***********************************
// Generate an Abn lookup search word
//***********************************
Random random = new Random()
	
// random word generator used as the Abn search criterion (increase list of words to increase randomness)	
def searchWords = ["abc", "test","aaa", "first", "best", "nice", "happy"]
def sWord = random.nextInt(searchWords.size())
def searchCriterion = (searchWords.toSet() as List)[sWord]
testRunner.testCase.setPropertyValue("abnLookupSearchCriterion", "${searchCriterion}")
*/

/*
//********************
// Generate org title
//********************
String ranNum = "${random.nextInt(99999-11111)+11111}"
orgTitle = "AutoTest${ranNum}"
testRunner.testCase.setPropertyValue("orgTitle", orgTitle)
*/

//*****************************************************
// Building the SwingBuilder GUI 
//	Invoked when "GUI" is selected 
//	Currently disabled as package can not be imported
// 	FUTURE TO DO - put in library
//*****************************************************


	def s = new SwingBuilder()
	s.setVariable('myDialog-properties',[:])
	def vars = s.variables

	def gui = s.dialog(title:'Test Plan',size:[500,600],modal:true)
	
	{
	panel() {
		boxLayout(axis:BXL.Y_AXIS)

		//test identifier
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('TestID')
//			textField(id:'testid',"e2egui${dateTime = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())}",columns:20)}
//			textField(id:'testid',"e2egui${new java.text.SimpleDateFormat("yyyyMMddhhmm").format(new Date())}",columns:20)}
			textField(id:'testid',"e2egui_asset",columns:20)}
		

		//test environment (cover in PROPS)
		/*
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('TestEnvironment')
			testenvironment = comboBox(items:["SIT", "DEV", "UAT"], selectedIndex:0)}
		*/
		
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testAssetChangeType')
			testAssetChangeType = comboBox(items:["addAsset", "removeAsset"], selectedIndex:0)}

		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testAssetType')
			testAssetType = comboBox(items:["B2G", "ForPublication"], selectedIndex:0)}

		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testGroupAction')
			testGroupAction = comboBox(items:["AddGroup", "todo"], selectedIndex:0)}

		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testGroupings')
			testGroupings = comboBox(items:["Indigenous Health", "TESTGROUPMDR"], selectedIndex:0)}

		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testOrg')
			testOrg = comboBox(items:["latest", "todo"], selectedIndex:0)}

		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testRoles')
			testRoles = comboBox(items:["SubmissionUploaderReviewerApproverExt", "todo"], selectedIndex:0)}
	
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testAssetAction1')
			testAssetAction1 = comboBox(items:["submitDraft", "submitDraftRemove", "submitDraftRemoveReinstate"], selectedIndex:0)}

		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testAssetAction2')
			testAssetAction2 = comboBox(items:["requestReview", "", "requestReviewRevision", "requestReviewRevisionRemove", "requestReviewRevisionRemoveRevision", "requestReviewRevisionRequestReview"], selectedIndex:0)}

		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testAssetAction3')
			testAssetAction3 = comboBox(items:["", "requestApproval", "requestApprovalRevision", "requestApprovalRevisionRequestApproval", "requestApprovalRevisionApprove"], selectedIndex:0)}

		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testAssetAction4')
			testAssetAction4 = comboBox(items:["", "approveForSubmission"], selectedIndex:0)}

		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testAssetAction5')
			testAssetAction5 = comboBox(items:["", "readyForProcessing"], selectedIndex:0)}

		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testAssetAction6')
			testAssetAction6 = comboBox(items:["", "process", "returned"], selectedIndex:0)}
		
		//ok &amp; cancel
		panel(alignmentX: 0f) {
			flowLayout(alignment:FL.LEFT)
			button('OK', preferredSize:[80,24],
				actionPerformed:{
					vars.dialogResult = 'OK' 

					dispose() 
					/*
					testRunner.testCase.testSuite.project.setPropertyValue("Project", vars.project.text)
					testRunner.testCase.testSuite.project.setPropertyValue("Environment", vars.testEnvironment.text)
					testRunner.testCase.testSuite.project.setPropertyValue("Application", application.getSelectedItem())	
					*/

					})
			
			button('Cancel', preferredSize:[80,24],
				actionPerformed:{
					vars.dialogResult = 'cancel' 
					dispose() })
						}
			
			}
	}

//*******************************
// Properties File Inputs
//	Set csv files and db details
//*******************************


def csv1,csv2,csv3,csv4,csv5,csv6,csv7, csv8, dbDef, dbOtherOne
csv1 = testRunner.testCase.getPropertyValue("propCsv1");csv2 = testRunner.testCase.getPropertyValue("propCsv2");csv3 = testRunner.testCase.getPropertyValue("propCsv3")
csv4 = testRunner.testCase.getPropertyValue("propCsv4");csv5 = testRunner.testCase.getPropertyValue("propCsv5");csv6 = testRunner.testCase.getPropertyValue("propCsv6")
csv7 = testRunner.testCase.getPropertyValue("propCsv7");csv8 = testRunner.testCase.getPropertyValue("propCsv8")
dbDef = testRunner.testCase.getPropertyValue("propTestSourceDBConnection1");dbOtherOne = testRunner.testCase.getPropertyValue("propTestSourceDBConnection2")

//**************************************************
// Initialise Counters
// 	Doing this as a default starting
// point so that all Gui tests are not
// negatively impacted. For csv, Initiate step will
// then reset based on the csv file
//**************************************************

testRunner.testCase.setPropertyValue("Stop", "F")
testRunner.testCase.setPropertyValue("testCounter", "1")
testRunner.testCase.setPropertyValue("nextTestCounter", "2")					
testRunner.testCase.setPropertyValue("numberOfRows", "2")
testRunner.testCase.setPropertyValue("numberOfTests", "1")	




//************************************************************************************************
// Test Strategy Management
//	Prompt for the applied test strategy (as in where the test case source will be derived from)
//	Apply appropriate action based on the selection
//************************************************************************************************

String testStrategy = UISupport.prompt("Select the data source for running your Test Plan.","Test Strategy","csv", "GUI", "Database")
testRunner.testCase.setPropertyValue("testStrategy", testStrategy)


// Run the Test Case GUI (if selected), otherwise get the CSV or DB Store
switch(testStrategy) {
	case "GUI":
	epicType = UISupport.prompt("Select from the following Epics","Epic","Create new Org only", "Create User only", "Create Org and User only", "Create new Org User and Asset")
	if (epicType == "Create new Org only")
	{
	log.info "Running Org only"
	//testid = "e2egui${new java.text.SimpleDateFormat("yyyyMMddhhmm").format(new Date())}"
	testid = "e2egui_org"	
	testObjective = "${epicType}"
	testRunner.testCase.setPropertyValue("testAssetType", "")	
	testRunner.testCase.setPropertyValue("testOrg", "new")
	testRunner.testCase.setPropertyValue("TestID", testid)	
	testRunner.testCase.setPropertyValue("TestObjective", testObjective)		
	log.info "where am i"
	}
	else if (epicType == "Create User only")
	{
	log.info "Running User only"
	testid = "e2egui_user"
	testObjective = "${epicType}"
	testRunner.testCase.setPropertyValue("testAssetType", "")		
	testRunner.testCase.setPropertyValue("testOrg", "default")
	testRunner.testCase.setPropertyValue("testGroupAction", "AddGroup")
	testRunner.testCase.setPropertyValue("testGroupings", "Indigenous Health")
	userRoles = UISupport.prompt("Set your user roles","Roles","SubmissionUploaderReviewerApproverExt", "todo")	
	testRunner.testCase.setPropertyValue("testRoles", userRoles)		
	testRunner.testCase.setPropertyValue("TestID", testid)	
	testRunner.testCase.setPropertyValue("TestObjective", testObjective)		

	}
	else if (epicType == "Create Org and User only")
	{
	log.info "Running Org and User only"
	testid = "e2egui_orguser"
	testObjective = "${epicType}"
	testRunner.testCase.setPropertyValue("testAssetType", "")		
	testRunner.testCase.setPropertyValue("testOrg", "latest")
	testRunner.testCase.setPropertyValue("testGroupAction", "AddGroup")
	testRunner.testCase.setPropertyValue("testGroupings", "Indigenous Health")
	testRunner.testCase.setPropertyValue("TestID", testid)	
	testRunner.testCase.setPropertyValue("TestObjective", testObjective)		
	userRoles = UISupport.prompt("Set your user roles","Roles","SubmissionUploaderReviewerApproverExt", "todo")	
	testRunner.testCase.setPropertyValue("testRoles", userRoles)		
	}

	else if (epicType == "Create new Org User and Asset")
	{
	// display the SwingBuilder GUI, read inputs, and write to soapui properties
	gui.show()

	//**TO FIX** some of this logic needs to extend to other cases not just swingbuilder gui
	testRunner.testCase.setPropertyValue("TestID", vars.testid.text)
	//testRunner.testCase.setPropertyValue("testEnvironment", testenvironment.getSelectedItem())

	testRunner.testCase.setPropertyValue("testOrg", testOrg.getSelectedItem())
	testRunner.testCase.setPropertyValue("testRoles", testRoles.getSelectedItem())
	testRunner.testCase.setPropertyValue("testGroupAction", testGroupAction.getSelectedItem())
	testRunner.testCase.setPropertyValue("testGroupings", testGroupings.getSelectedItem())
	testRunner.testCase.setPropertyValue("testAssetChangeType", testAssetChangeType.getSelectedItem())
	testRunner.testCase.setPropertyValue("testAssetType", testAssetType.getSelectedItem())
	testRunner.testCase.setPropertyValue("testAssetAction1", testAssetAction1.getSelectedItem())
	testRunner.testCase.setPropertyValue("testAssetAction2", testAssetAction2.getSelectedItem())
	testRunner.testCase.setPropertyValue("testAssetAction3", testAssetAction3.getSelectedItem())
	testRunner.testCase.setPropertyValue("testAssetAction4", testAssetAction4.getSelectedItem())
	testRunner.testCase.setPropertyValue("testAssetAction5", testAssetAction5.getSelectedItem())
	testRunner.testCase.setPropertyValue("testAssetAction6", testAssetAction6.getSelectedItem())			
	
	
	//test objective
	testObjective = "${testAssetChangeType.getSelectedItem()} ${testAssetType.getSelectedItem()} ${testGroupAction.getSelectedItem()} ${testGroupings.getSelectedItem()} for ${testOrg.getSelectedItem()} org and user ${testRoles.getSelectedItem()} with actions ${testAssetAction1.getSelectedItem()} ${testAssetAction2.getSelectedItem()} ${testAssetAction3.getSelectedItem()} ${testAssetAction4.getSelectedItem()} ${testAssetAction5.getSelectedItem()} ${testAssetAction6.getSelectedItem()}"
	testRunner.testCase.setPropertyValue("TestObjective", testObjective)	
	}
	break;	
	case "csv":
	strategyLogger = "CSV Strategy chosen"
	String csvLocation = UISupport.prompt("Enter the full path and location of your Test Plan csv file","CSV Location",csv2,csv8,csv6,csv7,csv1,csv3,csv4,csv5)
	testRunner.testCase.setPropertyValue("csvLocation", csvLocation)
	break;
	case "Database":
	strategyLogger = "Database Data Source for Test Cases chosen"
	String dbConnection = UISupport.prompt("Enter the name of your Test Database","CSV Location",dbDef,dbOtherOne)
	testRunner.testCase.setPropertyValue("dbConnection", dbConnection)
	log.info "" // capability not yet built (no db to connect to), hence do nothing here

	break;}


//******************************************************
// Get Test Suite Data (eg from User Sim) *STILL A WIP*
//
// ****** MIGHT NOT BE REQUIRED ******
//
//******************************************************
/*
def usersim = [:] //map to store values to write up to test case properties
def suiteProps = [:] //map to stire values retrieved from test suite properties

scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context) // use the library to get properties
context.ManageSoapUIProperties.getMyProperties(testCase.testSuite, suiteProps) // get the suite properties
*/

//***********
// Logging
//***********

// Use Library SystemRelated class to get useful environment data (and set to properties)
scripts.testCases["automation-v1"].testSteps["SystemRelated"].run(testRunner, context)
username = context.SystemRelated.username; testRunner.testCase.setPropertyValue("systemUser",username)
userHomeFolder = context.SystemRelated.userHomeFolder; testRunner.testCase.setPropertyValue("systemHome",userHomeFolder)
hostname = context.SystemRelated.hostname; testRunner.testCase.setPropertyValue("systemHost",hostname)
		
// Log required data
propsLogger = "Properties in ${propsLocation} and system related are loaded, user:${username}, host:${hostname}, home:${userHomeFolder} were loaded into SoapUI Properties"
testRunner.testCase.setPropertyValue("000_TESTSTRATEGY", strategyLogger + ", " + propsLogger)
log.info propsLogger	

// Update the logger (change in future)
otherSimDataLogger = "Data from User Simulator sourced and set"
testRunner.testCase.setPropertyValue("000_TESTSTRATEGY", strategyLogger + ", " + propsLogger + ", " + otherSimDataLogger)

// Get the Test Environment and log to test suite 
testRunner.testCase.testSuite.setPropertyValue("Log_TestEnvironment",testRunner.testCase.getPropertyValue("propEnvironment"))




</con:setupScript><con:tearDownScript>/*
 *  Simulator TearDown Script
 *  Author : Michael De Robertis 
 *  V01 20/06/2018 : 
 *  	Current version does some basic cleanup post test execution including:
 *  		Deletion of test case properties
 */

import com.eviware.soapui.impl.wsdl.teststeps.*
 
String[] propToRemove = new String[testCase.getPropertyCount()];
propToRemove = testCase.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    testCase.removeProperty( propToRemove[i] );
	}



def enableAllSteps (testCaseContext) {
			testCaseContext.testSuite.getTestCaseList().each
		{
    		it.testStepList.each 
    			{
         		if( it.disabled) { it.setDisabled(false)}
    			}}}
enableAllSteps(testRunner.testCase)


    			
    			
</con:tearDownScript><con:properties/></con:testCase><con:testCase id="27f81410-f9cb-441d-bc23-d28df09f9f99" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DataDrivenSimulator" searchProperties="true"><con:description>V01 - pre POC build out</con:description><con:settings/><con:testStep type="groovy" name="initiate" id="13b20cd4-d8f0-4a01-a806-69817e8ecfb9"><con:settings/><con:config><script>/*
 *  Initiate Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which reads csv file and does quantity counts for building the loop
 *  
*/



// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// read the csv file location
def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 

// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	// read the csv file
	def f = new File (csvLocation)
	
	// count the rows to determine scope/quantities
	List r = f.readLines()
	rows = r.size.toInteger()

	// set the number of tests (and number of rows)
	testRunner.testCase.setPropertyValue("numberOfRows", rows.toString())
	testRunner.testCase.setPropertyValue("numberOfTests", (rows-1).toString())
	log.info "Number of tests in csv file " + f + " has been stored in readiness for execution"

	// initialise the counters for csv 
	testRunner.testCase.setPropertyValue("Stop", "F") //check if correct
	testRunner.testCase.setPropertyValue("testCounter", "1")
	testRunner.testCase.setPropertyValue("nextTestCounter", "2")



	
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="read" id="86272643-9b21-4122-abff-65cf9cf8fd98"><con:settings/><con:config><script>/*
 *  Read Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which reads a DEMO csv file and maps into soapui properties for consumption. User will need to customise for their application
 *  	This version also commenced the creation of a property which could be used for a future data sinc
 *  	
 */


// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// read the csv file location
def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 

// get the counters
def testCounter = (testRunner.testCase.getPropertyValue("testCounter")).toInteger()
def nextTestCounter = (testRunner.testCase.getPropertyValue("nextTestCounter")).toInteger()


// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	
	// read the csv file
	def f = new File (csvLocation)
	
	// read the lines
	List r = f.readLines()

	// store the row
	String[] testInput = r[testCounter].split(',')

	/* 
	 *  CRITICAL REQUIREMENT
	 *  the list of properties here need to align with your csv file
	 */

	// map the row into properties(using matching names for readability)
	def testID = testInput[0]
	def testObjective = testInput[1]
	def testEnvironment = testInput[2]
	def application = testInput[3]

	//def user = testInput[3] // property called "user" represents an array of rows at position 3 (Column D, hence column named "User")
	//def password = testInput[4] // property called "password" represents an array of rows at position 4 (Column E, hence column named "Pwd")


	// store into soapui properties
	testRunner.testCase.setPropertyValue("TestID", testID)
	testRunner.testCase.setPropertyValue("TestObjective", testObjective)
	testRunner.testCase.setPropertyValue("Application", application)

	//testRunner.testCase.setPropertyValue("Username", user) //map property "user" to SoapUI Test Case Property "Username"
	//testRunner.testCase.setPropertyValue("Password", password) //map property "password" to SoapUI Test Case Property "Password"


	// create a property which describes the test (and then that property can be used inthe data sinc for example)
	def currentTest = "ID: " + testID + " " + "Objective: " + testObjective + "App: " + application
	log.info currentTest
	break;
}

/*
 * 
 * TO DO - this is a good stage for:
 * 	setting up properties for a datasinc (ie to record pre-execution status)
 *	OR alternatively, save properties to a file (as the pre-execution status)
 * 	
 * 	After debugging for correctness, remove old log.info checks	
 */
	
</script></con:config></con:testStep><con:testStep type="groovy" name="set" id="f2096fef-4e16-4e9e-b7e4-f31057fe3d34"><con:settings/><con:config><script>/*
 *  Set Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which counts through each step and turns them all on by default.
 *  	This version is not using a libary call. A Future version will do this
 *  	
 */



// based on the test being executed, enable/disabled required steps and assertions

// enable all steps (as a default, starting position)
context.testCase.testSuite.getTestCaseList().each {
    it.testStepList.each 
    	{
    		if( it.disabled) { it.setDisabled(false); log.info "All steps enabled by default"} } };log.info ""


// disable any steps that are not required for this test
/*
 * 	For an immature version, your simulator might be quite basic and consist only of a few or single services. Hence the concept of turning stuff off will likely not apply.
 * 		However for a more complicated setup which has multiple service calls, and for which some are optional (depending on the test), scripting below will need
 * 			some logic to cater for this. 
 * 			
 * 			Process:
 * 			1. Read in soapui properties for the test inputs
 * 			2. Run if/switch logic on that input
 * 			3. Enable / Disable stuff
 * 	//context.testCase.getTestStepByName("STEP1").getAssertionByName("Assert1").disabled = true
 *	//context.testCase.getTestStepByName("DummyStep1").setDisabled(true)
 *
 * 
 */
 context.testCase.getTestStepByName("log").setDisabled(true)</script></con:config></con:testStep><con:testStep type="groovy" name="data" id="eac48d07-ca8e-4572-8646-f75ee07c6e7d"><con:settings/><con:config><script>/*
 *  Data Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	First working version which produces DEMO data and writes to properties for Consumption.
 *		As per the "set" step, the conditions of the test being executed will drive what data is generated (for mapping into SOAP/REST/JDBC/ASSERTIONS etc)
 * 		During early/immature versions, the simulator will require you to generate the SPECIFIC data you need and to do the step mapping.
 * 		However a future version will consist of a data generator template which mimicks all of the possible data generation combinations, and
 * 		which enables the Tester to port/copy into their framework
 * 	

 * 			Process:
 * 			1. Read in soapui properties for the test inputs
 * 			2. Run if/switch logic on that input
 * 			3. Create Data
 * 			
 */
 
 
 /*
  *  eg data below
  */

import java.util.Random
import org.apache.commons.lang.RandomStringUtils

Random random = new Random()

sample1 = "ID${random.nextInt(999999-111111)+111111}"
testChars = ("M" + "S" + "R" + "A" + "X" + "H")
sample2 = "${RandomStringUtils.random(1, testChars.toCharArray())}"
testRunner.testCase.setPropertyValue("SampleTestDataItem1", sample1)
testRunner.testCase.setPropertyValue("SampleTestDataItem2", sample2)



//
//
//
// SOAP / REST / JDBC STUFF GOES AFTER THIS POINT
//
//
//
</script></con:config></con:testStep><con:testStep type="groovy" name="log" id="3ee5a4f3-547a-4cff-8e15-ab732f200308" disabled="true"><con:settings/><con:config><script><![CDATA[/*
 *  Log Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	WIP Log, currently not working  **POSSIBLY DUE TO ENVIRONMENT WHEREBY REQUIRED PACKAGE NOT AVAILABLE NEED TO TEST WITH LOCAL SOAPUI INSTALL**
 *  			
 */



import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)

def objGlobal = com.eviware.soapui.SoapUI.globalProperties
def objProject = testRunner.getTestCase().getTestSuite().getProject()
def objCase = testRunner.getTestCase()
def strUserID = System.getenv() ['USERNAME']
def strHost = System.getenv() ['COMPUTERNAME']
def strDate = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())
def strTime = new java.text.SimpleDateFormat("yyyyMMddHHmmsss").format(new Date())
def testEnvironment = "SIT"
def projectName = "MyTestProject"
def soapTestCaseName = objCase.name
def homepath = System.getProperty("user.home")

// properties used to create a data sinc file
def strLogGlobal = "testEnvironment=" + testEnvironment + ","
def strLogProject = "projectName=" + projectName + ","
def strLogCase = "soapTestCaseName=" +soapTestCaseName + ","
//def strLogStep = "

// Create the Log Path if it doesnt exist - strDate means a new folder will be created for every unique day that has a result to log
def strPath = "${homepath}\\log\\${strDate}\\${testEnvironment}\\"

// Create a file name for a results sync
def strLogProps = "PROPERTIES_${soapTestCaseName}_${testEnvironment}_${strUserID}_${strHost}_${strTime.substring(0,8)}.txt"

// Loop through steps and log when the step has been enabled
def step = objCase.getTestStepList()
step.each
	{
		if (!it.disabled){
			
			if((it.instanceof (WsdlRunTestCaseTestStep)) || (it.instanceof (WsdlPropertiesTestStep))){
				def prop = it.getPropertyList()
				prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
				new File("${strPath}","${strLogProps}").append('\r\n' + "[${strTime.padRight(17)} - TestCase + TestStep]:,${strLogCase}${strLogStep}")
			}
			
			else if (it.instanceof (WsdlTestRequestStep)){
				if (it.getTestRequest().getRequestContent()/substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"} //extension catering for fixed length jms and xml
				new File("${strPath}","soapREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.xml").append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,'').replaceAll(/\s+/,''))	
			}
			
			else if (it.instanceof (JdbcRequestTestStep)){
				new File("${strPath}","jdbcREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.sql").append(context.expand (it.getQuery().replaceAll(/\n/,'\r\n')))
				if (it.getResponseContent().contains("<Row>")){
					new File("${strPath}","jdbcREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.sql").append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,'').replaceAll(/\s+/,''))
				}
			}
			//else {log.info "TO FIX"}
		}
	}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="loop" id="bf3d1f38-a892-4b97-9b9e-6d1f47b3cf72"><con:settings/><con:config><script>/*
 *  Loop Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	Reads the Test Strategy and ajusts counters based on that source. Then checks the position and sets the Stop when at the end. 
 *  		This version currently works for CSV only (scalability ready for future DB storage of Test Cases)
 *  	  			
 */


// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// get current counter positions
numberOfRows = testRunner.testCase.getPropertyValue("numberOfRows").toInteger()
numberOfTests = testRunner.testCase.getPropertyValue("numberOfTests").toInteger()
testCounter = testRunner.testCase.getPropertyValue("testCounter").toInteger()
nextTestCounter = testRunner.testCase.getPropertyValue("nextTestCounter").toInteger()

// log an update to screen
log.info "Test ${testCounter} was completed"

// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	
	// increment the counter (as the test has already been executed)
	testCounter = testCounter + 1
	nextTestCounter = nextTestCounter + 1
	testRunner.testCase.setPropertyValue("testCounter", testCounter.toString())
	testRunner.testCase.setPropertyValue("nextTestCounter", nextTestCounter.toString())

	// check if at the end of the test list
	if (testCounter > numberOfTests) {
		testRunner.testCase.setPropertyValue("Stop", "T")
		//no loop
		assert true}
	else {
		testRunner.testCase.setPropertyValue("Stop", "F")
		//need to continue the loop

		sleep(1000) //temp delay to see logic
		testRunner.gotoStepByName("read")}
	break;
}</script></con:config></con:testStep><con:setupScript>/*
 *  Simulator Setup Script
 *  Author : Michael De Robertis 
 *  V01 14/06/2018 : 
 *  	Prompts user to select gui, csv, or database as the test case data source
 *  	Reads csv source (gui and db not yet enabled)
 *  
*/



import com.eviware.soapui.support.UISupport
import groovy.swing.SwingBuilder
import java.awt.FlowLayout as FL  // **LOOKS LIKE THIS IMPORT IS NOT WORKING***
import javax.swing.BoxLayout as BXL

// Building the SwingBuilder GUI here but not invoked unless "GUI" is selected (see testStrategy switch logic)

// TURNED OFF BECAUSE OF IMPORT ISSUE
		
def s = new SwingBuilder()
s.setVariable('myDialog-properties',[:])
def vars = s.variables
	/*
def gui = s.dialog(title:'Test Plan',size:[500,500],modal:true)
	
	{
	panel() {
		boxLayout(axis:BXL.Y_AXIS)

		//project
		panel(alignmentX:Of) {
			flowLayout(alignment:FL.LEFT)
			label('Project')
			textField(id:'project',columns:20)}
			
		//test environment
		panel(alignmentX:Of) {
			flowLayout(alignment:FL.LEFT)
			label('TestEnvironment')
			textField(id:'testEnvironment',columns:20)}
		
		//application
		panel(alignmentX:Of) {
			flowLayout(alignment:FL.LEFT)
			label('Application')
			application = comboBox(items:["MyApp1", "MyApp2", "MyApp3"], selectedIndex:0)}
			}
	}
	*/	

//UISupport.showInfoMessage("Test Strategy Example")
String testStrategy = UISupport.prompt("Select the data source for running your Test Plan.","Test Strategy","csv", "GUI", "Database")
testRunner.testCase.setPropertyValue("testStrategy", testStrategy)

switch(testStrategy) {
	case "GUI":
	// display the SwingBuilder GUI, read inputs, and write to soapui properties
	gui.show()
	testRunner.testCase.testSuite.project.setPropertyValue("Project", vars.project.text)
	testRunner.testCase.testSuite.project.setPropertyValue("Environment", vars.environment.text)
	testRunner.testCase.testSuite.project.setPropertyValue("Application", application.getSelectedItem())	

	break;
	case "csv":
	String csvLocation = UISupport.prompt("Enter the full path and location of your csv file","C:\\Temp\\testfiles\\testplan.csv", "C:\\Temp\\testfiles\\testplan.csv")
	testRunner.testCase.setPropertyValue("csvLocation", csvLocation)
	case "Database":
	log.info "" //do nothing here (covered in the simulator test case step)
	break;
}</con:setupScript><con:properties><con:property><con:name>testStrategy</con:name><con:value>csv</con:value></con:property><con:property><con:name>csvLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Temp\testfiles\testplan.csv</con:value></con:property><con:property><con:name>numberOfRows</con:name><con:value>6</con:value></con:property><con:property><con:name>numberOfTests</con:name><con:value>5</con:value></con:property><con:property><con:name>Stop</con:name><con:value>T</con:value></con:property><con:property><con:name>testCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>nextTestCounter</con:name><con:value>7</con:value></con:property><con:property><con:name>TestID</con:name><con:value>5</con:value></con:property><con:property><con:name>TestObjective</con:name><con:value>My name is Frank</con:value></con:property><con:property><con:name>Application</con:name><con:value>MyApp4</con:value></con:property><con:property><con:name>SampleTestDataItem1</con:name><con:value>ID389608</con:value></con:property><con:property><con:name>SampleTestDataItem2</con:name><con:value>A</con:value></con:property></con:properties></con:testCase><con:testCase id="156f1cb9-125d-41f7-af0a-d05e17a6e21b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CoreSimulatorV01" searchProperties="true" disabled="true"><con:description>V01 - pre POC build out</con:description><con:settings/><con:testStep type="groovy" name="initiate" id="1d5236e3-d60b-416c-b635-d9adf30a1c2e"><con:settings/><con:config><script>/*
 *  Initiate Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which reads csv file and does quantity counts for building the loop
 *  
*/



// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// read the csv file location
def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 

// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	// read the csv file
	def f = new File (csvLocation)
	
	// count the rows to determine scope/quantities
	List r = f.readLines()
	rows = r.size.toInteger()

	// set the number of tests (and number of rows)
	testRunner.testCase.setPropertyValue("numberOfRows", rows.toString())
	testRunner.testCase.setPropertyValue("numberOfTests", (rows-1).toString())
	log.info "Number of tests in csv file " + f + " has been stored in readiness for execution"

	// initialise the counters for csv 
	testRunner.testCase.setPropertyValue("Stop", "F") //check if correct
	testRunner.testCase.setPropertyValue("testCounter", "1")
	testRunner.testCase.setPropertyValue("nextTestCounter", "2")



	
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="read" id="a2b7ff9d-3c7a-4827-b267-19dee0a52fad"><con:settings/><con:config><script>/*
 *  Read Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which reads a DEMO csv file and maps into soapui properties for consumption. User will need to customise for their application
 *  	This version also commenced the creation of a property which could be used for a future data sinc
 *  	
 */


// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// read the csv file location
def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 

// get the counters
def testCounter = (testRunner.testCase.getPropertyValue("testCounter")).toInteger()
def nextTestCounter = (testRunner.testCase.getPropertyValue("nextTestCounter")).toInteger()


// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	
	// read the csv file
	def f = new File (csvLocation)
	
	// read the lines
	List r = f.readLines()

	// store the row
	String[] testInput = r[testCounter].split(',')

	/* 
	 *  CRITICAL REQUIREMENT
	 *  the list of properties here need to align with your csv file
	 */

	// map the row into properties(using matching names for readability)
	def testID = testInput[0]
	def testObjective = testInput[1]
	def testEnvironment = testInput[2]
	def application = testInput[3]

	//def user = testInput[3] // property called "user" represents an array of rows at position 3 (Column D, hence column named "User")
	//def password = testInput[4] // property called "password" represents an array of rows at position 4 (Column E, hence column named "Pwd")


	// store into soapui properties
	testRunner.testCase.setPropertyValue("TestID", testID)
	testRunner.testCase.setPropertyValue("TestObjective", testObjective)
	testRunner.testCase.setPropertyValue("Application", application)

	//testRunner.testCase.setPropertyValue("Username", user) //map property "user" to SoapUI Test Case Property "Username"
	//testRunner.testCase.setPropertyValue("Password", password) //map property "password" to SoapUI Test Case Property "Password"


	// create a property which describes the test (and then that property can be used inthe data sinc for example)
	def currentTest = "ID: " + testID + " " + "Objective: " + testObjective + "App: " + application
	log.info currentTest
	break;
}

/*
 * 
 * TO DO - this is a good stage for:
 * 	setting up properties for a datasinc (ie to record pre-execution status)
 *	OR alternatively, save properties to a file (as the pre-execution status)
 * 	
 * 	After debugging for correctness, remove old log.info checks	
 */
	
</script></con:config></con:testStep><con:testStep type="groovy" name="set" id="ff199fa8-c891-468a-be14-1f204f47bbd4"><con:settings/><con:config><script>/*
 *  Set Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which counts through each step and turns them all on by default.
 *  	This version is not using a libary call. A Future version will do this
 *  	
 */



// based on the test being executed, enable/disabled required steps and assertions

// enable all steps (as a default, starting position)
context.testCase.testSuite.getTestCaseList().each {
    it.testStepList.each 
    	{
    		if( it.disabled) { it.setDisabled(false); log.info "All steps enabled by default"} } };log.info ""


// disable any steps that are not required for this test
/*
 * 	For an immature version, your simulator might be quite basic and consist only of a few or single services. Hence the concept of turning stuff off will likely not apply.
 * 		However for a more complicated setup which has multiple service calls, and for which some are optional (depending on the test), scripting below will need
 * 			some logic to cater for this. 
 * 			
 * 			Process:
 * 			1. Read in soapui properties for the test inputs
 * 			2. Run if/switch logic on that input
 * 			3. Enable / Disable stuff
 * 	//context.testCase.getTestStepByName("STEP1").getAssertionByName("Assert1").disabled = true
 *	//context.testCase.getTestStepByName("DummyStep1").setDisabled(true)
 *
 * 
 */
 context.testCase.getTestStepByName("log").setDisabled(true)
 </script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="dd9aaeaf-ec4b-493c-ac38-0922d867531d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>X</con:name><con:value>1</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="data" id="17f540b3-6e9a-4a3c-9f64-67e19c87a49f"><con:settings/><con:config><script>/*
 *  Data Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	First working version which produces DEMO data and writes to properties for Consumption.
 *		As per the "set" step, the conditions of the test being executed will drive what data is generated (for mapping into SOAP/REST/JDBC/ASSERTIONS etc)
 * 		During early/immature versions, the simulator will require you to generate the SPECIFIC data you need and to do the step mapping.
 * 		However a future version will consist of a data generator template which mimicks all of the possible data generation combinations, and
 * 		which enables the Tester to port/copy into their framework
 * 	

 * 			Process:
 * 			1. Read in soapui properties for the test inputs
 * 			2. Run if/switch logic on that input
 * 			3. Create Data
 * 			
 */
 
 
 /*
  *  eg data below
  */

import java.util.Random
import org.apache.commons.lang.RandomStringUtils

Random random = new Random()

sample1 = "ID${random.nextInt(999999-111111)+111111}"
testChars = ("M" + "S" + "R" + "A" + "X" + "H")
sample2 = "${RandomStringUtils.random(1, testChars.toCharArray())}"
testRunner.testCase.setPropertyValue("SampleTestDataItem1", sample1)
testRunner.testCase.setPropertyValue("SampleTestDataItem2", sample2)



//
//
//
// SOAP / REST / JDBC STUFF GOES AFTER THIS POINT
//
//
//
</script></con:config></con:testStep><con:testStep type="groovy" name="log" id="e7e945e2-d5de-4c26-8d62-9d6145bc7e45" disabled="true"><con:settings/><con:config><script><![CDATA[/*
 *  Log Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	WIP Log, currently not working  **POSSIBLY DUE TO ENVIRONMENT WHEREBY REQUIRED PACKAGE NOT AVAILABLE NEED TO TEST WITH LOCAL SOAPUI INSTALL**
 *  			
 */



import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)

def objGlobal = com.eviware.soapui.SoapUI.globalProperties
def objProject = testRunner.getTestCase().getTestSuite().getProject()
def objCase = testRunner.getTestCase()
def strUserID = System.getenv() ['USERNAME']
def strHost = System.getenv() ['COMPUTERNAME']
def strDate = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())
def strTime = new java.text.SimpleDateFormat("yyyyMMddHHmmsss").format(new Date())
def testEnvironment = "SIT"
def projectName = "MyTestProject"
def soapTestCaseName = objCase.name
def homepath = System.getProperty("user.home")

// properties used to create a data sinc file
def strLogGlobal = "testEnvironment=" + testEnvironment + ","
def strLogProject = "projectName=" + projectName + ","
def strLogCase = "soapTestCaseName=" +soapTestCaseName + ","
//def strLogStep = "

// Create the Log Path if it doesnt exist - strDate means a new folder will be created for every unique day that has a result to log
def strPath = "${homepath}\\log\\${strDate}\\${testEnvironment}\\"

// Create a file name for a results sync
def strLogProps = "PROPERTIES_${soapTestCaseName}_${testEnvironment}_${strUserID}_${strHost}_${strTime.substring(0,8)}.txt"

// Loop through steps and log when the step has been enabled
def step = objCase.getTestStepList()
step.each
	{
		if (!it.disabled){
			
/*			if(it.instanceof (RestTestRequestStep)){
				def prop = it.getPropertyList()
				prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
				new File("${strPath}","${strLogProps}").append('\r\n' + "[${strTime.padRight(17)} - TestCase + TestStep]:,${strLogCase}${strLogStep}")
			} */
		
			
			if((it.instanceof (WsdlRunTestCaseTestStep)) || (it.instanceof (WsdlPropertiesTestStep))){
				def prop = it.getPropertyList()
				prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
				new File("${strPath}","${strLogProps}").append('\r\n' + "[${strTime.padRight(17)} - TestCase + TestStep]:,${strLogCase}${strLogStep}")
			}
			
			else if (it.instanceof (WsdlTestRequestStep)){
				if (it.getTestRequest().getRequestContent()/substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"} //extension catering for fixed length jms and xml
				new File("${strPath}","soapREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.xml").append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,'').replaceAll(/\s+/,''))	
			}
			
			else if (it.instanceof (JdbcRequestTestStep)){
				new File("${strPath}","jdbcREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.sql").append(context.expand (it.getQuery().replaceAll(/\n/,'\r\n')))
				if (it.getResponseContent().contains("<Row>")){
					new File("${strPath}","jdbcREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.sql").append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,'').replaceAll(/\s+/,''))
				}
			}
			//else {log.info "TO FIX"}
		}
	}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="loop" id="20bf863c-e0aa-42aa-b1a6-13c85ff2f262"><con:settings/><con:config><script>/*
 *  Loop Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	Reads the Test Strategy and ajusts counters based on that source. Then checks the position and sets the Stop when at the end. 
 *  		This version currently works for CSV only (scalability ready for future DB storage of Test Cases)
 *  	  			
 */


// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// get current counter positions
numberOfRows = testRunner.testCase.getPropertyValue("numberOfRows").toInteger()
numberOfTests = testRunner.testCase.getPropertyValue("numberOfTests").toInteger()
testCounter = testRunner.testCase.getPropertyValue("testCounter").toInteger()
nextTestCounter = testRunner.testCase.getPropertyValue("nextTestCounter").toInteger()

// log an update to screen
log.info "Test ${testCounter} was completed"

// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	
	// increment the counter (as the test has already been executed)
	testCounter = testCounter + 1
	nextTestCounter = nextTestCounter + 1
	testRunner.testCase.setPropertyValue("testCounter", testCounter.toString())
	testRunner.testCase.setPropertyValue("nextTestCounter", nextTestCounter.toString())

	// check if at the end of the test list
	if (testCounter > numberOfTests) {
		testRunner.testCase.setPropertyValue("Stop", "T")
		//no loop
		assert true}
	else {
		testRunner.testCase.setPropertyValue("Stop", "F")
		//need to continue the loop

		sleep(1000) //temp delay to see logic
		testRunner.gotoStepByName("read")}
	break;
}</script></con:config></con:testStep><con:setupScript>/*
 *  Simulator Setup Script
 *  Author : Michael De Robertis 
 *  V01 14/06/2018 : 
 *  	Prompts user to select gui, csv, or database as the test case data source
 *  	Reads csv source (gui and db not yet enabled)
 *  
*/



import com.eviware.soapui.support.UISupport
import groovy.swing.SwingBuilder
import java.awt.FlowLayout as FL  // **LOOKS LIKE THIS IMPORT IS NOT WORKING***
import javax.swing.BoxLayout as BXL

// Building the SwingBuilder GUI here but not invoked unless "GUI" is selected (see testStrategy switch logic)

// TURNED OFF BECAUSE OF IMPORT ISSUE
		
def s = new SwingBuilder()
s.setVariable('myDialog-properties',[:])
def vars = s.variables
	/*
def gui = s.dialog(title:'Test Plan',size:[500,500],modal:true)
	
	{
	panel() {
		boxLayout(axis:BXL.Y_AXIS)

		//project
		panel(alignmentX:Of) {
			flowLayout(alignment:FL.LEFT)
			label('Project')
			textField(id:'project',columns:20)}
			
		//test environment
		panel(alignmentX:Of) {
			flowLayout(alignment:FL.LEFT)
			label('TestEnvironment')
			textField(id:'testEnvironment',columns:20)}
		
		//application
		panel(alignmentX:Of) {
			flowLayout(alignment:FL.LEFT)
			label('Application')
			application = comboBox(items:["MyApp1", "MyApp2", "MyApp3"], selectedIndex:0)}
			}
	}
	*/	

//UISupport.showInfoMessage("Test Strategy Example")
String testStrategy = UISupport.prompt("Select the data source for running your Test Plan.","Test Strategy","csv", "GUI", "Database")
testRunner.testCase.setPropertyValue("testStrategy", testStrategy)

switch(testStrategy) {
	case "GUI":
	// display the SwingBuilder GUI, read inputs, and write to soapui properties
	gui.show()
	testRunner.testCase.testSuite.project.setPropertyValue("Project", vars.project.text)
	testRunner.testCase.testSuite.project.setPropertyValue("Environment", vars.environment.text)
	testRunner.testCase.testSuite.project.setPropertyValue("Application", application.getSelectedItem())	

	break;
	case "csv":
	String csvLocation = UISupport.prompt("Enter the full path and location of your csv file","C:\\Temp\\testfiles\\testplan.csv", "C:\\Temp\\testfiles\\testplan.csv")
	testRunner.testCase.setPropertyValue("csvLocation", csvLocation)
	case "Database":
	log.info "" //do nothing here (covered in the simulator test case step)
	break;
}</con:setupScript><con:properties><con:property><con:name>testStrategy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>csvLocation</con:name><con:value>C:\Temp\testfiles\testplan.csv</con:value></con:property><con:property><con:name>numberOfRows</con:name><con:value>6</con:value></con:property><con:property><con:name>numberOfTests</con:name><con:value>5</con:value></con:property><con:property><con:name>Stop</con:name><con:value>T</con:value></con:property><con:property><con:name>testCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>nextTestCounter</con:name><con:value>7</con:value></con:property><con:property><con:name>TestID</con:name><con:value>usersim05</con:value></con:property><con:property><con:name>TestObjective</con:name><con:value>Create a random user</con:value></con:property><con:property><con:name>Application</con:name><con:value>Data-Portal User Creation</con:value></con:property><con:property><con:name>SampleTestDataItem1</con:name><con:value>ID747038</con:value></con:property><con:property><con:name>SampleTestDataItem2</con:name><con:value>A</con:value></con:property></con:properties></con:testCase><con:testCase id="b2b6e6ac-8b28-40d3-830d-5f2823a2bb0f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CoreSimulatorV02" searchProperties="true" disabled="true"><con:description>V02 - based on user sim during POC build out</con:description><con:settings/><con:testStep type="groovy" name="initiate" id="0900b976-aad0-41b2-acb3-905d866aee9e"><con:settings/><con:config><script>/*
 *  Initiate Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which reads csv file and does quantity counts for building the loop
 *  	
 *  V02 18/06/2018 :
 *  	Added functionality to read from a properties file. As distinct from the test plan csv, this is where env properties will be stored. 
 *  		A future version will have switchability (ie to a Test DB) 
 *  	
 *  	Originally added then removed functionality to read from the properties file. Now moved into Test Case startup script (to improve library loading)
 *  		
 *  
*/


// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// read the csv file location
def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 

// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	
	// read the csv file
	def f = new File (csvLocation)
	
	// count the rows to determine scope/quantities
	List r = f.readLines()
	rows = r.size.toInteger()

	// set the number of tests (and number of rows)
	testRunner.testCase.setPropertyValue("numberOfRows", rows.toString())
	testRunner.testCase.setPropertyValue("numberOfTests", (rows-1).toString())
	log.info "Number of tests in csv file " + f + " has been stored in readiness for execution"

	// initialise the counters for csv 
	testRunner.testCase.setPropertyValue("Stop", "F") //check if correct
	testRunner.testCase.setPropertyValue("testCounter", "1")
	testRunner.testCase.setPropertyValue("nextTestCounter", "2")

	break;
}

//log completion
testRunner.testCase.setPropertyValue("001_INITIATE", "initiation completed and counters set")




/*
//egs for basic sinc (should put at the log/end of the run and just pull in all the step loggers (use working props folder)
def strPath = "${homepath}\\log\\${strDate}\\${testEnvironment}\\"
def strLogProps = "PROPERTIES_${soapTestCaseName}_${testEnvironment}_${strUserID}_${strHost}_${strTime.substring(0,8)}.txt"		
*/</script></con:config></con:testStep><con:testStep type="groovy" name="read" id="ca7fead8-5c3a-4efd-bdf3-ed3e182de219"><con:settings/><con:config><script>/*
 *  Read Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which reads a DEMO csv file and maps into soapui properties for consumption. User will need to customise for their application
 *  	This version also commenced the creation of a property which could be used for a future data sinc
 *  	
 *  V02 20/06/2018
 *  	Customising for the first POC (Data Portal User Simulator)
 */

// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// read the csv file location
def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 

// get the counters
def testCounter = (testRunner.testCase.getPropertyValue("testCounter")).toInteger()
def nextTestCounter = (testRunner.testCase.getPropertyValue("nextTestCounter")).toInteger()


// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	
	// read the csv file
	def f = new File (csvLocation)
	
	// read the lines
	List r = f.readLines()

	// store the row
	String[] testInput = r[testCounter].split(',')

	/* 
	 *  CRITICAL REQUIREMENT
	 *  the list of properties here need to align with your csv file
	 */

	// map the row into properties(using matching names for readability)
	def testID = testInput[0]
	def testObjective = testInput[1]
	def testEnvironment = testInput[2]
	def application = testInput[3]
	
	// customisations (for the Data Portal User Simulator)
	def testRoles = testInput[4]	
	def testGroupings = testInput[5]	
	def testGroupAction = testInput[6]	

	//def user = testInput[3] // property called "user" represents an array of rows at position 3 (Column D, hence column named "User")
	//def password = testInput[4] // property called "password" represents an array of rows at position 4 (Column E, hence column named "Pwd")


	// store into soapui properties
	testRunner.testCase.setPropertyValue("TestID", testID)
	testRunner.testCase.setPropertyValue("TestObjective", testObjective)
	testRunner.testCase.setPropertyValue("Application", application)

	// customisations (for the Data Portal User Simulator)
	testRunner.testCase.setPropertyValue("testRoles", testRoles)
	testRunner.testCase.setPropertyValue("testGroupings", testGroupings)		
	testRunner.testCase.setPropertyValue("testGroupAction", testGroupAction)


	// create a property which describes the test (and then that property can be used inthe data sinc for example), includes customisations for Data Portal User Simulator
	def currentTest = "ID: " + testID + " " + "Objective: " + testObjective + "App: " + application + " Testing Conditions: " + testRoles + " " + testGroupings + " " + testGroupAction
	testRunner.testCase.setPropertyValue("002_READ_TEST_CONDITIONS", currentTest + " loaded from " + csvLocation)
	//log.info currentTest
	break;
}

/*
 * 
 * TO DO - this is a good stage for:
 * 	setting up properties for a datasinc (ie to record pre-execution status)
 *	OR alternatively, save properties to a file (as the pre-execution status)
 * 	
 * 	After debugging for correctness, remove old log.info checks	
 */
	



</script></con:config></con:testStep><con:testStep type="groovy" name="set" id="f11e838f-e266-4d4a-97f9-8bceddc751f4"><con:settings/><con:config><script>/*
 *  Set Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which counts through each step and turns them all on by default.
 *  	This version is not using a libary call. A Future version will do this
 *  	
 *  V02 19/06/2018 :
 *  Added library calls and used to enable all steps
 *  	  	
 */

// Get Library
def core = testRunner.testCase.getPropertyValue("propCore")
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
def script = testRunner.testCase.getPropertyValue("propScript") 
scripts = core.testSuites["${script}"]

scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)

// Set Endpoints - current logic is basd on properties file -> soapui properties -> endpoint (make cleverer if required)
/*
 * dont need to do anything
 */


// Enable All steps - This is the default framework setting to provide a starting point for setting based on test case logic
scripts.testCases["automation-v1"].testSteps["ManageTestCaseSteps"].run(testRunner, context)
context.ManageTestCaseSteps.enableAllSteps(context.testCase)
 
// Set Steps based on Test Case Logic - Designer required to adjust here (ie turn off stff not required for the test)
context.testCase.getTestStepByName("log").setDisabled(true)
def setLogger = "Steps disabled"


/*
 *  Customisation logic for Data Portal User Simulator HERE
 *    
 */
def testConditions = [:]
testConditions["testGroupAction"] = testRunner.testCase.getPropertyValue("testGroupAction") // Value set for adding or deleting groupings (supports "AddGroup" or "DeleteGroup")
if (testConditions["testGroupAction"] == "AddGroup") { testConditions["testGroupAction"] = "ADD" } 
else if (testConditions["testGroupAction"] == "DeleteGroup") { testConditions["testGroupAction"] = "DELETE" } // but currently only runs if there was a group added (logic not handling add then delete in this version)

// Save Test Conditions Data Change back to Test Case Properties
context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, testConditions)
setLogger = setLogger + ", Customised Testing Conditions applied"
testRunner.testCase.setPropertyValue("003_SET_TEST_CONDITIONS", setLogger)
 
</script></con:config></con:testStep><con:testStep type="groovy" name="data" id="81a248e3-3ec3-4b89-95ae-d866478db8c1"><con:settings/><con:config><script>/*
 *  Data Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	First working version which produces DEMO data and writes to properties for Consumption.
 *		As per the "set" step, the conditions of the test being executed will drive what data is generated (for mapping into SOAP/REST/JDBC/ASSERTIONS etc)
 * 		During early/immature versions, the simulator will require you to generate the SPECIFIC data you need and to do the step mapping.
 * 		However a future version will consist of a data generator template which mimicks all of the possible data generation combinations, and
 * 		which enables the Tester to port/copy into their framework
 * 	

 * 			Process:
 * 			1. Read in soapui properties for the test inputs
 * 			2. Run if/switch logic on that input
 * 			3. Create Data
 * 			
 *  V02 from 14/06/2018 :
 *  	Building data based on library calls plus customisations (for User Sim)
 * 			
 */
 
import java.util.Random
import org.apache.commons.lang.RandomStringUtils

// Define a property map to store the data
def data=[:]

// Define a property map where logic is required based on test inputs
def test=[:]

// Get Library
def core = testRunner.testCase.getPropertyValue("propCore")
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")

def script = testRunner.testCase.getPropertyValue("propScript") 
scripts = core.testSuites["${script}"]

// Get Classes
scripts.testCases["automation-v1"].testSteps["BioGenerator"].run(testRunner, context)

scripts.testCases["automation-v1"].testSteps["HealthData"].run(testRunner, context)
context.HealthData.abnGen()
context.HealthData.hardCodedDataPortalData()
scripts.testCases["automation-v1"].testSteps["SystemRelated"].run(testRunner, context)

scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)
//context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, context.HealthData.dataPortalHCD)


// Get Data (from Library)
data["dataFirstName"] = context.BioGenerator.firstName; data["dataLastName"] = context.BioGenerator.lastName; 
//data["dataAbn"] = context.HealthData.abn
data["dataTester"] = context.SystemRelated.username


// Data sourced from a Method with hard-coded data (might be replaced when knowledge of user data deepens)
data["dataRequestSystem"] = context.HealthData.dataPortalHCD["requestSystem"]; data["dataGivenNameKey"] = context.HealthData.dataPortalHCD["GivenNameKey"]; data["dataLastNameKey"] = context.HealthData.dataPortalHCD["LastNameKey"]
data["dataAbnAttribute"] = context.HealthData.dataPortalHCD["AbnAttribute"]; data["dataAbn"] = context.HealthData.dataPortalHCD["ABNorganisation"]; data["dataPasswordKey"] = context.HealthData.dataPortalHCD["PasswordKey"]
data["dataPassword"] = context.HealthData.dataPortalHCD["password"]; data["dataAccType"] = context.HealthData.dataPortalHCD["accType"]; data["dataAccTCId"] = context.HealthData.dataPortalHCD["acceptedTCidRequest"]	
data["dataTermsValue"] = context.HealthData.dataPortalHCD["termsValue"]; data["dataTrue"] = context.HealthData.dataPortalHCD["true"]; data["dataEmailAddress"] = context.HealthData.dataPortalHCD["emailAddress"]
data["dataPhoneNumber"] = context.HealthData.dataPortalHCD["phoneNumber"]; data["dataUsage"] = context.HealthData.dataPortalHCD["usage"]; data["dataUsageAssert"] = context.HealthData.dataPortalHCD["usageAssert"]
data["dataServicesName"] = context.HealthData.dataPortalHCD["servicesName"]


/*
 *  Data Switching Logic - customised for Data Portal User Simulator. The xml request template has 4 x rolekey/rolevalues hence if the case has less than 4 role duplicate them
 */

// Read in the selected TestRoles as designed in your csv file (eg ReceiverReviewerApprover, ProducerUploaderReceiver,ReportDeveloper,ReportViewer,..., etc as per eacg switch)
test["testRoles"] = testRunner.testCase.getPropertyValue("testRoles")

//usersim01
if (test["testRoles"] == "ReceiverReviewerApprover") {
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"]; data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_APPROVER"]
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REVIEWER"];	data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REVIEWER"]
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_RECEIVER"]; data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_RECEIVER"]}

//usersim02
else if (test["testRoles"] == "ProducerUploaderReceiver") {
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PRODUCER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PRODUCER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_UPLOADER"]; data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_UPLOADER"]
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_RECEIVER"]; data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_RECEIVER"]
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_RECEIVER"]; data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_RECEIVER"]}

//usersim03
else if (test["testRoles"] == "ReportDeveloper") {
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REPORT_DEVELOPER"];data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REPORT_DEVELOPER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REPORT_DEVELOPER"];data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REPORT_DEVELOPER"]
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REPORT_DEVELOPER"];data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REPORT_DEVELOPER"]
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REPORT_DEVELOPER"];data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REPORT_DEVELOPER"]}

//usersim04
else if (test["testRoles"] == "ReportViewer") {
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REPORT_VIEWER"];data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REPORT_VIEWER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REPORT_VIEWER"];data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REPORT_VIEWER"]
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REPORT_VIEWER"];data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REPORT_VIEWER"]
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REPORT_VIEWER"];data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REPORT_VIEWER"]}

//usersim05
else if (test["testRoles"] == "SubmissionUploader") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_UPLOADER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_UPLOADER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_UPLOADER"]; data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_UPLOADER"] //duplicate
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_UPLOADER"]; data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_UPLOADER"] //duplicate
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_UPLOADER"]; data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_UPLOADER"]	//duplicate
	}

//usersim06
else if (test["testRoles"] == "SubmissionReviewer") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"]; 	data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"]	
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"]; 	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"] //duplicate	
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"]; 	data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"] //duplicate	
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"]; 	data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"] //duplicate
	}

//usersim07
else if (test["testRoles"] == "SubmissionUploaderReviewerApprover") {
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_UPLOADER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_UPLOADER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"]; 	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"]	
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"];	data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_APPROVER"]	
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"];	data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_APPROVER"] //duplicate
	}
//usersim08
else if (test["testRoles"] == "SubmissionReviewerApprover") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"]; 	data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"]	
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"];	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_APPROVER"]	
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"];	data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_APPROVER"] //duplicate	
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"];	data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_APPROVER"] //duplicate
	}

//usersim09
else if (test["testRoles"] == "SubmissionApprover") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"];	data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_APPROVER"]	
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"];	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_APPROVER"]  //duplicate	
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"];	data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_APPROVER"]  //duplicate	
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"];	data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_APPROVER"]  //duplicate					
	}
//usersim10
else if (test["testRoles"] == "SubmissionReceiver") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_RECEIVER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_RECEIVER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_RECEIVER"]; data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_RECEIVER"]  //duplicate	
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_RECEIVER"]; data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_RECEIVER"]  //duplicate	
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_RECEIVER"]; data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_RECEIVER"]	 //duplicate	
	
	}
//usersim11
else if (test["testRoles"] == "SubmissionUploaderReviewer") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_UPLOADER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_UPLOADER"]	
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"]; 	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"]	
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"]; 	data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"] //duplicate	
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"]; 	data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"] //duplicate		
	}
//usersim12
else if (test["testRoles"] == "DataPortalProducer") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PRODUCER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PRODUCER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PRODUCER"]; data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PRODUCER"]  //duplicate	
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PRODUCER"]; data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PRODUCER"]  //duplicate	
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PRODUCER"]; data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PRODUCER"]  //duplicate	
	}
//usersim13
else if (test["testRoles"] == "DataPortalReviewer") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REVIEWER"];	data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REVIEWER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REVIEWER"];	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REVIEWER"]  //duplicate	
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REVIEWER"];	data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REVIEWER"]  //duplicate	
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REVIEWER"];	data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REVIEWER"]  //duplicate					
	}
	
//usersim14
else if (test["testRoles"] == "DataPortalPublisher") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PUBLISHER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PUBLISHER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PUBLISHER"]; data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PUBLISHER"]  //duplicate	
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PUBLISHER"]; data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PUBLISHER"]  //duplicate	
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PUBLISHER"]; data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PUBLISHER"]  //duplicate				
	}

//usersim15
else if (test["testRoles"] == "DataPortalProducerReviewer") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PRODUCER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PRODUCER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REVIEWER"];	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REVIEWER"]
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REVIEWER"];	data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REVIEWER"]  //duplicate	
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REVIEWER"];	data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REVIEWER"]  //duplicate			
	}

//usersim16
else if (test["testRoles"] == "DataPortalReviewerPublisher") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REVIEWER"];	data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REVIEWER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PUBLISHER"]; data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PUBLISHER"]
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PUBLISHER"]; data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PUBLISHER"]  //duplicate	
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PUBLISHER"]; data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PUBLISHER"]  //duplicate				
	}

//usersim17
else if (test["testRoles"] == "DataPortalProducerReviewerPublisher") { 
	data["dataRole1"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PRODUCER"]; data["dataValue1"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PRODUCER"]
	data["dataRole2"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REVIEWER"];	data["dataValue2"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REVIEWER"]	
	data["dataRole3"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PUBLISHER"]; data["dataValue3"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PUBLISHER"]
	data["dataRole4"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PUBLISHER"]; data["dataValue4"] = context.HealthData.dataPortalHCD["roleValueDP_INT_PUBLISHER"]  //duplicate				
	}



/*
data["dataRoleKeyIntSubRev"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_REVIEWER"]
data["dataRoleValueIntSubRev"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_REVIEWER"]
data["dataRoleKeyIntSubApp"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_APPROVER"]
data["dataRoleValueIntSubApp"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_APPROVER"]
data["dataRoleKeyIntSubUpl"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_UPLOADER"]
data["dataRoleValueIntSubUpl"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_UPLOADER"]
data["dataRoleKeyIntSubRec"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_SUB_RECEIVER"]
data["dataRoleValueIntSubRec"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SUB_RECEIVER"]
data["dataRoleKeyIntPro"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PRODUCER"]
data["dataRoleValueIntPro"] =	context.HealthData.dataPortalHCD["roleValueDP_INT_PRODUCER"]
data["dataRoleKeyIntRev"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REVIEWER"]
data["dataRoleValueIntRev"] =	context.HealthData.dataPortalHCD["roleValueDP_INT_REVIEWER"]
data["dataRoleKeyIntPub"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_PUBLISHER"]
data["dataRoleValueIntPub"] =	context.HealthData.dataPortalHCD["roleValueDP_INT_PUBLISHER"]
data["dataRoleKeyIntUAdm"] =	context.HealthData.dataPortalHCD["roleKeyDP_INT_USER_ADMIN"]
data["dataRoleValueIntUAdm"] = context.HealthData.dataPortalHCD["roleValueDP_INT_USER_ADMIN"]
data["dataRoleKeyIntSCAdm"] =	context.HealthData.dataPortalHCD["roleKeyDP_INT_SEC_CAT_ADMIN"]
data["dataRoleValueIntSCAdm"] = context.HealthData.dataPortalHCD["roleValueDP_INT_SEC_CAT_ADMIN"]
data["dataRoleKeyIntGpAdm"] =	context.HealthData.dataPortalHCD["roleKeyDP_INT_GROUPING_ADMIN"]
data["dataRoleValueIntGpAdm"] = context.HealthData.dataPortalHCD["roleValueDP_INT_GROUPING_ADMIN"]
data["dataRoleKeyIntRepV"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REPORT_VIEWER"]
data["dataRoleValueIntRepV"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REPORT_VIEWER"]
data["dataRoleKeyIntRepD"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REPORT_DEVELOPER"]
data["dataRoleValueIntRepD"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REPORT_DEVELOPER"]
data["dataRoleKeyIntRepAdm"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_REPORTING_ROUND_ADMIN"]
data["dataRoleValueIntRepAdm"] = context.HealthData.dataPortalHCD["roleValueDP_INT_REPORTING_ROUND_ADMIN"]
data["dataRoleKeyIntOrgAdm"] = context.HealthData.dataPortalHCD["roleKeyDP_INT_ORGANISATION_ADMIN"]
data["dataRoleValueIntOrgAdm"] = context.HealthData.dataPortalHCD["roleValueDP_INT_ORGANISATION_ADMIN"]
*/


// Save Data to Test Case Properties 
context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, data)

// Generate a Data String (for Logging/Reporting purposes). Do this by storing the entire property map.
//log.info data
testRunner.testCase.setPropertyValue("004_DATA_GENERATED_FOR_TEST", data.toString())
</script></con:config></con:testStep><con:testStep type="manualTestStep" name="INSERT SOAP JDBC HERE" id="659f026b-afaf-4a83-a5c3-60ce4b0170e8"><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="groovy" name="log" id="16b2f6d8-02f6-4168-902a-c712027f70e8"><con:settings/><con:config><script><![CDATA[/*
 *  Log Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	WIP Log, currently not working  **POSSIBLY DUE TO ENVIRONMENT WHEREBY REQUIRED PACKAGE NOT AVAILABLE NEED TO TEST WITH LOCAL SOAPUI INSTALL**
 *  			
 */
import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)

def objGlobal = com.eviware.soapui.SoapUI.globalProperties
def objProject = testRunner.getTestCase().getTestSuite().getProject()
def objCase = testRunner.getTestCase()
def strUserID = System.getenv() ['USERNAME']
def strHost = System.getenv() ['COMPUTERNAME']
def strDate = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())
def strTime = new java.text.SimpleDateFormat("yyyyMMddHHmmsss").format(new Date())
def testEnvironment = "SIT"
def projectName = "MyTestProject"
def soapTestCaseName = objCase.name
def homepath = System.getProperty("user.home")

// properties used to create a data sinc file
def strLogGlobal = "testEnvironment=" + testEnvironment + ","
def strLogProject = "projectName=" + projectName + ","
def strLogCase = "soapTestCaseName=" +soapTestCaseName + ","
//def strLogStep = "

// Create the Log Path if it doesnt exist - strDate means a new folder will be created for every unique day that has a result to log
def strPath = "${homepath}\\log\\${strDate}\\${testEnvironment}\\"

// Create a file name for a results sync
def strLogProps = "PROPERTIES_${soapTestCaseName}_${testEnvironment}_${strUserID}_${strHost}_${strTime.substring(0,8)}.txt"

// Loop through steps and log when the step has been enabled
def step = objCase.getTestStepList()
step.each
	{
		if (!it.disabled){
			
			if((it.instanceof (WsdlRunTestCaseTestStep)) || (it.instanceof (WsdlPropertiesTestStep))){
				def prop = it.getPropertyList()
				prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
				new File("${strPath}","${strLogProps}").append('\r\n' + "[${strTime.padRight(17)} - TestCase + TestStep]:,${strLogCase}${strLogStep}")
			}
			
			else if (it.instanceof (WsdlTestRequestStep)){
				if (it.getTestRequest().getRequestContent()/substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"} //extension catering for fixed length jms and xml
				new File("${strPath}","soapREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.xml").append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,'').replaceAll(/\s+/,''))	
			}
			
			else if (it.instanceof (JdbcRequestTestStep)){
				new File("${strPath}","jdbcREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.sql").append(context.expand (it.getQuery().replaceAll(/\n/,'\r\n')))
				if (it.getResponseContent().contains("<Row>")){
					new File("${strPath}","jdbcREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.sql").append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,'').replaceAll(/\s+/,''))
				}
			}
			//else {log.info "TO FIX"}
		}
	}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="loop" id="79ee70fc-95e5-4986-b2ab-471c3455835e"><con:settings/><con:config><script>/*
 *  Loop Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	Reads the Test Strategy and ajusts counters based on that source. Then checks the position and sets the Stop when at the end. 
 *  		This version currently works for CSV only (scalability ready for future DB storage of Test Cases)
 *  V02 26/06/2018
 *  	Enhancing counter position with test case descriptors to improve overall logging
 *  	Added data to test suite to enable other simulators to consume  			
 */


// read the test strategy selection
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

// get current counter positions and test case descriptors
numberOfRows = testRunner.testCase.getPropertyValue("numberOfRows").toInteger()
numberOfTests = testRunner.testCase.getPropertyValue("numberOfTests").toInteger()
testCounter = testRunner.testCase.getPropertyValue("testCounter").toInteger()
nextTestCounter = testRunner.testCase.getPropertyValue("nextTestCounter").toInteger()
testID = testRunner.testCase.getPropertyValue("TestID")
testObjective = testRunner.testCase.getPropertyValue("TestObjective")

// log an update to screen and to step logger
stepLogger = "Test ${testCounter}"  + " " + "${testID}" + " " + "${testObjective}" + " was completed"
log.info stepLogger

// Customisation - adding user id to the screen update
userID = testRunner.testCase.getPropertyValue("respUserId")
log.info "For user id ${userID}"

// Get some additional properties to write to testSuite (so that other Simulators can consume)  
roles =  testRunner.testCase.getPropertyValue("testRoles")
groupings = testRunner.testCase.getPropertyValue("testGroupings")
suiteUserData = "${testID}" + ":" + "${userID}" + ":" + "${roles}" + ":" + "${groupings}"
testRunner.testCase.testSuite.setPropertyValue("dataPortalSimulator_${testCounter}", suiteUserData)


// apply logic for csv or Database selection
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;

	case "csv":
	
	// increment the counter (as the test has already been executed)
	testCounter = testCounter + 1
	nextTestCounter = nextTestCounter + 1
	testRunner.testCase.setPropertyValue("testCounter", testCounter.toString())
	testRunner.testCase.setPropertyValue("nextTestCounter", nextTestCounter.toString())

	// check if at the end of the test list
	if (testCounter > numberOfTests) {
		testRunner.testCase.setPropertyValue("Stop", "T")
		//no loop
		assert true}
	else {
		testRunner.testCase.setPropertyValue("Stop", "F")
		//need to continue the loop

		sleep(1000) //temp delay to see logic
		testRunner.gotoStepByName("read")}
	break;
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="bcb9f720-d9c3-4798-9e2c-3aa8487b82f4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CoreSimulatorV03" searchProperties="true" disabled="true"><con:description>V03 18/07/2018- based on user sim and asset sim during POC build out</con:description><con:settings/><con:testStep type="groovy" name="initiate" id="8d54cd37-94a5-4cd6-9afa-e40d65be9a8c"><con:settings/><con:config><script>/*
 *  Initiate Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which reads csv file and does quantity counts for building the loop
 *  	
 *  V02 18/06/2018 :
 *  	Added functionality to read from a properties file. As distinct from the test plan csv, this is where env properties will be stored. 
 *  		A future version will have switchability (ie to a Test DB) 
 *  	
 *  	Originally added then removed functionality to read from the properties file. Now moved into Test Case startup script (to improve library loading)
 *  	04/07/2018 - Cleanup
 *  	
 *  Moved to Core Simulator V03 as is 18/07/2018 
 *  
 *  Merged enhancements done via POC 24/07/2018
 *  		
 *  
*/

//*********************************************************
// read inputs (test strategy selection, csv file location)
//*********************************************************
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")
def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 

//******************************************
// apply logic for csv or Database selection
//******************************************
switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step

	// forcing no logging of counters as n/a, and setting the stop (need to change if gui test looping is required in future)
	logger = ""
	testRunner.testCase.setPropertyValue("Stop", "T");testRunner.testCase.setPropertyValue("testCounter", "0");testRunner.testCase.setPropertyValue("nextTestCounter", "0")

	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;
	case "csv":
	// read the csv file and count rows to determine scope/quantities
	def f = new File (csvLocation);List r = f.readLines();rows = r.size.toInteger()

	// set the number of tests (and number of rows)
	testRunner.testCase.setPropertyValue("numberOfRows", rows.toString());testRunner.testCase.setPropertyValue("numberOfTests", (rows-1).toString())
	logger = "The number of tests in csv file " + f + " has been stored in readiness for execution"

	// initialise the counters for csv 
	testRunner.testCase.setPropertyValue("Stop", "F");testRunner.testCase.setPropertyValue("testCounter", "1");testRunner.testCase.setPropertyValue("nextTestCounter", "2")
	break;
}

//***************
//Update Logger
//***************
testRunner.testCase.setPropertyValue("001_INITIATE", "${logger}. Initiation completed and counters set")</script></con:config></con:testStep><con:testStep type="groovy" name="read" id="9a19213d-0e89-48f0-ab2c-2f9b90883919"><con:settings/><con:config><script>/*
 *  Read Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which reads a DEMO csv file and maps into soapui properties for consumption. User will need to customise for their application
 *  	This version also commenced the creation of a property which could be used for a future data sinc
 *	
 *  V02 20/06/2018
 *  	Customising for the first POC (Data Portal User Simulator)
 *  	
 *  V03 28/06/2018
 *   Customising for Data Portal Asset Simulator (replacing previous customisation)
 *  	04/07/2018 - cleanup
 *  	
 *  Merged enhancements done via POC 24/07/2018
 */

//***********************************
// Define property maps to store data
//***********************************
def test=[:]

//**************
// Get Library
//**************
def core = testRunner.testCase.getPropertyValue("propCore")
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
def script = testRunner.testCase.getPropertyValue("propScript") 
scripts = core.testSuites["${script}"]

//*****************************
// Get Classes (from Library)
//*****************************
scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)


//*****************************************************************************
// read inputs (test strategy selection, csv file location, test case counters)
//*****************************************************************************
def testStrategy = testRunner.testCase.getPropertyValue("testStrategy");def csvLocation = testRunner.testCase.getPropertyValue("csvLocation") 
def testCounter = (testRunner.testCase.getPropertyValue("testCounter")).toInteger();def nextTestCounter = (testRunner.testCase.getPropertyValue("nextTestCounter")).toInteger()

//*******************************************
// apply logic for csv or Database selection
//*******************************************

switch(testStrategy) {
	case "GUI":
	log.info "" //already handled prior to first step
	break;
	case "Database":
	log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
	break;
	case "csv":
	// read the csv file, csv lines, and store the row
	def f = new File (csvLocation); List r = f.readLines(); String[] testInput = r[testCounter].split(',')

	// map the row into properties(using matching names for readability). Properties below and your csv file need to align (otherwise your test setup will be incorrect)
	test["testID"] = testInput[0]; test["testObjective"] = testInput[1]; test["testEnvironment"] = testInput[2] //standard types
	test["condition1"] = testInput[3]; test["condition2"] = testInput[4]; test["condition3"] = testInput[5]; test["condition4"] = testInput[6]	// customisations
	
	break;}
	// store into soapui properties
	context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, test)
	

	// create a test descriptor (for logging etc), includes customisations
	def currentTest = "ID: " + test["testID"] + " " + "Objective: " + test["testObjective"] + "Environment: " + test["testEnvironment"] + " Condition1: " + test["condition1"] + " Condition2: " + test["condition2"] + ": " + " Condition3: " + test["condition3"] + " Condition4: " + test["condition4"]
	testRunner.testCase.setPropertyValue("002_READ_TEST_CONDITIONS", currentTest + " loaded from " + csvLocation)
	</script></con:config></con:testStep><con:testStep type="groovy" name="set" id="90e21c53-726d-4b5e-9dcf-7f7819b209f7"><con:settings/><con:config><script>/*
 *  Set Script
 *  Author : Michael De Robertis 
 *  V01 10/06/2018 : 
 *  	First working version which counts through each step and turns them all on by default.
 *  	This version is not using a libary call. A Future version will do this
 *  	
 *  V02 19/06/2018 :
 *  Added library calls and used to enable all steps
 *  
 *  V03 28/06/2018
 *   Customising for Data Portal Asset Simulator (replacing previous customisation)
 *   05/07/2018 - Cleanup
 *   
 *   18/07/2018 - Ported to Core Simulator V03, merged logic and decustomised 
 */
//*****************
// Get the Library
//*****************
def core = testRunner.testCase.getPropertyValue("propCore")
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
def script = testRunner.testCase.getPropertyValue("propScript") 
scripts = core.testSuites["${script}"]
scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)

//**************************
// Set Endpoints If required (current logic is based on properties file -> soapui properties -> endpoint)
//**************************

//****************************
// Enable All steps by default
//****************************
scripts.testCases["automation-v1"].testSteps["ManageTestCaseSteps"].run(testRunner, context)
context.ManageTestCaseSteps.enableAllSteps(context.testCase)
def setLogger = "Steps disabled"
 
//**********************************
// Customise default step conditions
//**********************************
// eg turn off the DummyTestStep
context.testCase.getTestStepByName("DummyTestStep").setDisabled(true)

//*********************************************
// Customise step conditions based on test data
//*********************************************
def testConditions = [:] // Map to store test conditions 
// apply your logic here, eg store a soapui property to the testConditions map and do something based on the value


//************************************************************************************
// Save Test Conditions Data Change back to Test Case Properties and update the logger
//************************************************************************************
context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, testConditions)
setLogger = setLogger + ", Customised Testing Conditions applied"
testRunner.testCase.setPropertyValue("003_SET_TEST_CONDITIONS", setLogger)
 
</script></con:config></con:testStep><con:testStep type="groovy" name="data" id="c296891d-04fc-4611-86e4-4838db290225"><con:settings/><con:config><script>/*
 *  Data Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	First working version which produces DEMO data and writes to properties for Consumption.
 *		As per the "set" step, the conditions of the test being executed will drive what data is generated (for mapping into SOAP/REST/JDBC/ASSERTIONS etc)
 * 		During early/immature versions, the simulator will require you to generate the SPECIFIC data you need and to do the step mapping.
 * 		However a future version will consist of a data generator template which mimicks all of the possible data generation combinations, and
 * 		which enables the Tester to port/copy into their framework
 * 	

 * 			Process:
 * 			1. Read in soapui properties for the test inputs
 * 			2. Run if/switch logic on that input
 * 			3. Create Data
 * 			
 *  V02 from 14/06/2018 :
 *  	Building data based on library calls plus customisations (for User Sim)

 *  V03 from 28/06/2018
 *   As per V02 but for Asset Sim
 *
 *  18/07/2018 - ported to Core Simulator V03 and decustomised
 */
 
import java.util.Random
import org.apache.commons.lang.RandomStringUtils

//***********************************
// Define property maps to store data
//***********************************
def data=[:]; def test=[:]

//**************
// Get Library
//**************
def core = testRunner.testCase.getPropertyValue("propCore")
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
def script = testRunner.testCase.getPropertyValue("propScript") 
scripts = core.testSuites["${script}"]

//*****************************
// Get Classes (from Library)
//*****************************
scripts.testCases["automation-v1"].testSteps["BioGenerator"].run(testRunner, context)
scripts.testCases["automation-v1"].testSteps["HealthData"].run(testRunner, context)
context.HealthData.assetData()
context.HealthData.hardCodedDataPortalData()
scripts.testCases["automation-v1"].testSteps["SystemRelated"].run(testRunner, context)
scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context)

//*********************************************************
// Create Data (including from the Library Classes/Methods)
//*********************************************************
data["dataRequestSystem"] = context.HealthData.dataPortalHCD["requestSystem"]; data["dataFalse"] = context.HealthData.dataPortalHCD["false"]
data["dataAssetTitle"] = context.HealthData.dataAssetData["assetTitle"];data["dataAssetDescription"] = context.HealthData.dataAssetData["assetDescription"]
data["dataReportingRndRefId"] = context.HealthData.dataAssetData["assetRepRndRefId"]
data["dateTime1"] = new java.text.SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.99999999+10:30").format(new Date())


//**********************************
// Data Switching Logic 
//	Below are examples only
//*********************************

// Use the test property map and read in test conditions (ie from csv/db test source) 
	// test["testSomething"] = testRunner.testCase.getPropertyValue("testSomething")
	
// Set some behavior based on the test conditions
	//if (test["testSomething"]=="Something") {
		//data["setSomething"] = testRunner.testCase.getPropertyValue("someOtherValue")}

// Set comment tags for xml file blocks **turning off stuff**
	// this example assumes these properties exist on your xml request
	//data["dataxmlFileStart"] = "&lt;!--"
	//data["dataxmlFileEnd"] = "-->" 


//******************************************************
// Save Data to Test Case Properties and update logging
//******************************************************
context.ManageSoapUIProperties.saveToProperties(testRunner.testCase, data)

// Generate a Data String (for Logging/Reporting purposes). Do this by storing the entire property map.
testRunner.testCase.setPropertyValue("004_DATA_GENERATED_FOR_TEST", data.toString())
</script></con:config></con:testStep><con:testStep type="jdbc" name="DummyTestStep" id="80c8372d-eeab-4507-a40f-151f293c4175"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="log" id="928ebda7-34b8-4178-8ae5-5b98deeb6494"><con:settings/><con:config><script><![CDATA[/*
 *  Log Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	WIP Logging of Requests and Responses per SoapUI Tes Case Step, currently not working  
 *  	
 *  V02 From 04/07/2018
 *  	WIP Adding additional logging capability	
 *  	
 *  	18/07/2018 - ported from user sim and decustomised for V03 Core Simulator.
 *  			
 */


/*

//**************************
// Log Request and Responses
//**************************

CURRENTLY NOT WORKING, POSSIBLY DUE TO ENVIRONMENT WHEREBY REQUIRED PACKAGE NOT AVAILABLE NEED TO TEST WITH LOCAL SOAPUI INSTALL

import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)

def objGlobal = com.eviware.soapui.SoapUI.globalProperties
def objProject = testRunner.getTestCase().getTestSuite().getProject()
def objCase = testRunner.getTestCase()
def strUserID = System.getenv() ['USERNAME']
def strHost = System.getenv() ['COMPUTERNAME']
def strDate = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())
def strTime = new java.text.SimpleDateFormat("yyyyMMddHHmmsss").format(new Date())
def testEnvironment = "SIT"
def projectName = "MyTestProject"
def soapTestCaseName = objCase.name
def homepath = System.getProperty("user.home")

// properties used to create a data sinc file
def strLogGlobal = "testEnvironment=" + testEnvironment + ","
def strLogProject = "projectName=" + projectName + ","
def strLogCase = "soapTestCaseName=" +soapTestCaseName + ","
//def strLogStep = "

// Create the Log Path if it doesnt exist - strDate means a new folder will be created for every unique day that has a result to log
def strPath = "${homepath}\\log\\${strDate}\\${testEnvironment}\\"

// Create a file name for a results sync
def strLogProps = "PROPERTIES_${soapTestCaseName}_${testEnvironment}_${strUserID}_${strHost}_${strTime.substring(0,8)}.txt"

// Loop through steps and log when the step has been enabled
def step = objCase.getTestStepList()
step.each
	{
		if (!it.disabled){
			
			if((it.instanceof (WsdlRunTestCaseTestStep)) || (it.instanceof (WsdlPropertiesTestStep))){
				def prop = it.getPropertyList()
				prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
				new File("${strPath}","${strLogProps}").append('\r\n' + "[${strTime.padRight(17)} - TestCase + TestStep]:,${strLogCase}${strLogStep}")
			}
			
			else if (it.instanceof (WsdlTestRequestStep)){
				if (it.getTestRequest().getRequestContent()/substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"} //extension catering for fixed length jms and xml
				new File("${strPath}","soapREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.xml").append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,'').replaceAll(/\s+/,''))	
			}
			
			else if (it.instanceof (JdbcRequestTestStep)){
				new File("${strPath}","jdbcREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.sql").append(context.expand (it.getQuery().replaceAll(/\n/,'\r\n')))
				if (it.getResponseContent().contains("<Row>")){
					new File("${strPath}","jdbcREQ_${soapTestCaseName}_${it.name}_${testEnvironment}_${strUserID}_${strHost}_${strTime}.sql").append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,'').replaceAll(/\s+/,''))
				}
			}
			//else {log.info "TO FIX"}
		}
	}

*/

//**************************************************************************************************************
// Write some data to the Test Suite and Properties file for attributes deemed as re-usable in other simulators)
//	To do as (if) required
//**************************************************************************************************************
 
// Get Properties to write to testSuite (so that other Simulators can consume)
	//	egs below are standard types which you might want to always write up to Test Suite


	//standards
	testObjective = testRunner.testCase.getPropertyValue("testObjective") 
	testEnvironment = testRunner.testCase.getPropertyValue("testEnvironment")
	testCounter = testRunner.testCase.getPropertyValue("testCounter").toInteger()
	testID = testRunner.testCase.getPropertyValue("testID")
	soapTCName = (context.expand((testRunner.testCase).name))
	timestamp = new java.text.SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.99999999+10:30").format(new Date())

	//customisations
	testCondition1 = testRunner.testCase.getPropertyValue("testCondition1") 
	testCondition2 = testRunner.testCase.getPropertyValue("testCondition2")  
	testCondition3 = testRunner.testCase.getPropertyValue("testCondition3")  
	testCondition4 = testRunner.testCase.getPropertyValue("testCondition4")  
	
	//build content for storing, logging, as required (comma separated -> suited for csv)
	userData = "Time : ${timestamp}" + "," + "TESTID : ${testID}" + "," + "SoapUI Test Case Name: ${soapTCName}" + "," + "Counter: ${testCounter}" + "," + "Condition1: ${testCondition1}" + "," + "Condition2: ${testCondition2}" + "," + "Condition3: ${testCondition3}" + "," + "Condition4: ${testCondition4}"  
	testRunner.testCase.testSuite.setPropertyValue("${testID}", userData)

	//get properties which will help to form the path and file name of the properties file
	username = testRunner.testCase.getPropertyValue("systemUser")
	workingFolder = testRunner.testCase.getPropertyValue("propWorkingFolder")
	hostname = testRunner.testCase.getPropertyValue("systemHost")
	testSuite = context.expand((testRunner.testCase.testSuite).name)
	//dateTime = new java.text.SimpleDateFormat("yyyy-MM-dd'T'hh.mm.ss").format(new Date()) // increase the period to get less files (eg remove hh:mm:ss to get a daily log), decrease to get per test (eg leave hh:mm:ss)
	dateTime = new java.text.SimpleDateFormat("yyyy-MM-dd").format(new Date())

// Generate the Properties file
	//def propsFile = "PROPS_SUITE-${testSuite}-USER-${username}-HOST-${hostname}-${dateTime}.txt" //text properties file
	def propsFile = "PROPS_SUITE-${testSuite}-USER-${username}-HOST-${hostname}-${dateTime}.csv" //csv properties file
	new File("${workingFolder}\\log\\","${propsFile}").append('\r\n' + "${userData}")


]]></script></con:config></con:testStep><con:testStep type="groovy" name="loop" id="8151084f-1d71-4a54-860a-c6c546be55e3"><con:settings/><con:config><script>/*
 *  Loop Script
 *  Author : Michael De Robertis 
 *  V01 11/06/2018 : 
 *  	Reads the Test Strategy and ajusts counters based on that source. Then checks the position and sets the Stop when at the end. 
 *  		This version currently works for CSV only (scalability ready for future DB storage of Test Cases)
 *  V02 from 26/06/2018
 *  	Enhancing counter position with test case descriptors to improve overall logging
 *  	Added data to test suite to enable other simulators to consume 
 *  	
 *  18/07/2018 - ported to V03 Core Simulator and decustomised
 *  	 			
 */

//*********************************
// read the test strategy selection
//*********************************
	def testStrategy = testRunner.testCase.getPropertyValue("testStrategy")

//*********************************************************
// get current counter positions and test case descriptors
//*********************************************************
	numberOfRows = testRunner.testCase.getPropertyValue("numberOfRows").toInteger()
	numberOfTests = testRunner.testCase.getPropertyValue("numberOfTests").toInteger()
	testCounter = testRunner.testCase.getPropertyValue("testCounter").toInteger()
	nextTestCounter = testRunner.testCase.getPropertyValue("nextTestCounter").toInteger()
	testID = testRunner.testCase.getPropertyValue("TestID")
	testObjective = testRunner.testCase.getPropertyValue("TestObjective")

//*******************************************
// log an update to screen and to step logger
//*******************************************
	stepLogger = "Test ${testCounter}"  + " " + "${testID}" + " " + "${testObjective}" + " was completed"
	log.info stepLogger

//*************************
// Put Customisations Here
//*************************
		//	eg - add specific data to a property for logging to screen
		//userID = testRunner.testCase.getPropertyValue("someValue")
		//log.info "For user id ${userID}"

//********************************
// Apply looping logic 
//	for csv or Database selection
//	N/A for Gui
//********************************
	switch(testStrategy) {
		case "GUI":
		log.info "" //already handled prior to first step
		break;
		
		case "Database":
		log.info "Test Database Input Selected. This is a WORK IN PROGRESS"
		break;
		
		case "csv":
		// increment the counter (as the test has already been executed)
		testCounter = testCounter + 1
		nextTestCounter = nextTestCounter + 1
		testRunner.testCase.setPropertyValue("testCounter", testCounter.toString())
		testRunner.testCase.setPropertyValue("nextTestCounter", nextTestCounter.toString())

		// check if at the end of the test list
		if (testCounter > numberOfTests) {
			testRunner.testCase.setPropertyValue("Stop", "T")
			//no loop
			assert true}
		else {
			testRunner.testCase.setPropertyValue("Stop", "F")
			//need to continue the loop

			sleep(1000) //temp delay to see logic
			testRunner.gotoStepByName("read")}
		break;
		}</script></con:config></con:testStep><con:setupScript>/*
 *  Simulator Setup Script
 *  Author : Michael De Robertis 
 *  V01 14/06/2018 : 
 *  	Prompts user to select gui, csv, or database as the test case data source
 *  	Reads csv source (gui and db not yet enabled)
 *  
 *  V02 18/06/2018 :
 *  	Prompts user if they have a properties file (eg for loading environment stuff)
 *  	Reads properties file and maps to test case properties. Mandatory for this version given library loading already utilised and given
 *  		the need to have logical separation between a test case data source and test environment sources
 *  		Values in the file which define the library location are:
 *			propCore=Concepts (eg setting the project location to "Concepts")
 *  			propScript=Library (eg setting the test suite location to "Library").
 *  			The script to run a method then needs to read those values in order to set the the Class Group, Class, and how to apply the Methods.
 *  			Consult the Automation Team on how this works. 
   V03 04/07/2018 :
 *  	Updates not customisation specific applied (eg):
 *  		Added system property retrieval from library and storage into soapui properties (also added into user simulator)
 * 
 * Core Updates 18/07/2018 : 
 * 	Non-customisation merging
 * 	Moved Test Properties prompting up the order(
 * 	Enabled new Test Properties to store csv and db details
 * 	Enhanced Test Strategy Switch for CSV selection to prompt from Test Properties values
 * 	Enhanced Test Strategy Switch for Db selection to prompt from Test Properties values
 * 	
 * Merged enhancements/fixes from POC 24/07/2018
 */

import com.eviware.soapui.support.UISupport
import groovy.swing.SwingBuilder
import java.awt.FlowLayout as FL  // **LOOKS LIKE THIS IMPORT IS NOT WORKING***
import javax.swing.BoxLayout as BXL

//******************************************************
// Properties file management - get the file and load it
//******************************************************

// Get required stuff to build the location and file name
def projectName = testRunner.testCase.testSuite.project.name
String userHomeFolder = System.getProperty("user.home")
String userSoapUIHome = "${userHomeFolder}\\Documents\\Michael\\soapui"
//log.info userSoapUIHome

// Get the properties file location and read content to soapui test case properties
String propsLocation = UISupport.prompt("Enter the full path and location of your Environment Properties file","Location","${userSoapUIHome}\\core\\bin\\${projectName}.properties", "${userHomeFolder}\\core\\bin\\${projectName}.properties")
testRunner.testCase.setPropertyValue("propsLocation", propsLocation)

//Store the file into soapui properties
Properties props = new Properties()
File propsFile = new File("${propsLocation}")
propsFile.withInputStream { stream -> props.load(stream) }
props.each { testRunner.testCase.setPropertyValue(it.key, it.value)}		

//*********************
// Library Management  
//*********************

// Get the Library
def core = testRunner.testCase.getPropertyValue("propCore") //As per the property name in the loaded properties file 
core = testRunner.testCase.testSuite.project.workspace.getProjectByName("${core}")
def script = testRunner.testCase.getPropertyValue("propScript") //As per the property name in the loaded properties file 
scripts = core.testSuites["${script}"]





//*******************************
// Properties File Inputs
//	Set csv files and db details
//*******************************
def csv1,csv2,csv3,csv4,csv5,csv6,csv7, csv8, dbDef, dbOtherOne
csv1 = testRunner.testCase.getPropertyValue("propCsv1");csv2 = testRunner.testCase.getPropertyValue("propCsv2");csv3 = testRunner.testCase.getPropertyValue("propCsv3")
csv4 = testRunner.testCase.getPropertyValue("propCsv4");csv5 = testRunner.testCase.getPropertyValue("propCsv5");csv6 = testRunner.testCase.getPropertyValue("propCsv6")
csv7 = testRunner.testCase.getPropertyValue("propCsv7"); csv8 = testRunner.testCase.getPropertyValue("propCsv8")
dbDef = testRunner.testCase.getPropertyValue("propTestSourceDBConnection1");dbOtherOne = testRunner.testCase.getPropertyValue("propTestSourceDBConnection2")

//************************************************************************************************
// Test Strategy Management
//	Prompt for the applied test strategy (as in where the test case source will be derived from)
//	Apply appropriate action based on the selection
//************************************************************************************************
String testStrategy = UISupport.prompt("Select the data source for running your Test Plan.","Test Strategy","csv", "GUI", "Database")
testRunner.testCase.setPropertyValue("testStrategy", testStrategy)


// Run the Test Case GUI (if selected), otherwise get the CSV or DB Store
switch(testStrategy) {
	case "GUI":
	// display the SwingBuilder GUI, read inputs, and write to soapui properties
	gui.show()
	testRunner.testCase.setPropertyValue("testID", vars.testid.text)
	testRunner.testCase.setPropertyValue("testObjective", vars.testObjective.text)
	testRunner.testCase.setPropertyValue("testEnvironment", testenvironment.getSelectedItem())		
	strategyLogger = "GUI Chosen for Individual Test Case Execution"

	break;
	case "csv":
	strategyLogger = "CSV Data Source for Test Cases chosen"
	String csvLocation = UISupport.prompt("Enter the full path and location of your Test Plan csv file","CSV Location",csv1,csv2,csv3,csv4,csv5,csv6,csv7,csv8)
	testRunner.testCase.setPropertyValue("csvLocation", csvLocation)
	
	case "Database":
	strategyLogger = "Database Data Source for Test Cases chosen"
	String dbConnection = UISupport.prompt("Enter the name of your Test Database","CSV Location",dbDef,dbOtherOne)
	testRunner.testCase.setPropertyValue("dbConnection", dbConnection)
	log.info "" // capability not yet built (no db to connect to), hence do nothing here
	break;
	
}

//***********
// Logging
//***********

// Use Library SystemRelated class to get useful environment data (and set to properties)
scripts.testCases["automation-v1"].testSteps["SystemRelated"].run(testRunner, context)
username = context.SystemRelated.username; testRunner.testCase.setPropertyValue("systemUser",username)
userHomeFolder = context.SystemRelated.userHomeFolder; testRunner.testCase.setPropertyValue("systemHome",userHomeFolder)
hostname = context.SystemRelated.hostname; testRunner.testCase.setPropertyValue("systemHost",hostname)

// Log required data
propsLogger = "Properties in ${propsLocation} and system related are loaded, user:${username}, host:${hostname}, home:${userHomeFolder} were loaded into SoapUI Properties"
testRunner.testCase.setPropertyValue("000_TESTSTRATEGY", strategyLogger + ", " + propsLogger)
log.info propsLogger	


//***************************************
// Get Test Suite Data 
//	This is an optional starting point for
//	getting SoapUI Test Suite Properties
//	where required.
//***************************************

def suiteProps = [:] //map to stire values retrieved from test suite properties
scripts.testCases["automation-v1"].testSteps["ManageSoapUIProperties"].run(testRunner, context) // use the library to get properties
context.ManageSoapUIProperties.getMyProperties(testCase.testSuite, suiteProps) // get the suite properties

// Update the logger 
otherSimDataLogger = "Test Suite Properties sourced and set"
testRunner.testCase.setPropertyValue("000_TESTSTRATEGY", strategyLogger + ", " + propsLogger + ", " + otherSimDataLogger)

// *** DO AS REQUIRED (with the sourced Test Suite Properties)***
//	ie apply your customisations


</con:setupScript><con:tearDownScript>/*
 *  Simulator TearDown Script
 *  Author : Michael De Robertis 
 *  V01 20/06/2018 : 
 *  	Current version does some basic cleanup post test execution including:
 *  		Deletion of test case propertiesString[] propToRemove = new String[testCase.getPropertyCount()];
propToRemove = testCase.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    testCase.removeProperty( propToRemove[i] );
	}

 */


// Delete Test Case Properties (to refresh for next run)



 
String[] propToRemove = new String[testCase.getPropertyCount()];
propToRemove = testCase.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    testCase.removeProperty( propToRemove[i] );
	}



















</con:tearDownScript><con:properties/></con:testCase><con:testCase id="2b8ca4a4-ce4c-4524-a3c1-10387d3b953c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Simulator(dragonflyMockup)" searchProperties="false" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="set" id="ee676ffd-aa53-48cc-af20-35ba9958c610"><con:settings/><con:config><script>import groovy.sql.Sql 
import com.eviware.soapui.impl.wsdl.teststeps.* //used to look for jdbc steps


//fn to manage props
	def getMyPropertiesLocal = {propertyLocation, mapToCreate
		->
		for (prop in propertyLocation.getPropertyList()) {
			propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
			mapToCreate[prop.getName()] = propertyMapValue}}
	
	def saveToPropertiesLocal = {propertyLocation, mapToSave
		->
		mapToSave.each {propertyName,	propertyValue
			->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }}

//initialisation stuff
	
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase() 
	def testConditions=[:], outputs=[:]
	def enableAllSteps (testCaseContext) {testCaseContext.testSuite.getTestCaseList().each {it.testStepList.each{	if( it.disabled) { it.setDisabled(false)}}}}
	enableAllSteps(testRunner.testCase)
	getMyPropertiesLocal(testRunner.testCase.testSuite, testConditions) 


// step logic 
	//if (testConditions["Action1"] == "Frank") { context.testCase.getTestStepByName("log").setDisabled(true)} //turn off logging for Frank
	//if (testConditions["Action3"] == "F") { context.testCase.getTestStepByName("submitDummyData").setDisabled(true)} //turn off data submission for Females
	
// save and log
outputs["setLogger"] = /*testConditions["setLogger"] + */"Customised Step conditions have been applied for the Test"
outputs["003_set"] = outputs["setLogger"]
saveToPropertiesLocal(testRunner.testCase, outputs) 

log.info "I MADE IT TO THE END OF SET"</script></con:config></con:testStep><con:testStep type="groovy" name="data" id="87c06b35-b50c-4b8c-962f-271b276c0dc5"><con:settings/><con:config><script>import java.util.Random
import org.apache.commons.lang.RandomStringUtils


//fn to manage props
	def getMyPropertiesLocal = {propertyLocation, mapToCreate
		->
		for (prop in propertyLocation.getPropertyList()) {
			propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
			mapToCreate[prop.getName()] = propertyMapValue}}
	
	def saveToPropertiesLocal = {propertyLocation, mapToSave
		->
		mapToSave.each {propertyName,	propertyValue
			->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }}

//initialisation stuff
	def data=[:]; def test=[:]; def mockData=[:]
	getMyPropertiesLocal(testRunner.testCase.testSuite, test) //get some conditions from testSuite
	
//create data
	data["data1"] = "data for element 1"
	data["data2"] = "data for element 2"
	data["data3"] = "data for element 3"
	data["data4"] = "no data"
	data["testinput"] = testRunner.testCase.testSuite.getPropertyValue("TestObjective")
	data["customLoop"] = "1"
//mocking logic
if (test["propMock"] == "on"){
	testRunner.testCase.testSuite.project.getMockServiceByName("LocalhostMock").start()
	data["propEndpoint"] = test["propEndpoint"]
	mockData["testinput"] = "mock " + data["testinput"]
	mockData["data1"] = "mock " + data["data1"]
	mockData["data2"] = "mock " + data["data2"]
	mockData["data3"] = "mock " + data["data3"]
	mockData["data4"] = "mock " + data["data4"]
	}

// save and log
	saveToPropertiesLocal(testRunner.testCase, data)
	saveToPropertiesLocal(testRunner.testCase, test)   //**WIP TESTING**
	saveToPropertiesLocal(testRunner.testCase.testSuite.project.mockServices["LocalhostMock"], mockData)

	log.info "I MADE IT TO THE END OF DATA"</script></con:config></con:testStep><con:testStep type="request" name="submitDummyData" id="0d27623a-a5e7-4a97-a206-e999cf46062a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MDRDataServiceSoap12</con:interface><con:operation>SubmitDummyData</con:operation><con:request name="submitDummyData" id="564b9bac-c065-4277-8df9-7c4d855fb2d0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#propEndpoint}</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:imp="http://improve.org.au/">\r
   <soap:Header/>\r
   <soap:Body>\r
      <imp:SubmitDummyData/>\r
      <mdrdata1>${#TestCase#testinput}</mdrdata1>
      <mdrdata1>${#TestCase#data1}</mdrdata1>
      <mdrdata2>${#TestCase#data2}</mdrdata2>
      <mdrdata3>${#TestCase#data3}</mdrdata3>
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" id="41993ec2-34fd-4b0e-832a-d90cf031eb8d" name="XPath Match"><con:configuration><path>//Test</path><content>Running Test Case: mock ${#TestCase#TestObjective}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="custom" id="419bc823-49a1-4ee1-9a35-f17ccd42bcd7"><con:settings/><con:config><script>// mdr - eg of why to use is when doing intra-test case looping

	import com.eviware.soapui.impl.wsdl.teststeps.* //used to look for jdbc steps
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase() 

//fn to manage props
	def getMyPropertiesLocal = {propertyLocation, mapToCreate
		->
		for (prop in propertyLocation.getPropertyList()) {
			propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
			mapToCreate[prop.getName()] = propertyMapValue}}
	
	def saveToPropertiesLocal = {propertyLocation, mapToSave
		->
		mapToSave.each {propertyName,	propertyValue
			->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }}



//initialisation stuff
	def test=[:], data=[:], mockData=[:], testLogger=[:]
	getMyPropertiesLocal(testRunner.testCase, test)

log.info test["customLoop"]

//Apply Custom Loop


if ((test["customLoop"].toInteger()==1)&amp;&amp;(test["Action2"]=="Emeh")) { 
              String exclusionList = "$context.currentStep.name,submitDummyData,custom,log"
              for(ts in context.testCase.getTestStepList()){
                     if(!exclusionList.contains(ts.name)){
                           ts.setDisabled(true)}}
		data["data4"] = "looping back to run another submitDummyData, set and data steps turned off" 
		data["customLoop"] = "2"
		log.info data["data4"]
		testLogger["Log_AssetStatus"]= data["data4"]
		testRunner.gotoStepByName("submitDummyData")
		
		}

 else if (test["customLoop"].toInteger()==2){ log.info "custom looping done"}


	

	saveToPropertiesLocal(testRunner.testCase.testSuite.project.mockServices["LocalhostMock"], mockData) 
	saveToPropertiesLocal(testRunner.testCase, data)
	saveToPropertiesLocal(testRunner.testCase.testSuite, testLogger)

	

log.info "I MADE IT TO THE END OF CUSTOM"</script></con:config></con:testStep><con:testStep type="groovy" name="log" id="1f8a51e6-612b-4684-ab8c-fc27a2fbbc5f"><con:settings/><con:config><script><![CDATA[import com.eviware.soapui.impl.wsdl.teststeps.* //used to check the types of test steps (ie soap, jdbc, rest, etc)
//import org.apache.commons.lang.RandomStringUtils
//fn to manage props
	def getMyPropertiesLocal = {propertyLocation, mapToCreate
		->
		for (prop in propertyLocation.getPropertyList()) {
			propertyMapValue = propertyLocation.getPropertyValue(prop.getName())
			mapToCreate[prop.getName()] = propertyMapValue}}
	
	def saveToPropertiesLocal = {propertyLocation, mapToSave
		->
		mapToSave.each {propertyName,	propertyValue
			->
			propertyLocation.setPropertyValue(propertyName, propertyValue) }}
// init stuff
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase()
	def strSoapTestCase = objCase.name; def strLogGlobal = ''; strLogProject = ''; strLogCase = ''; strLogStep = ''
	def data = [:]
	def testConditions = [:]; getMyPropertiesLocal(testRunner.testCase.testSuite, testConditions)
	def testDataLog = [:]; getMyPropertiesLocal(testRunner.testCase.testSuite, testDataLog)
	def projectLocation = testRunner.testCase.testSuite.project.getPropertyValue("projectLocation")
	data["dateTime3"] = new java.text.SimpleDateFormat("yyyyMMddHHmmsss").format(new Date())	
	data["dateTime2"] = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())
	data["systemUser"] = "tester"; data["systemHost"] = "TESTMACHINE"
	data["dateTime1"] = new java.text.SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.99999999+10:30").format(new Date())
	
	def strPath = "${projectLocation}\\log\\${data["dateTime2"]}\\${testConditions["propEnvironment"]}\\"
	//def strLogProps = "PROPERTIES_${strSoapTestCase}_${testConditions["propEnvironment"]}_${data["systemUser"]}_${data["systemHost"]}_${data["dateTime3"].substring(0,8)}.txt"
	def testSuite = context.expand((testRunner.testCase.testSuite).name)
	intLog = 1 // move to properties file in future, 1 = request/responses only, 2 = all, need a 0 option

// as per ML original script with some mods -:)

// Loop through steps and log when the step has been enabled
def step = objCase.getTestStepList()
step = objCase.getTestStepList()
        step.each {
        	if (!it.disabled){
                if ((it instanceof WsdlRunTestCaseTestStep) || (it instanceof WsdlPropertiesTestStep)){
        
                    // Requires intLog = 2
                    if (intLog != 1){
                        //Properties
                        def prop = it.getPropertyList()
                        //loop through the list of testStep properties and log as required
                        prop.each{strLogStep = strLogStep + it.getName() + "=" + it.getValue() + ","}
                        new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -TestCase  +  TestStep]:,${strLogCase}${strLogStep}")}
                } 
                if (it instanceof WsdlTestRequestStep){
                //else if (it instanceof WsdlTestRequestStep){

                    //Get Request (will be xml if not jms)
                    if (it.getTestRequest().getRequestContent().substring(0,1) != "<") {strExt = "txt"} else {strExt = "xml"}
                    // new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.${strExt}")
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${data["systemUser"]}_${data["systemHost"]}_${data["dateTime3"]}.${strExt}")
                        .append(context.expand(it.getTestRequest().getRequestContent()))
                    
                    //Get Response if exists (will always be xml)
                    if (it.getTestRequest().getResponseContent() != null){
					//new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.xml")
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_soapRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${data["systemUser"]}_${data["systemHost"]}_${data["dateTime3"]}.xml")
                            .append(it.getTestRequest().getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //SOAP Endpoint and Assertion
                    if (intLog != 1){ 
                         new File("${strPath}").mkdirs();new File("${testConditions["propWorkingFolder"]}\\log\\","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -Endpoint + Assertions]:,StepName=${it.name},Endpoint=${context.expand(it.getTestRequest().getEndpoint())},SOAPAssertion=${context.expand(objProject.getPropertyValue("svSoapAssertion"))}")
                    }
                } 

                else if (it instanceof JdbcRequestTestStep){ //OS... add "|| (it instanceof ProJdbcRequestTestStep)" for PRO 
                    //Request
                     //new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.sql")
                     new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcREQ_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${data["systemUser"]}_${data["systemHost"]}_${data["dateTime3"]}.sql")
                        .append(context.expand(it.getQuery().replaceAll(/\n/,'\r\n')))
                    //Response
                    if (it.getResponseContent().contains("<Row>")){ 
                         //new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}.xml")
                         new File("${strPath}").mkdirs(); new File("${strPath}","${testConditions["TestID"]}_jdbcRES_${strSoapTestCase}_${it.name}_${testConditions["propEnvironment"]}_${testConditions["systemUser"]}_${testConditions["systemHost"]}_${testConditions["dateTime3"]}.xml")
                            .append(it.getResponseContent().replaceAll(/>(\n|\t|\s)*</,'><').replaceAll(/\n|\t/,' ').replaceAll(/\s+/,' '))
                    }
                    //JDBC Connection String and  Assertion
                    if (intLog != 1){
                         new File("${strPath}").mkdirs(); new File("${strPath}","${strLogProps}")
                            .append('\r\n' + "[${testConditions["dateTime3"].padRight(17)} -ConnStr  + Assertions]:,StepName=${it.name},ConnectionString=${context.expand(it.getConnectionString().replaceAll('/.+@/','/PASS_VALUE@/'))},JDBCAssertion=${context.expand(objProject.getPropertyValue("dbJdbcAssertion"))}")

                    }
                }

            }
        }

//if (test["propMock"] == "on"){
//	testRunner.testCase.testSuite.project.getMockServiceByName("LocalhostMock").stop()
	


// Generate the Results Log
def propsFile = "Results-${testSuite}-${data["systemUser"]}-${data["systemHost"]}-${data["dateTime2"]}.csv" //csv properties file
//new File("${projectLocation}\\log\\","${propsFile}").append('\r\n' + "Time:${testConditions["dateTime3"]}, ${strSoapTestCase}${testConditions["testCounter"]}, ${testConditions["TestID"]}, ${testConditions["TestObjective"]}, ${testDataLog}")
new File("${projectLocation}\\log\\","${propsFile}").append('\r\n' + "Time:${data["dateTime1"]}, ${strSoapTestCase}${testConditions["testCounter"]}, ${testConditions["TestID"]}, ${testConditions["TestObjective"]}, ${testDataLog}")
log.info "I MADE IT TO THE END OF LOG"
]]></script></con:config></con:testStep><con:setupScript>import com.eviware.soapui.impl.wsdl.teststeps.*
 
// turn on steps (have to do on the loop so that the goto READ step works, hence duplicating in LOOP might need to remove from here)
def enableAllSteps (testCaseContext) {
			testCaseContext.testSuite.getTestCaseList().each
		{
    		it.testStepList.each 
    			{
         		if( it.disabled) { it.setDisabled(false)}
    			}}}
enableAllSteps(testRunner.testCase)


/*
 
String[] propToRemove = new String[testCase.getPropertyCount()];
propToRemove = testCase.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    testCase.removeProperty( propToRemove[i] );
	}

*/</con:setupScript><con:tearDownScript>/*
String[] propToRemove = new String[testCase.getPropertyCount()];
propToRemove = testCase.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    testCase.removeProperty( propToRemove[i] );
	}

*/


import com.eviware.soapui.impl.wsdl.teststeps.*
 
// turn on steps (have to do on the loop so that the goto READ step works, hence duplicating in LOOP might need to remove from here)
def enableAllSteps (testCaseContext) {
			testCaseContext.testSuite.getTestCaseList().each
		{
    		it.testStepList.each 
    			{
         		if( it.disabled) { it.setDisabled(false)}
    			}}}
enableAllSteps(testRunner.testCase)
</con:tearDownScript><con:properties><con:property><con:name>000_TESTSTRATEGY</con:name><con:value>csv Strategy chosen, Properties in MOCK and system related are loaded, user:null, host:null, home:\\central.health\dfsuserenv\Users\User_01\derobm were loaded into SoapUI Properties, Data from User Simulator sourced and set</con:value></con:property><con:property><con:name>003_set</con:name><con:value>Customised Step conditions have been applied for the Test</con:value></con:property><con:property><con:name>Action1</con:name><con:value>Jenny</con:value></con:property><con:property><con:name>Action2</con:name><con:value>Eff</con:value></con:property><con:property><con:name>Action3</con:name><con:value>F</con:value></con:property><con:property><con:name>Application</con:name><con:value>dragonflyproject</con:value></con:property><con:property><con:name>csvLocation</con:name><con:value>C:\Temp\soapui\dragonflymockup\data\run.csv</con:value></con:property><con:property><con:name>customLoop</con:name><con:value>1</con:value></con:property><con:property><con:name>data1</con:name><con:value>data for element 1</con:value></con:property><con:property><con:name>data2</con:name><con:value>data for element 2</con:value></con:property><con:property><con:name>data3</con:name><con:value>data for element 3</con:value></con:property><con:property><con:name>data4</con:name><con:value>no data</con:value></con:property><con:property><con:name>logger</con:name><con:value>The number of tests in csv file of C:\Temp\soapui\dragonflymockup\data\run.csv has been stored in readiness for execution</con:value></con:property><con:property><con:name>nextTestCounter</con:name><con:value>11</con:value></con:property><con:property><con:name>numberOfRows</con:name><con:value>12</con:value></con:property><con:property><con:name>numberOfTests</con:name><con:value>11</con:value></con:property><con:property><con:name>otherSimDataLogger</con:name><con:value>Data from User Simulator sourced and set</con:value></con:property><con:property><con:name>projectLocation</con:name><con:value>C:\Temp\soapui\dragonflymockup</con:value></con:property><con:property><con:name>projectName</con:name><con:value>dragonflymockup</con:value></con:property><con:property><con:name>propALMDomain</con:name><con:value>TESTINGSERVICES</con:value></con:property><con:property><con:name>propALMDragonflyPlugin</con:name><con:value>enabled</con:value></con:property><con:property><con:name>propALMOverrideTestRuns</con:name><con:value>disabled</con:value></con:property><con:property><con:name>propALMProject</con:name><con:value>ATC</con:value></con:property><con:property><con:name>propALMProjectPath</con:name><con:value>C:\Temp\soapui\dragonflymockup</con:value></con:property><con:property><con:name>propALMPw</con:name><con:value>Password123</con:value></con:property><con:property><con:name>propALMSoapUIPath</con:name><con:value>C:\Program Files\SmartBear\SoapUI-5.2.1\bin\testrunner.bat</con:value></con:property><con:property><con:name>propALMTestLabDirectory</con:name><con:value>Root\DragonFlyTesting</con:value></con:property><con:property><con:name>propALMTestPlanDirectory</con:name><con:value>Subject\DragonFlyTesting</con:value></con:property><con:property><con:name>propALMURL</con:name><con:value>http://alm.central.health/qcbin</con:value></con:property><con:property><con:name>propALMUser</con:name><con:value>autotest01</con:value></con:property><con:property><con:name>propCsv1</con:name><con:value>C:\Temp\soapui\dragonflymockup\data\run.csv</con:value></con:property><con:property><con:name>propEndpoint</con:name><con:value>http://localhost:591/</con:value></con:property><con:property><con:name>propEnvironment</con:name><con:value>MOCK</con:value></con:property><con:property><con:name>propLABEL</con:name><con:value>properties for a dummy project loaded from file</con:value></con:property><con:property><con:name>propMock</con:name><con:value>on</con:value></con:property><con:property><con:name>propsLocation</con:name><con:value>C:\Temp\soapui\dragonflymockup\bin\dragonflymockup.properties</con:value></con:property><con:property><con:name>propsLogger</con:name><con:value>Properties in MOCK and system related are loaded, user:null, host:null, home:\\central.health\dfsuserenv\Users\User_01\derobm were loaded into SoapUI Properties</con:value></con:property><con:property><con:name>propStrategy</con:name><con:value>csv</con:value></con:property><con:property><con:name>QC_ID</con:name><con:value>84</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>MOCK_20181217</con:value></con:property><con:property><con:name>QC_Upload</con:name><con:value>enabled</con:value></con:property><con:property><con:name>setLogger</con:name><con:value>Customised Step conditions have been applied for the Test</con:value></con:property><con:property><con:name>Stop</con:name><con:value>F</con:value></con:property><con:property><con:name>strategyLogger</con:name><con:value>csv Strategy chosen</con:value></con:property><con:property><con:name>testCounter</con:name><con:value>10</con:value></con:property><con:property><con:name>TestID</con:name><con:value>automation10</con:value></con:property><con:property><con:name>testinput</con:name><con:value>Create a dummy test10</con:value></con:property><con:property><con:name>TestObjective</con:name><con:value>Create a dummy test10</con:value></con:property><con:property><con:name>userHomeFolder</con:name><con:value>\\central.health\dfsuserenv\Users\User_01\derobm</con:value></con:property><con:property><con:name>Log_AssetStatus</con:name><con:value>looping back to run another submitDummyData, set and data steps turned off</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="443dcfe8-a33f-47e3-9f19-71e94a71b783" name="AUTOTEST_01"><con:description>This version uses gurutester (eg see soapui_gurutester_22082019.jar in http://10.10.19.77:7990/projects/ETS/repos/miscellaneous/browse )</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="6e7294f4-b448-489b-8971-7b20a1f86195" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Epic1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="groovy" name="set" id="29944b0a-edb7-48e6-8bf9-8389564448c2"><con:settings/><con:config><script>import com.gurutester.*;

//******************
// Initialisations
//******************
	PropertiesUtil props = new PropertiesUtil();
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase() //get project objects
	def testConditions=[:], outputs=[:] //define property maps
	
	testConditions = props.getMyProperties(testRunner.testCase.testSuite) 
	props.enableAllSteps(context.testCase)

//***********************************
// Set required steps for Asset Logic
//***********************************
	if (testConditions["testOrgEpic"] == "dummyData13") {
		context.testCase.getTestStepByName("abnLookup").setDisabled(false)
		context.testCase.getTestStepByName("submitE1DummyData").setDisabled(false)}


	else if (testConditions["testOrgEpic"] == "someOtherData") {
		context.testCase.getTestStepByName("submitE1DummyData").setDisabled(true)		
		}

	
sleep 1000
//************************************************************************************
// Save Test Conditions Data Change back to Test Case Properties and update the logger
//************************************************************************************
	outputs["setLogger"] = testConditions["setLogger"] + "Customised Step conditions have been applied for the Test"
	outputs["003_set"] = outputs["setLogger"]
	props.saveToProperties(testRunner.testCase, outputs) 
	
	log.info "epic1-set"	
</script></con:config></con:testStep><con:testStep type="groovy" name="data" id="8c295c44-247b-4509-9982-4a53967619a2"><con:settings/><con:config><script>/*
 *  Data Script
 *  Author : Michael De Robertis 
 *  05/11/2018	refactoring		
 */

import java.util.Random
import org.apache.commons.lang.RandomStringUtils
import com.gurutester.*  

//***********************************
// Define property maps to store data
//***********************************
	def datagen=[:]; def test=[:]; def testLogger=[:]; def mockdatagen=[:]

//************************
// Instantiate the Classes
// 	20/5/2019 
//	HealthData now in jar file not SoapUI Library (be it Core as per original solution or locally in the test case as per change made for maven 13/5/19) 
//************************
	HealthData hd = new HealthData();
	BioData bd = new BioData();
	PropertiesUtil props = new PropertiesUtil();
	SystemRelated sr = new SystemRelated();	

//***********************************************
// Create Default Data (including library calls)
//***********************************************
	datagen["input1"] = "input1Data"; datagen["input2"] = "input2Data"; datagen["input3"] = "input3Data";
	datagen["dataFirstName"] = bd.firstName; datagen["dataLastName"] = bd.lastName; 
	datagen["dataTester"] = datagen["systemUser"] = sr.username;
	datagen["dataGivenNameKey"] = hd.GivenNameKey; 
	datagen["dataLastNameKey"] = hd.LastNameKey
	datagen["dataRequestSystem"] = hd.requestSystem; 
	datagen["dataFalse"] = hd.ffalse
	datagen["dataAbnAttribute"] = hd.AbnAttribute; 
	datagen["dataPasswordKey"] = hd.PasswordKey
	datagen["dataPassword"] = hd.password; 
	datagen["dataAccType"] = hd.accType; 
	datagen["dataAccTCId"] = hd.acceptedTCidRequest	
	datagen["dataTermsValue"] = hd.termsValue; 
	datagen["dataTrue"] = hd.ttrue; 
	datagen["dataEmailAddress"] = hd.emailAddress
	datagen["dataPhoneNumber"] = hd.phoneNumber; 
	datagen["dataUsage"] = hd.usage; 
	datagen["dataUsageAssert"] = hd.usageAssert
	datagen["dataServicesName"] = hd.servicesName;
	datagen["dataFalse"] = hd.ffalse
	datagen["dataAssetTitle"] = hd.assetTitle
	datagen["dataAssetDescription"] = hd.assetDescription
	datagen["dataReportingRndRefId"] = hd.assetRepRndRedId //note the spelling error
	datagen["systemHost"] = sr.hostname
	datagen["dataRegisterPersonExpectedOutcome"] = "SUCCESS_NEW_PERSON";
	datagen["dataAddTokenExpectedOutcome"]="Active";
	datagen["dataUpdateRolesExpectedOutcome"]="UPDATED"
	datagen["dataExistingGroupingExpectedResponse"] = "ALREADY_EXISTS"; datagen["dataUpdateUserGroupingsExpectedOutcome"]="UPDATED"; datagen["dataSaveDataAssetExpectedOutcome"]="UPDATED"
	datagen["dataState"] = 'Australian Capital Territory'; datagen["dataStateAbbr"] = "ACT" 
	datagen["dataReinstateCount"] = datagen["dataPublicationRemoveCount"] = datagen["dataRevisionRequired"] = datagen["dataStepAfterRevisionRequired"] = "nil" //used to compare against when a reinstate is already ran in custom

	// set a random word to use when searching for an Company (whose ABN will be used for Org creation) 	
	Random random = new Random(); 
	def searchWords = ["good", "people", "grow", "many", "ideas", "within", "scope", "belief", "crumb", "banana", "apple", "tomato","orange", "lemon", "fruit", "square", "triangle", "fat", "skin", "pink"] 
	def sWord = random.nextInt(searchWords.size()); datagen["abnLookupSearchCriterion"] = (searchWords.toSet() as List)[sWord]
	datagen["orgFofmsid"] = "66-${datagen["abnLookupSearchCriterion"]}-${sWord}"
	datagen["dataOrgType"]= hd.OrgType

//*****************
// Date Time Stuff
//*****************
	datagen["dateTime1"] = sr.dateTime1
	datagen["dateTime2"] = sr.dateTime2
	datagen["dateTime3"] = sr.dateTime3
	datagen["dateTime4"] = sr.dateTime4
	datagen["dataYesterday"] = sr.addDay(-1)
	datagen["dataToday"] = sr.addDay(0)
	datagen["dataTomorrow"] = sr.addDay(1)
	datagen["dataLastMonth"] = sr.addDay(-30)
	datagen["dataLastQuarter"] = sr.addDay(-120)

//****************************************************************************
// Apply logic based on Test Conditions
//****************************************************************************
	test = props.getMyProperties(testRunner.testCase.testSuite) //get test data from testSuite properties

	// Eg if need to change some data based on hard-coded test environment conditions
	if ((test["propEnvironment"] == "SIT") || (test["propEnvironment"] == "Test") || (test["propEnvironment"] == "MOCK")){
		datagen["parentOrgName"] = "AUTOMATION TESTING ORG PARENT TWO"; datagen["parentOrgId"] = "2478"; datagen["testDefaultAbnSet"] = "66059658641"
		datagen["defaultAdmin"] = "477898381"; datagen["defaultGuid"] = "hvXCWFWyiJuPZGgT8MllYKEVxPJnhh"
		datagen["orgAllSections"]="2815";
		datagen["orgDataItemPI01"]="2783";datagen["orgDataItemPI02"]="2784";datagen["orgDataItemPI03"]="2785";datagen["orgDataItemPI04"]="2786";datagen["orgDataItemPI05"]="2787";datagen["orgDataItemPI06"]="2788";datagen["orgDataItemPI07"]="2789"
		datagen["orgDataItemPI08"]="2790";datagen["orgDataItemPI09"]="2791";datagen["orgDataItemPI10"]="2792";datagen["orgDataItemPI11"]="2793";datagen["orgDataItemPI12"]="2794";datagen["orgDataItemPI13"]="2795";datagen["orgDataItemPI14"]="2796";datagen["orgDataItemPI15"]="2797"
		datagen["orgDataItemPI16"]="2798";datagen["orgDataItemPI17"]="2799";datagen["orgDataItemPI18"]="2800";datagen["orgDataItemPI19"]="2801";datagen["orgDataItemPI20"]="2802";datagen["orgDataItemPI21"]="2803";datagen["orgDataItemPI22"]="2804";datagen["orgDataItemPI23"]="2805"
		datagen["orgDataItemPI24"]="2806";datagen["orgDataModule1"]="2807";datagen["orgDataModule2"]="2808";datagen["orgDataModule3"]="2809";datagen["orgDataModule4"]="2810";datagen["orgDataModule5"]="2811";datagen["orgDataModule6"]="2812";datagen["orgDataModule7"]="2813"
		datagen["orgDataModule8"]="2815"	}

	else if ((test["propEnvironment"] == "DEV") || (test["propEnvironment"] == "Dev")){

		datagen["parentOrgName"] = "AUTOMATION TEST ORG DEV92 PARENT 1"; datagen["parentOrgId"] = "2491"; datagen["testDefaultAbnSet"] = "67320421670"
		datagen["defaultAdmin"] = "310386051"; datagen["defaultGuid"] = "vPzoY7GoxnjrxKzErzRZKDvNTEYhQ7" //created external user Kroonini Baionand in DEV for the default parent via soap
		datagen["orgAllSections"]="4737";datagen["orgDataItemPI01"]="4705";datagen["orgDataItemPI02"]="4706";datagen["orgDataItemPI03"]="4707";datagen["orgDataItemPI04"]="4708";datagen["orgDataItemPI05"]="4709";datagen["orgDataItemPI06"]="4710";datagen["orgDataItemPI07"]="4711"
		datagen["orgDataItemPI08"]="4712";datagen["orgDataItemPI09"]="4713";datagen["orgDataItemPI10"]="4714";datagen["orgDataItemPI11"]="4715";datagen["orgDataItemPI12"]="4716";datagen["orgDataItemPI13"]="4717";datagen["orgDataItemPI14"]="4718";datagen["orgDataItemPI15"]="4719"
		datagen["orgDataItemPI16"]="4720";datagen["orgDataItemPI17"]="4721";datagen["orgDataItemPI18"]="4722";datagen["orgDataItemPI19"]="4723";datagen["orgDataItemPI20"]="4724";datagen["orgDataItemPI21"]="4725";datagen["orgDataItemPI22"]="4726";datagen["orgDataItemPI23"]="4727"
		datagen["orgDataItemPI24"]="4728";datagen["orgDataModule1"]="4729";datagen["orgDataModule2"]="4730";datagen["orgDataModule3"]="4731";datagen["orgDataModule4"]="4732";datagen["orgDataModule5"]="4733";datagen["orgDataModule6"]="4734";datagen["orgDataModule7"]="4735"
		datagen["orgDataModule8"]="4736"
		}


//****************************************************************
// EG Do stuff based on epic combos
//****************************************************************

	// check if running Org/User and if so do nothing
	if ((test["propTestCase1"] == "Epic1")&amp;&amp;(test["propTestCase2"] == "Epic2")) {  
		//do something 
		}

	
	else if ((test["propTestCase1"] == "Epic2")||(test["propTestCase2"] == "Epic3")) { 
		//do something else	
		}


//*******************************
// Mocking Logic
//if there is a mock environment
//*******************************
	/*
	if (test["propMock"] == "on"){
		testRunner.testCase.testSuite.project.getMockServiceByName("LocalhostMock").start() //start the mock service
		datagen["propEndpoint1"] = datagen["propEndpoint2"] = datagen["propEndpoint3"] = datagen["propEndpoint4"] = datagen["propEndpoint5"] = "http://localhost:591/" //set the endpoints to the mock service
		
		//set some dummy data (substitutions for real responses, ie to mimick real values where possible; also set hard-coded values that we dont care about for mocking)
		mockdatagen["respSomeProperty1"] = "some mock value1"; mockdatagen["respSomeProperty2"] = "some mock value2"; 
		}
	*/


sleep 1000	
//***********
// Save Data 
//***********
	props.saveToProperties(testRunner.testCase, test) //data for test case consumpsion
	props.saveToProperties(testRunner.testCase.testSuite, testLogger) //data for holding in test suite properties
	props.saveToProperties(testRunner.testCase, datagen); 
	props.saveToProperties(testRunner.testCase.testSuite.project.mockServices["LocalhostMock"], mockdatagen) //mock data for holding in mock service properties

log.info "epic1-data"		</script></con:config></con:testStep><con:testStep type="request" id="46d1c952-5ea7-409c-bd9b-34a4e5f0d402" name="submitE1DummyData"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MDRDataServiceSoap</con:interface><con:operation>SubmitDummyData</con:operation><con:request name="submitE1DummyData" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="626aab2e-4db7-4132-b0e5-b5cc3f820f1b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#propEndpoint1}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:imp="http://improve.org.au/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <imp:SubmitDummyData>\r
         <!--Optional:-->\r
         <imp:DummySummaryData>\r
           <SomeInput>${#TestCase#input1}</SomeInput>
         </imp:DummySummaryData>\r
      </imp:SubmitDummyData>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" id="1fb6dca8-add8-4fd0-be73-f2779790203b" name="assertResponse"><con:configuration><path>//result1</path><content>happyDays1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f7abe1bb-d2a7-4e2f-90c3-b2b62b1aefa6" name="Script Assertion"><con:configuration><scriptText>/*
 *  Script : SOAP Response Assertion Script
 *  Author : Michael De Robertis

 *  	How to get CDATA response data
 *  	How to get response data
 *  	Write back to Test Case Ppoperties for consumption
 */



def response = context.response
//assert response, 'response is empty or null'

//Closure to parse and extract the data
def getData = { data, element ->
  def pXml = new XmlSlurper().parseText(data)
  def codes = pXml.'**'.findAll { it.name() == element}  
}

// Get the cdata part
def cdata1 = getData(response, 'Response1')[0] as String
def cdata2 = getData(response, 'Response2')[0] as String
def cdata3 = getData(response, 'Response3')[0] as String

// Get the substring userid bit
def resp1 = cdata1
def resp2 = cdata2
def resp3 = cdata3

messageExchange.modelItem.testStep.testCase.setPropertyValue("Response1", resp1)
messageExchange.modelItem.testStep.testCase.setPropertyValue("Response2", resp2)
messageExchange.modelItem.testStep.testCase.setPropertyValue("Response3", resp3)

// add a mini delay
sleep 1000
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://improve.org.au/SubmitDummyData"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="httprequest" name="abnLookup" id="0cce035d-3918-47f3-a00c-36692d96a634"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="9949f5c6-d63c-4020-98aa-67e66c3cf2f2" name="abnLookup" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://abr.business.gov.au/search/resultsactive</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" id="0bbfd3ef-7e72-4cea-8730-db14b052d092" name="searchAbn"><con:configuration><scriptText>//********************
// Select a random ABN
//********************

import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder (messageExchange.responseContentAsXml)

Random random = new Random()
String ranNum = "${random.nextInt(212-13)+13}"

for (item in holder.getNodeValues("//form/*:input[${ranNum}]/@value"))
x = (item.split(",")[0]).toString()
//log.info x
messageExchange.modelItem.testStep.testCase.setPropertyValue("orgToCreate", x)
//messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue("orgToCreateMOCK", x) //old method for mock
//messageExchange.modelItem.testStep.testCase.testSuite.project.mockServices["LocalhostMock"].setPropertyValue("orgToCreateMOCK", x)
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>searchtext</con:name><con:value>${#TestCase#abnLookupSearchCriterion}</con:value><con:style>QUERY</con:style></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="log" id="af1b78a7-59f0-4a04-a0c5-af237694227c"><con:settings/><con:config><script>import com.gurutester.*
PropertiesUtil props = new PropertiesUtil();
testConditions = props.getMyProperties(testRunner.testCase)
props.logResults(testRunner.testCase, "${testConditions["projectLocation"]}", "${testConditions["TestID"]}", "${testConditions["propEnvironment"]}");
log.info "epic1-log"		
</script></con:config></con:testStep><con:setupScript>import com.gurutester.*;

PropertiesUtil props = new PropertiesUtil();
props.enableAllSteps(testRunner.testCase);
props.removeProperties(testRunner.testCase);

log.info "Epic1-setup"


</con:setupScript><con:tearDownScript>import com.gurutester.*;
PropertiesUtil props = new PropertiesUtil();

//**************************************************
// ALM Customisation for QC_Id, QC_Upload
//	Current design provides QC_Id by default
//	and other QC_Id_xxx variations if applicable
//	to the customisation. In those cases this script
//	picks up those options as required (In this case getting QC_Id_org)
//
//	Enable QC_Upload as disabled from test Suite
//***************************************************  

// Set QC_Id to QC_Id_org if if Dragon Fly is enabled and testOrgEpic = newExternal
log.info testRunner.testCase.testSuite.project.getPropertyValue("QC_Dragonfly_Plugin")
log.info testRunner.testCase.testSuite.getPropertyValue("propTestCase1")
if ((testRunner.testCase.testSuite.project.getPropertyValue("QC_Dragonfly_Plugin")=='enabled')&amp;&amp;(testRunner.testCase.testSuite.getPropertyValue("propTestCase1")=="Epic1"))
	{
	
	testRunner.testCase.setPropertyValue("QC_Id", "${testRunner.testCase.testSuite.getPropertyValue("QC_Id_Epic1")}")
	testRunner.testCase.setPropertyValue("QC_Upload", "enabled")	
	}

// Otherwise remove QC_Id
else {
		
	testRunner.testCase.removeProperty("QC_Id")
	testRunner.testCase.removeProperty("QC_Upload")	
	}


// enable all steps
props.enableAllSteps(testRunner.testCase);

log.info "Epic1-teardown"</con:tearDownScript><con:properties><con:property><con:name>setLogger</con:name><con:value>nullCustomised Step conditions have been applied for the Test</con:value></con:property><con:property><con:name>003_set</con:name><con:value>nullCustomised Step conditions have been applied for the Test</con:value></con:property><con:property><con:name>projectLocation</con:name><con:value>U:\Documents\soapui\projects\concepts</con:value></con:property><con:property><con:name>propALMURL</con:name><con:value>http://cwalma01.acceptance.health:8080/qcbin</con:value></con:property><con:property><con:name>Stop</con:name><con:value>F</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>DEV</con:value></con:property><con:property><con:name>testAssetType</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>QC_Id_Epic1</con:name><con:value>206</con:value></con:property><con:property><con:name>QC_Id_Epic2</con:name><con:value>207</con:value></con:property><con:property><con:name>propDBAutoPwd</con:name><con:value>password</con:value></con:property><con:property><con:name>QC_Id_Epic3</con:name><con:value>208</con:value></con:property><con:property><con:name>strategyLogger</con:name><con:value>The number of tests in csv file of u:\Documents\soapui\projects\concepts\data\buildVerification.csv has been stored in readiness for execution</con:value></con:property><con:property><con:name>hostname</con:name><con:value>CW2K16TS01</con:value></con:property><con:property><con:name>propDBInTest</con:name><con:value>jdbc:oracle:thin:someuser/somepassword@someserver:1521/${#Project#projectEnvironmentDB}12c02</con:value></con:property><con:property><con:name>propDriver</con:name><con:value>com.mysql.jdbc.Driver</con:value></con:property><con:property><con:name>propJdbcSteps</con:name><con:value>off</con:value></con:property><con:property><con:name>propKeepData</con:name><con:value>false</con:value></con:property><con:property><con:name>QC_Req_Ids</con:name><con:value/></con:property><con:property><con:name>propStartInMinutes</con:name><con:value>0</con:value></con:property><con:property><con:name>propCore</con:name><con:value>spare</con:value></con:property><con:property><con:name>propPropertiesLABEL</con:name><con:value>db</con:value></con:property><con:property><con:name>projectEnvironmentDB</con:name><con:value>dev</con:value></con:property><con:property><con:name>propDBConnection</con:name><con:value>jdbc:mysql://10.11.21.128:3306/testingservices</con:value></con:property><con:property><con:name>propALMProjectPath</con:name><con:value>to do</con:value></con:property><con:property><con:name>testRoles</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>propEnvironment</con:name><con:value>DEV</con:value></con:property><con:property><con:name>002_read</con:name><con:value>ID: e2esimcsv_bv_concept_test_01 Objective: Template Test Case 01 has been loaded</con:value></con:property><con:property><con:name>propALMProject</con:name><con:value>ATC</con:value></con:property><con:property><con:name>userHomeFolder</con:name><con:value>C:\Users\a_derobm</con:value></con:property><con:property><con:name>numberOfTests</con:name><con:value>1</con:value></con:property><con:property><con:name>propTestCase2</con:name><con:value/></con:property><con:property><con:name>propTestCase1</con:name><con:value>Epic1</con:value></con:property><con:property><con:name>000_TESTSTRATEGY</con:name><con:value>The number of tests in csv file of u:\Documents\soapui\projects\concepts\data\buildVerification.csv has been stored in readiness for execution, Properties in DEV and system related are loaded, user:a_derobm, host:CW2K16TS01, home:C:\Users\a_derobm were loaded into SoapUI Properties, Data from User Simulator sourced and set</con:value></con:property><con:property><con:name>propTestCase3</con:name><con:value/></con:property><con:property><con:name>propStrategy</con:name><con:value>csv</con:value></con:property><con:property><con:name>QC_Req_Recursive</con:name><con:value/></con:property><con:property><con:name>QC_Id_Epic1_Epic2_Epic3</con:name><con:value>209</con:value></con:property><con:property><con:name>propALMSoapUIPath</con:name><con:value>C:\Program Files\SmartBear\SoapUI-5.2.1\bin\testrunner.bat</con:value></con:property><con:property><con:name>testCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>numberOfRows</con:name><con:value>2</con:value></con:property><con:property><con:name>projectEnvironment</con:name><con:value>DEV</con:value></con:property><con:property><con:name>projectName</con:name><con:value>concepts</con:value></con:property><con:property><con:name>propAdminUser3</con:name><con:value>not required</con:value></con:property><con:property><con:name>testAssetAttachmentType</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>propAdminUser1</con:name><con:value>not required</con:value></con:property><con:property><con:name>testOrg</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>propAdminUser2</con:name><con:value>not required</con:value></con:property><con:property><con:name>propALMPw</con:name><con:value>Password123</con:value></con:property><con:property><con:name>propALMDragonflyPlugin</con:name><con:value>disabled</con:value></con:property><con:property><con:name>testEpicCondition</con:name><con:value>Epic1</con:value></con:property><con:property><con:name>propIntUser2</con:name><con:value>not required</con:value></con:property><con:property><con:name>propIntUser1</con:name><con:value>not required</con:value></con:property><con:property><con:name>propScript</con:name><con:value>spare</con:value></con:property><con:property><con:name>propIntUser4</con:name><con:value>not required</con:value></con:property><con:property><con:name>propIntUser3</con:name><con:value>not required</con:value></con:property><con:property><con:name>propMock</con:name><con:value>off</con:value></con:property><con:property><con:name>propCsv1</con:name><con:value>u:\Documents\soapui\projects\concepts\data\buildVerification.csv</con:value></con:property><con:property><con:name>propEndpoint1</con:name><con:value>http://localhost:591</con:value></con:property><con:property><con:name>TestID</con:name><con:value>e2esimcsv_bv_concept_test_01</con:value></con:property><con:property><con:name>testGroupings</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>propEndpoint2</con:name><con:value>http://localhost:591</con:value></con:property><con:property><con:name>propEndpoint3</con:name><con:value>not required</con:value></con:property><con:property><con:name>propEndpoint4</con:name><con:value>not required</con:value></con:property><con:property><con:name>propEndpoint5</con:name><con:value>not required</con:value></con:property><con:property><con:name>testOrgEpic</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>propALMUser</con:name><con:value>autotest02</con:value></con:property><con:property><con:name>propSchema</con:name><con:value>testingservices</con:value></con:property><con:property><con:name>nextTestCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>otherSimDataLogger</con:name><con:value>Data from User Simulator sourced and set</con:value></con:property><con:property><con:name>testAssetAction1</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetAction2</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetAction3</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetAction4</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetAction5</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetAction6</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>propDBAutoUser</con:name><con:value>test</con:value></con:property><con:property><con:name>propProperties</con:name><con:value>db</con:value></con:property><con:property><con:name>propsLocation</con:name><con:value>U:\Documents\soapui\projects\concepts\bin\concepts_AUTOTEST_01.properties</con:value></con:property><con:property><con:name>propALMOverrideTestRuns</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_Mapped_Test_Id</con:name><con:value/></con:property><con:property><con:name>TestObjective</con:name><con:value>Template Test Case 01</con:value></con:property><con:property><con:name>propALMDomain</con:name><con:value>TESTINGSERVICES</con:value></con:property><con:property><con:name>propALMTestPlanDirectory</con:name><con:value>Subject\concepts</con:value></con:property><con:property><con:name>testGroupAction</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>propsLabel</con:name><con:value>CONCEPTS db in DEV</con:value></con:property><con:property><con:name>propsLogger</con:name><con:value>Properties in DEV and system related are loaded, user:a_derobm, host:CW2K16TS01, home:C:\Users\a_derobm were loaded into SoapUI Properties</con:value></con:property><con:property><con:name>testAssetChangeType</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>propALMTestLabDirectory</con:name><con:value>Root\concepts\regression</con:value></con:property><con:property><con:name>currentTest</con:name><con:value>ID: e2esimcsv_bv_concept_test_01 Objective: Template Test Case 01</con:value></con:property><con:property><con:name>username</con:name><con:value>a_derobm</con:value></con:property><con:property><con:name>input1</con:name><con:value>input1Data</con:value></con:property><con:property><con:name>input2</con:name><con:value>input2Data</con:value></con:property><con:property><con:name>input3</con:name><con:value>input3Data</con:value></con:property><con:property><con:name>dataFirstName</con:name><con:value>Raergnco</con:value></con:property><con:property><con:name>dataLastName</con:name><con:value>Antaenwis</con:value></con:property><con:property><con:name>systemUser</con:name><con:value>a_derobm</con:value></con:property><con:property><con:name>dataTester</con:name><con:value>a_derobm</con:value></con:property><con:property><con:name>dataGivenNameKey</con:name><con:value>givenName</con:value></con:property><con:property><con:name>dataLastNameKey</con:name><con:value>sn</con:value></con:property><con:property><con:name>dataRequestSystem</con:name><con:value>DP</con:value></con:property><con:property><con:name>dataFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>dataAbnAttribute</con:name><con:value>ABNorganization</con:value></con:property><con:property><con:name>dataPasswordKey</con:name><con:value>password</con:value></con:property><con:property><con:name>dataPassword</con:name><con:value>passw0rd</con:value></con:property><con:property><con:name>dataAccType</con:name><con:value>AKEY</con:value></con:property><con:property><con:name>dataAccTCId</con:name><con:value>401</con:value></con:property><con:property><con:name>dataTermsValue</con:name><con:value>&lt;![CDATA[This is some Terms And Conditions sample text for Test Automation and it contains a CEND ]]]]&gt;&lt;![CDATA[>]]&gt;</con:value></con:property><con:property><con:name>dataTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>dataEmailAddress</con:name><con:value>automation.testing@somedomain.com.au</con:value></con:property><con:property><con:name>dataPhoneNumber</con:name><con:value>(02) 6211 2222</con:value></con:property><con:property><con:name>dataUsage</con:name><con:value>HOME</con:value></con:property><con:property><con:name>dataUsageAssert</con:name><con:value>BUSN</con:value></con:property><con:property><con:name>dataServicesName</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>dataAssetTitle</con:name><con:value>AUTOTEST_ASSET19603</con:value></con:property><con:property><con:name>dataAssetDescription</con:name><con:value>This is a description for AUTOTEST_ASSET19603</con:value></con:property><con:property><con:name>dataReportingRndRefId</con:name><con:value>0</con:value></con:property><con:property><con:name>systemHost</con:name><con:value>CW2K16TS01</con:value></con:property><con:property><con:name>dataRegisterPersonExpectedOutcome</con:name><con:value>SUCCESS_NEW_PERSON</con:value></con:property><con:property><con:name>dataAddTokenExpectedOutcome</con:name><con:value>Active</con:value></con:property><con:property><con:name>dataUpdateRolesExpectedOutcome</con:name><con:value>UPDATED</con:value></con:property><con:property><con:name>dataExistingGroupingExpectedResponse</con:name><con:value>ALREADY_EXISTS</con:value></con:property><con:property><con:name>dataUpdateUserGroupingsExpectedOutcome</con:name><con:value>UPDATED</con:value></con:property><con:property><con:name>dataSaveDataAssetExpectedOutcome</con:name><con:value>UPDATED</con:value></con:property><con:property><con:name>dataState</con:name><con:value>Australian Capital Territory</con:value></con:property><con:property><con:name>dataStateAbbr</con:name><con:value>ACT</con:value></con:property><con:property><con:name>dataStepAfterRevisionRequired</con:name><con:value>nil</con:value></con:property><con:property><con:name>dataRevisionRequired</con:name><con:value>nil</con:value></con:property><con:property><con:name>dataPublicationRemoveCount</con:name><con:value>nil</con:value></con:property><con:property><con:name>dataReinstateCount</con:name><con:value>nil</con:value></con:property><con:property><con:name>abnLookupSearchCriterion</con:name><con:value>crumb</con:value></con:property><con:property><con:name>orgFofmsid</con:name><con:value>66-crumb-16</con:value></con:property><con:property><con:name>dataOrgType</con:name><con:value>Local Government</con:value></con:property><con:property><con:name>dateTime1</con:name><con:value>2019-12-09T03:35:58.99999999+10:30</con:value></con:property><con:property><con:name>dateTime2</con:name><con:value>20191209</con:value></con:property><con:property><con:name>dateTime3</con:name><con:value>201912091535058</con:value></con:property><con:property><con:name>dateTime4</con:name><con:value>2019-12-09</con:value></con:property><con:property><con:name>dataYesterday</con:name><con:value>2019-12-08</con:value></con:property><con:property><con:name>dataToday</con:name><con:value>2019-12-09</con:value></con:property><con:property><con:name>dataTomorrow</con:name><con:value>2019-12-10</con:value></con:property><con:property><con:name>dataLastMonth</con:name><con:value>2019-11-09</con:value></con:property><con:property><con:name>dataLastQuarter</con:name><con:value>2019-08-11</con:value></con:property><con:property><con:name>parentOrgName</con:name><con:value>AUTOMATION TEST ORG DEV92 PARENT 1</con:value></con:property><con:property><con:name>parentOrgId</con:name><con:value>2491</con:value></con:property><con:property><con:name>testDefaultAbnSet</con:name><con:value>67320421670</con:value></con:property><con:property><con:name>defaultAdmin</con:name><con:value>310386051</con:value></con:property><con:property><con:name>defaultGuid</con:name><con:value>vPzoY7GoxnjrxKzErzRZKDvNTEYhQ7</con:value></con:property><con:property><con:name>orgAllSections</con:name><con:value>4737</con:value></con:property><con:property><con:name>orgDataItemPI01</con:name><con:value>4705</con:value></con:property><con:property><con:name>orgDataItemPI02</con:name><con:value>4706</con:value></con:property><con:property><con:name>orgDataItemPI03</con:name><con:value>4707</con:value></con:property><con:property><con:name>orgDataItemPI04</con:name><con:value>4708</con:value></con:property><con:property><con:name>orgDataItemPI05</con:name><con:value>4709</con:value></con:property><con:property><con:name>orgDataItemPI06</con:name><con:value>4710</con:value></con:property><con:property><con:name>orgDataItemPI07</con:name><con:value>4711</con:value></con:property><con:property><con:name>orgDataItemPI08</con:name><con:value>4712</con:value></con:property><con:property><con:name>orgDataItemPI09</con:name><con:value>4713</con:value></con:property><con:property><con:name>orgDataItemPI10</con:name><con:value>4714</con:value></con:property><con:property><con:name>orgDataItemPI11</con:name><con:value>4715</con:value></con:property><con:property><con:name>orgDataItemPI12</con:name><con:value>4716</con:value></con:property><con:property><con:name>orgDataItemPI13</con:name><con:value>4717</con:value></con:property><con:property><con:name>orgDataItemPI14</con:name><con:value>4718</con:value></con:property><con:property><con:name>orgDataItemPI15</con:name><con:value>4719</con:value></con:property><con:property><con:name>orgDataItemPI16</con:name><con:value>4720</con:value></con:property><con:property><con:name>orgDataItemPI17</con:name><con:value>4721</con:value></con:property><con:property><con:name>orgDataItemPI18</con:name><con:value>4722</con:value></con:property><con:property><con:name>orgDataItemPI19</con:name><con:value>4723</con:value></con:property><con:property><con:name>orgDataItemPI20</con:name><con:value>4724</con:value></con:property><con:property><con:name>orgDataItemPI21</con:name><con:value>4725</con:value></con:property><con:property><con:name>orgDataItemPI22</con:name><con:value>4726</con:value></con:property><con:property><con:name>orgDataItemPI23</con:name><con:value>4727</con:value></con:property><con:property><con:name>orgDataItemPI24</con:name><con:value>4728</con:value></con:property><con:property><con:name>orgDataModule1</con:name><con:value>4729</con:value></con:property><con:property><con:name>orgDataModule2</con:name><con:value>4730</con:value></con:property><con:property><con:name>orgDataModule3</con:name><con:value>4731</con:value></con:property><con:property><con:name>orgDataModule4</con:name><con:value>4732</con:value></con:property><con:property><con:name>orgDataModule5</con:name><con:value>4733</con:value></con:property><con:property><con:name>orgDataModule6</con:name><con:value>4734</con:value></con:property><con:property><con:name>orgDataModule7</con:name><con:value>4735</con:value></con:property><con:property><con:name>orgDataModule8</con:name><con:value>4736</con:value></con:property><con:property><con:name>Response1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Response2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Response3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>orgToCreate</con:name><con:value>12293092509</con:value></con:property></con:properties></con:testCase><con:testCase id="223424c7-d2b4-4054-92a8-f59ee9d804c3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Epic2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="groovy" name="set" id="6818ff8a-efcd-46e5-a68c-e4e7e49ffa35"><con:settings/><con:config><script>import com.gurutester.*;

//******************
// Initialisations
//******************
	PropertiesUtil props = new PropertiesUtil();
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase() //get project objects
	def testConditions=[:], outputs=[:] //define property maps
	
	testConditions = props.getMyProperties(testRunner.testCase.testSuite) 
	props.enableAllSteps(context.testCase)

//***********************************
// Set required steps for Asset Logic
//***********************************
	if (testConditions["testOrgEpic"] == "dummyData13") {
		context.testCase.getTestStepByName("abnLookup").setDisabled(false)
		context.testCase.getTestStepByName("submitE2DummyData").setDisabled(false)}


	else if (testConditions["testOrgEpic"] == "someOtherData") {
		context.testCase.getTestStepByName("submitE2DummyData").setDisabled(true)		
		}

	
sleep 1000
//************************************************************************************
// Save Test Conditions Data Change back to Test Case Properties and update the logger
//************************************************************************************
	outputs["setLogger"] = testConditions["setLogger"] + "Customised Step conditions have been applied for the Test"
	outputs["003_set"] = outputs["setLogger"]
	props.saveToProperties(testRunner.testCase, outputs) 
	
	log.info "epic2-set"	
</script></con:config></con:testStep><con:testStep type="groovy" name="data" id="b53cded3-5c68-4a22-9a96-8b958ab0a0d8"><con:settings/><con:config><script>/*
 *  Data Script
 *  Author : Michael De Robertis 
 *  05/11/2018	refactoring		
 */

import java.util.Random
import org.apache.commons.lang.RandomStringUtils
import com.gurutester.*  

//***********************************
// Define property maps to store data
//***********************************
	def datagen=[:]; def test=[:]; def testLogger=[:]; def mockdatagen=[:]

//************************
// Instantiate the Classes
// 	20/5/2019 
//	HealthData now in jar file not SoapUI Library (be it Core as per original solution or locally in the test case as per change made for maven 13/5/19) 
//************************
	HealthData hd = new HealthData();
	BioData bd = new BioData();
	PropertiesUtil props = new PropertiesUtil();
	SystemRelated sr = new SystemRelated();	

//***********************************************
// Create Default Data (including library calls)
//***********************************************
	datagen["input1"] = "input1Data"; datagen["input2"] = "input2Data"; datagen["input3"] = "input3Data";
	datagen["dataFirstName"] = bd.firstName; datagen["dataLastName"] = bd.lastName; 
	datagen["dataTester"] = datagen["systemUser"] = sr.username;
	datagen["dataGivenNameKey"] = hd.GivenNameKey; 
	datagen["dataLastNameKey"] = hd.LastNameKey
	datagen["dataRequestSystem"] = hd.requestSystem; 
	datagen["dataFalse"] = hd.ffalse
	datagen["dataAbnAttribute"] = hd.AbnAttribute; 
	datagen["dataPasswordKey"] = hd.PasswordKey
	datagen["dataPassword"] = hd.password; 
	datagen["dataAccType"] = hd.accType; 
	datagen["dataAccTCId"] = hd.acceptedTCidRequest	
	datagen["dataTermsValue"] = hd.termsValue; 
	datagen["dataTrue"] = hd.ttrue; 
	datagen["dataEmailAddress"] = hd.emailAddress
	datagen["dataPhoneNumber"] = hd.phoneNumber; 
	datagen["dataUsage"] = hd.usage; 
	datagen["dataUsageAssert"] = hd.usageAssert
	datagen["dataServicesName"] = hd.servicesName;
	datagen["dataFalse"] = hd.ffalse
	datagen["dataAssetTitle"] = hd.assetTitle
	datagen["dataAssetDescription"] = hd.assetDescription
	datagen["dataReportingRndRefId"] = hd.assetRepRndRedId //note the spelling error
	datagen["systemHost"] = sr.hostname
	datagen["dataRegisterPersonExpectedOutcome"] = "SUCCESS_NEW_PERSON";
	datagen["dataAddTokenExpectedOutcome"]="Active";
	datagen["dataUpdateRolesExpectedOutcome"]="UPDATED"
	datagen["dataExistingGroupingExpectedResponse"] = "ALREADY_EXISTS"; datagen["dataUpdateUserGroupingsExpectedOutcome"]="UPDATED"; datagen["dataSaveDataAssetExpectedOutcome"]="UPDATED"
	datagen["dataState"] = 'Australian Capital Territory'; datagen["dataStateAbbr"] = "ACT" 
	datagen["dataReinstateCount"] = datagen["dataPublicationRemoveCount"] = datagen["dataRevisionRequired"] = datagen["dataStepAfterRevisionRequired"] = "nil" //used to compare against when a reinstate is already ran in custom

	// set a random word to use when searching for an Company (whose ABN will be used for Org creation) 	
	Random random = new Random(); 
	def searchWords = ["good", "people", "grow", "many", "ideas", "within", "scope", "belief", "crumb", "banana", "apple", "tomato","orange", "lemon", "fruit", "square", "triangle", "fat", "skin", "pink"] 
	def sWord = random.nextInt(searchWords.size()); datagen["abnLookupSearchCriterion"] = (searchWords.toSet() as List)[sWord]
	datagen["orgFofmsid"] = "66-${datagen["abnLookupSearchCriterion"]}-${sWord}"
	datagen["dataOrgType"]= hd.OrgType

//*****************
// Date Time Stuff
//*****************
	datagen["dateTime1"] = sr.dateTime1
	datagen["dateTime2"] = sr.dateTime2
	datagen["dateTime3"] = sr.dateTime3
	datagen["dateTime4"] = sr.dateTime4
	datagen["dataYesterday"] = sr.addDay(-1)
	datagen["dataToday"] = sr.addDay(0)
	datagen["dataTomorrow"] = sr.addDay(1)
	datagen["dataLastMonth"] = sr.addDay(-30)
	datagen["dataLastQuarter"] = sr.addDay(-120)

//****************************************************************************
// Apply logic based on Test Conditions
//****************************************************************************
	test = props.getMyProperties(testRunner.testCase.testSuite) //get test data from testSuite properties

	// Eg if need to change some data based on hard-coded test environment conditions
	if ((test["propEnvironment"] == "SIT") || (test["propEnvironment"] == "Test") || (test["propEnvironment"] == "MOCK")){
		datagen["parentOrgName"] = "AUTOMATION TESTING ORG PARENT TWO"; datagen["parentOrgId"] = "2478"; datagen["testDefaultAbnSet"] = "66059658641"
		datagen["defaultAdmin"] = "477898381"; datagen["defaultGuid"] = "hvXCWFWyiJuPZGgT8MllYKEVxPJnhh"
		datagen["orgAllSections"]="2815";
		datagen["orgDataItemPI01"]="2783";datagen["orgDataItemPI02"]="2784";datagen["orgDataItemPI03"]="2785";datagen["orgDataItemPI04"]="2786";datagen["orgDataItemPI05"]="2787";datagen["orgDataItemPI06"]="2788";datagen["orgDataItemPI07"]="2789"
		datagen["orgDataItemPI08"]="2790";datagen["orgDataItemPI09"]="2791";datagen["orgDataItemPI10"]="2792";datagen["orgDataItemPI11"]="2793";datagen["orgDataItemPI12"]="2794";datagen["orgDataItemPI13"]="2795";datagen["orgDataItemPI14"]="2796";datagen["orgDataItemPI15"]="2797"
		datagen["orgDataItemPI16"]="2798";datagen["orgDataItemPI17"]="2799";datagen["orgDataItemPI18"]="2800";datagen["orgDataItemPI19"]="2801";datagen["orgDataItemPI20"]="2802";datagen["orgDataItemPI21"]="2803";datagen["orgDataItemPI22"]="2804";datagen["orgDataItemPI23"]="2805"
		datagen["orgDataItemPI24"]="2806";datagen["orgDataModule1"]="2807";datagen["orgDataModule2"]="2808";datagen["orgDataModule3"]="2809";datagen["orgDataModule4"]="2810";datagen["orgDataModule5"]="2811";datagen["orgDataModule6"]="2812";datagen["orgDataModule7"]="2813"
		datagen["orgDataModule8"]="2815"	}

	else if ((test["propEnvironment"] == "DEV") || (test["propEnvironment"] == "Dev")){

		datagen["parentOrgName"] = "AUTOMATION TEST ORG DEV92 PARENT 1"; datagen["parentOrgId"] = "2491"; datagen["testDefaultAbnSet"] = "67320421670"
		datagen["defaultAdmin"] = "310386051"; datagen["defaultGuid"] = "vPzoY7GoxnjrxKzErzRZKDvNTEYhQ7" //created external user Kroonini Baionand in DEV for the default parent via soap
		datagen["orgAllSections"]="4737";datagen["orgDataItemPI01"]="4705";datagen["orgDataItemPI02"]="4706";datagen["orgDataItemPI03"]="4707";datagen["orgDataItemPI04"]="4708";datagen["orgDataItemPI05"]="4709";datagen["orgDataItemPI06"]="4710";datagen["orgDataItemPI07"]="4711"
		datagen["orgDataItemPI08"]="4712";datagen["orgDataItemPI09"]="4713";datagen["orgDataItemPI10"]="4714";datagen["orgDataItemPI11"]="4715";datagen["orgDataItemPI12"]="4716";datagen["orgDataItemPI13"]="4717";datagen["orgDataItemPI14"]="4718";datagen["orgDataItemPI15"]="4719"
		datagen["orgDataItemPI16"]="4720";datagen["orgDataItemPI17"]="4721";datagen["orgDataItemPI18"]="4722";datagen["orgDataItemPI19"]="4723";datagen["orgDataItemPI20"]="4724";datagen["orgDataItemPI21"]="4725";datagen["orgDataItemPI22"]="4726";datagen["orgDataItemPI23"]="4727"
		datagen["orgDataItemPI24"]="4728";datagen["orgDataModule1"]="4729";datagen["orgDataModule2"]="4730";datagen["orgDataModule3"]="4731";datagen["orgDataModule4"]="4732";datagen["orgDataModule5"]="4733";datagen["orgDataModule6"]="4734";datagen["orgDataModule7"]="4735"
		datagen["orgDataModule8"]="4736"
		}


//****************************************************************
// EG Do stuff based on epic combos
//****************************************************************

	// check if running Org/User and if so do nothing
	if ((test["propTestCase1"] == "Epic1")&amp;&amp;(test["propTestCase2"] == "Epic2")) {  
		//do something 
		}

	
	else if ((test["propTestCase1"] == "Epic2")||(test["propTestCase2"] == "Epic3")) { 
		//do something else	
		}


//******************
// Mocking Logic
//******************
	if (test["propMock"] == "on"){
		testRunner.testCase.testSuite.project.getMockServiceByName("LocalhostMock").start() //start the mock service
		datagen["propEndpoint1"] = datagen["propEndpoint2"] = datagen["propEndpoint3"] = datagen["propEndpoint4"] = datagen["propEndpoint5"] = "http://localhost:591/" //set the endpoints to the mock service
		
		//set some dummy data (substitutions for real responses, ie to mimick real values where possible; also set hard-coded values that we dont care about for mocking)
		mockdatagen["respSomeProperty1"] = "some mock value1"; mockdatagen["respSomeProperty2"] = "some mock value2"; 
		}

sleep 1000	
//***********
// Save Data 
//***********
	props.saveToProperties(testRunner.testCase, test) //data for test case consumpsion
	props.saveToProperties(testRunner.testCase.testSuite, testLogger) //data for holding in test suite properties
	props.saveToProperties(testRunner.testCase, datagen); 
	props.saveToProperties(testRunner.testCase.testSuite.project.mockServices["LocalhostMock"], mockdatagen) //mock data for holding in mock service properties

log.info "epic2-data"		</script></con:config></con:testStep><con:testStep type="request" id="391e5e94-275f-412c-b302-1428e9bd2ac4" name="submitE2DummyData"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MDRDataServiceSoap</con:interface><con:operation>SubmitDummyData</con:operation><con:request name="submitE2DummyData" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="626aab2e-4db7-4132-b0e5-b5cc3f820f1b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#propEndpoint1}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:imp="http://improve.org.au/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <imp:SubmitDummyData>\r
         <!--Optional:-->\r
         <imp:DummySummaryData>\r
			<SomeInput>${#TestCase#input2}</SomeInput>
         </imp:DummySummaryData>\r
      </imp:SubmitDummyData>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" id="1fb6dca8-add8-4fd0-be73-f2779790203b" name="assertResponse"><con:configuration><path>//result2</path><content>happyDays2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f7abe1bb-d2a7-4e2f-90c3-b2b62b1aefa6" name="Script Assertion"><con:configuration><scriptText>/*
 *  Script : SOAP Response Assertion Script
 *  Author : Michael De Robertis

 *  	How to get CDATA response data
 *  	How to get response data
 *  	Write back to Test Case Ppoperties for consumption
 */



def response = context.response
//assert response, 'response is empty or null'

//Closure to parse and extract the data
def getData = { data, element ->
  def pXml = new XmlSlurper().parseText(data)
  def codes = pXml.'**'.findAll { it.name() == element}  
}

// Get the cdata part
def cdata1 = getData(response, 'Response1')[0] as String
def cdata2 = getData(response, 'Response2')[0] as String
def cdata3 = getData(response, 'Response3')[0] as String

// Get the substring userid bit
def resp1 = cdata1
def resp2 = cdata2
def resp3 = cdata3

messageExchange.modelItem.testStep.testCase.setPropertyValue("Response1", resp1)
messageExchange.modelItem.testStep.testCase.setPropertyValue("Response2", resp2)
messageExchange.modelItem.testStep.testCase.setPropertyValue("Response3", resp3)

// add a mini delay
sleep 1000
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://improve.org.au/SubmitDummyData"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="httprequest" name="abnLookup" id="0ec24d3e-b361-47d3-9871-ecc6d5039119"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="9949f5c6-d63c-4020-98aa-67e66c3cf2f2" name="abnLookup" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://abr.business.gov.au/search/resultsactive</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" id="0bbfd3ef-7e72-4cea-8730-db14b052d092" name="searchAbn"><con:configuration><scriptText>//********************
// Select a random ABN
//********************

import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder (messageExchange.responseContentAsXml)

Random random = new Random()
String ranNum = "${random.nextInt(212-13)+13}"

for (item in holder.getNodeValues("//form/*:input[${ranNum}]/@value"))
x = (item.split(",")[0]).toString()
//log.info x
messageExchange.modelItem.testStep.testCase.setPropertyValue("orgToCreate", x)
//messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue("orgToCreateMOCK", x) //old method for mock
//messageExchange.modelItem.testStep.testCase.testSuite.project.mockServices["LocalhostMock"].setPropertyValue("orgToCreateMOCK", x)
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>searchtext</con:name><con:value>${#TestCase#abnLookupSearchCriterion}</con:value><con:style>QUERY</con:style></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="log" id="f44bae94-7d35-4e6d-b886-0ab29af3bcef"><con:settings/><con:config><script>import com.gurutester.*
PropertiesUtil props = new PropertiesUtil();
testConditions = props.getMyProperties(testRunner.testCase)
props.logResults(testRunner.testCase, "${testConditions["projectLocation"]}", "${testConditions["TestID"]}", "${testConditions["propEnvironment"]}");
log.info "epic2-log"		
</script></con:config></con:testStep><con:setupScript>import com.gurutester.*;

PropertiesUtil props = new PropertiesUtil();
props.enableAllSteps(testRunner.testCase);
props.removeProperties(testRunner.testCase);

log.info "Epic2-setup"


</con:setupScript><con:tearDownScript>import com.gurutester.*;
PropertiesUtil props = new PropertiesUtil();

//**************************************************
// ALM Customisation for QC_Id, QC_Upload
//	Current design provides QC_Id by default
//	and other QC_Id_xxx variations if applicable
//	to the customisation. In those cases this script
//	picks up those options as required (In this case getting QC_Id_org)
//
//	Enable QC_Upload as disabled from test Suite
//***************************************************  

// Set QC_Id to QC_Id_org if if Dragon Fly is enabled and testOrgEpic = newExternal
if ((testRunner.testCase.testSuite.project.getPropertyValue("QC_Dragonfly_Plugin")=='enabled')&amp;&amp;((testRunner.testCase.testSuite.getPropertyValue("propTestCase1")=="Epic2")||(testRunner.testCase.testSuite.getPropertyValue("propTestCase2")=="Epic2")))
	{
	testRunner.testCase.setPropertyValue("QC_Id", "${testRunner.testCase.testSuite.getPropertyValue("QC_Id_Epic2")}")
	testRunner.testCase.setPropertyValue("QC_Upload", "enabled")	
	}

// Otherwise remove QC_Id
else {
	
	testRunner.testCase.removeProperty("QC_Id")
	testRunner.testCase.removeProperty("QC_Upload")	
	}


// enable all steps
props.enableAllSteps(testRunner.testCase);

log.info "Epic2-teardown"</con:tearDownScript><con:properties><con:property><con:name>setLogger</con:name><con:value>nullCustomised Step conditions have been applied for the Test</con:value></con:property><con:property><con:name>003_set</con:name><con:value>nullCustomised Step conditions have been applied for the Test</con:value></con:property><con:property><con:name>projectLocation</con:name><con:value>U:\Documents\soapui\projects\concepts</con:value></con:property><con:property><con:name>projectEnvironment</con:name><con:value>DEV</con:value></con:property><con:property><con:name>projectEnvironmentDB</con:name><con:value>dev</con:value></con:property><con:property><con:name>input1</con:name><con:value>input1Data</con:value></con:property><con:property><con:name>input2</con:name><con:value>input2Data</con:value></con:property><con:property><con:name>input3</con:name><con:value>input3Data</con:value></con:property><con:property><con:name>dataFirstName</con:name><con:value>Jenertand</con:value></con:property><con:property><con:name>dataLastName</con:name><con:value>Krieoerd</con:value></con:property><con:property><con:name>systemUser</con:name><con:value>a_derobm</con:value></con:property><con:property><con:name>dataTester</con:name><con:value>a_derobm</con:value></con:property><con:property><con:name>dataGivenNameKey</con:name><con:value>givenName</con:value></con:property><con:property><con:name>dataLastNameKey</con:name><con:value>sn</con:value></con:property><con:property><con:name>dataRequestSystem</con:name><con:value>DP</con:value></con:property><con:property><con:name>dataFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>dataAbnAttribute</con:name><con:value>ABNorganization</con:value></con:property><con:property><con:name>dataPasswordKey</con:name><con:value>password</con:value></con:property><con:property><con:name>dataPassword</con:name><con:value>passw0rd</con:value></con:property><con:property><con:name>dataAccType</con:name><con:value>AKEY</con:value></con:property><con:property><con:name>dataAccTCId</con:name><con:value>401</con:value></con:property><con:property><con:name>dataTermsValue</con:name><con:value>&lt;![CDATA[This is some Terms And Conditions sample text for Test Automation and it contains a CEND ]]]]&gt;&lt;![CDATA[>]]&gt;</con:value></con:property><con:property><con:name>dataTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>dataEmailAddress</con:name><con:value>automation.testing@somedomain.com.au</con:value></con:property><con:property><con:name>dataPhoneNumber</con:name><con:value>(02) 6211 2222</con:value></con:property><con:property><con:name>dataUsage</con:name><con:value>HOME</con:value></con:property><con:property><con:name>dataUsageAssert</con:name><con:value>BUSN</con:value></con:property><con:property><con:name>dataServicesName</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>dataAssetTitle</con:name><con:value>AUTOTEST_ASSET18824</con:value></con:property><con:property><con:name>dataAssetDescription</con:name><con:value>This is a description for AUTOTEST_ASSET18824</con:value></con:property><con:property><con:name>dataReportingRndRefId</con:name><con:value>0</con:value></con:property><con:property><con:name>systemHost</con:name><con:value>CW2K16TS01</con:value></con:property><con:property><con:name>dataRegisterPersonExpectedOutcome</con:name><con:value>SUCCESS_NEW_PERSON</con:value></con:property><con:property><con:name>dataAddTokenExpectedOutcome</con:name><con:value>Active</con:value></con:property><con:property><con:name>dataUpdateRolesExpectedOutcome</con:name><con:value>UPDATED</con:value></con:property><con:property><con:name>dataExistingGroupingExpectedResponse</con:name><con:value>ALREADY_EXISTS</con:value></con:property><con:property><con:name>dataUpdateUserGroupingsExpectedOutcome</con:name><con:value>UPDATED</con:value></con:property><con:property><con:name>dataSaveDataAssetExpectedOutcome</con:name><con:value>UPDATED</con:value></con:property><con:property><con:name>dataState</con:name><con:value>Australian Capital Territory</con:value></con:property><con:property><con:name>dataStateAbbr</con:name><con:value>ACT</con:value></con:property><con:property><con:name>dataStepAfterRevisionRequired</con:name><con:value>nil</con:value></con:property><con:property><con:name>dataRevisionRequired</con:name><con:value>nil</con:value></con:property><con:property><con:name>dataPublicationRemoveCount</con:name><con:value>nil</con:value></con:property><con:property><con:name>dataReinstateCount</con:name><con:value>nil</con:value></con:property><con:property><con:name>abnLookupSearchCriterion</con:name><con:value>fat</con:value></con:property><con:property><con:name>orgFofmsid</con:name><con:value>66-fat-18</con:value></con:property><con:property><con:name>dataOrgType</con:name><con:value>Local Government</con:value></con:property><con:property><con:name>dateTime1</con:name><con:value>2019-12-09T03:26:48.99999999+10:30</con:value></con:property><con:property><con:name>dateTime2</con:name><con:value>20191209</con:value></con:property><con:property><con:name>dateTime3</con:name><con:value>201912091526048</con:value></con:property><con:property><con:name>dateTime4</con:name><con:value>2019-12-09</con:value></con:property><con:property><con:name>dataYesterday</con:name><con:value>2019-12-08</con:value></con:property><con:property><con:name>dataToday</con:name><con:value>2019-12-09</con:value></con:property><con:property><con:name>dataTomorrow</con:name><con:value>2019-12-10</con:value></con:property><con:property><con:name>dataLastMonth</con:name><con:value>2019-11-09</con:value></con:property><con:property><con:name>dataLastQuarter</con:name><con:value>2019-08-11</con:value></con:property></con:properties></con:testCase><con:testCase id="c39c32d6-6167-4048-9ed6-52eb5dc2a90d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Epic3" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="groovy" name="set" id="06820628-8184-4bd3-b6a7-08def2ce75b2"><con:settings/><con:config><script>import com.gurutester.*;

//******************
// Initialisations
//******************
	PropertiesUtil props = new PropertiesUtil();
	def objGlobal = com.eviware.soapui.SoapUI.globalProperties; def objProject = testRunner.getTestCase().getTestSuite().getProject(); def objCase = testRunner.getTestCase() //get project objects
	def testConditions=[:], outputs=[:] //define property maps
	
	testConditions = props.getMyProperties(testRunner.testCase.testSuite) 
	props.enableAllSteps(context.testCase)

//***********************************
// Set required steps for Asset Logic
//***********************************
	if (testConditions["testOrgEpic"] == "dummyData13") {
		context.testCase.getTestStepByName("abnLookup").setDisabled(false)
		context.testCase.getTestStepByName("submitE3DummyData").setDisabled(false)}


	else if (testConditions["testOrgEpic"] == "someOtherData") {
		context.testCase.getTestStepByName("submitE3DummyData").setDisabled(true)		
		}

	
sleep 1000
//************************************************************************************
// Save Test Conditions Data Change back to Test Case Properties and update the logger
//************************************************************************************
	outputs["setLogger"] = testConditions["setLogger"] + "Customised Step conditions have been applied for the Test"
	outputs["003_set"] = outputs["setLogger"]
	props.saveToProperties(testRunner.testCase, outputs) 
	
	log.info "epic3-set"	
</script></con:config></con:testStep><con:testStep type="groovy" name="data" id="bd5a5438-a54d-4180-ac1c-5b7c55b0dcf2"><con:settings/><con:config><script>/*
 *  Data Script
 *  Author : Michael De Robertis 
 *  05/11/2018	refactoring		
 */

import java.util.Random
import org.apache.commons.lang.RandomStringUtils
import com.gurutester.*  

//***********************************
// Define property maps to store data
//***********************************
	def datagen=[:]; def test=[:]; def testLogger=[:]; def mockdatagen=[:]

//************************
// Instantiate the Classes
// 	20/5/2019 
//	HealthData now in jar file not SoapUI Library (be it Core as per original solution or locally in the test case as per change made for maven 13/5/19) 
//************************
	HealthData hd = new HealthData();
	BioData bd = new BioData();
	PropertiesUtil props = new PropertiesUtil();
	SystemRelated sr = new SystemRelated();	

//***********************************************
// Create Default Data (including library calls)
//***********************************************
	datagen["input1"] = "input1Data"; datagen["input2"] = "input2Data"; datagen["input3"] = "input3Data";
	datagen["dataFirstName"] = bd.firstName; datagen["dataLastName"] = bd.lastName; 
	datagen["dataTester"] = datagen["systemUser"] = sr.username;
	datagen["dataGivenNameKey"] = hd.GivenNameKey; 
	datagen["dataLastNameKey"] = hd.LastNameKey
	datagen["dataRequestSystem"] = hd.requestSystem; 
	datagen["dataFalse"] = hd.ffalse
	datagen["dataAbnAttribute"] = hd.AbnAttribute; 
	datagen["dataPasswordKey"] = hd.PasswordKey
	datagen["dataPassword"] = hd.password; 
	datagen["dataAccType"] = hd.accType; 
	datagen["dataAccTCId"] = hd.acceptedTCidRequest	
	datagen["dataTermsValue"] = hd.termsValue; 
	datagen["dataTrue"] = hd.ttrue; 
	datagen["dataEmailAddress"] = hd.emailAddress
	datagen["dataPhoneNumber"] = hd.phoneNumber; 
	datagen["dataUsage"] = hd.usage; 
	datagen["dataUsageAssert"] = hd.usageAssert
	datagen["dataServicesName"] = hd.servicesName;
	datagen["dataFalse"] = hd.ffalse
	datagen["dataAssetTitle"] = hd.assetTitle
	datagen["dataAssetDescription"] = hd.assetDescription
	datagen["dataReportingRndRefId"] = hd.assetRepRndRedId //note the spelling error
	datagen["systemHost"] = sr.hostname
	datagen["dataRegisterPersonExpectedOutcome"] = "SUCCESS_NEW_PERSON";
	datagen["dataAddTokenExpectedOutcome"]="Active";
	datagen["dataUpdateRolesExpectedOutcome"]="UPDATED"
	datagen["dataExistingGroupingExpectedResponse"] = "ALREADY_EXISTS"; datagen["dataUpdateUserGroupingsExpectedOutcome"]="UPDATED"; datagen["dataSaveDataAssetExpectedOutcome"]="UPDATED"
	datagen["dataState"] = 'Australian Capital Territory'; datagen["dataStateAbbr"] = "ACT" 
	datagen["dataReinstateCount"] = datagen["dataPublicationRemoveCount"] = datagen["dataRevisionRequired"] = datagen["dataStepAfterRevisionRequired"] = "nil" //used to compare against when a reinstate is already ran in custom

	// set a random word to use when searching for an Company (whose ABN will be used for Org creation) 	
	Random random = new Random(); 
	def searchWords = ["good", "people", "grow", "many", "ideas", "within", "scope", "belief", "crumb", "banana", "apple", "tomato","orange", "lemon", "fruit", "square", "triangle", "fat", "skin", "pink"] 
	def sWord = random.nextInt(searchWords.size()); datagen["abnLookupSearchCriterion"] = (searchWords.toSet() as List)[sWord]
	datagen["orgFofmsid"] = "66-${datagen["abnLookupSearchCriterion"]}-${sWord}"
	datagen["dataOrgType"]= hd.OrgType

//*****************
// Date Time Stuff
//*****************
	datagen["dateTime1"] = sr.dateTime1
	datagen["dateTime2"] = sr.dateTime2
	datagen["dateTime3"] = sr.dateTime3
	datagen["dateTime4"] = sr.dateTime4
	datagen["dataYesterday"] = sr.addDay(-1)
	datagen["dataToday"] = sr.addDay(0)
	datagen["dataTomorrow"] = sr.addDay(1)
	datagen["dataLastMonth"] = sr.addDay(-30)
	datagen["dataLastQuarter"] = sr.addDay(-120)

//****************************************************************************
// Apply logic based on Test Conditions
//****************************************************************************
	test = props.getMyProperties(testRunner.testCase.testSuite) //get test data from testSuite properties

	// Eg if need to change some data based on hard-coded test environment conditions
	if ((test["propEnvironment"] == "SIT") || (test["propEnvironment"] == "Test") || (test["propEnvironment"] == "MOCK")){
		datagen["parentOrgName"] = "AUTOMATION TESTING ORG PARENT TWO"; datagen["parentOrgId"] = "2478"; datagen["testDefaultAbnSet"] = "66059658641"
		datagen["defaultAdmin"] = "477898381"; datagen["defaultGuid"] = "hvXCWFWyiJuPZGgT8MllYKEVxPJnhh"
		datagen["orgAllSections"]="2815";
		datagen["orgDataItemPI01"]="2783";datagen["orgDataItemPI02"]="2784";datagen["orgDataItemPI03"]="2785";datagen["orgDataItemPI04"]="2786";datagen["orgDataItemPI05"]="2787";datagen["orgDataItemPI06"]="2788";datagen["orgDataItemPI07"]="2789"
		datagen["orgDataItemPI08"]="2790";datagen["orgDataItemPI09"]="2791";datagen["orgDataItemPI10"]="2792";datagen["orgDataItemPI11"]="2793";datagen["orgDataItemPI12"]="2794";datagen["orgDataItemPI13"]="2795";datagen["orgDataItemPI14"]="2796";datagen["orgDataItemPI15"]="2797"
		datagen["orgDataItemPI16"]="2798";datagen["orgDataItemPI17"]="2799";datagen["orgDataItemPI18"]="2800";datagen["orgDataItemPI19"]="2801";datagen["orgDataItemPI20"]="2802";datagen["orgDataItemPI21"]="2803";datagen["orgDataItemPI22"]="2804";datagen["orgDataItemPI23"]="2805"
		datagen["orgDataItemPI24"]="2806";datagen["orgDataModule1"]="2807";datagen["orgDataModule2"]="2808";datagen["orgDataModule3"]="2809";datagen["orgDataModule4"]="2810";datagen["orgDataModule5"]="2811";datagen["orgDataModule6"]="2812";datagen["orgDataModule7"]="2813"
		datagen["orgDataModule8"]="2815"	}

	else if ((test["propEnvironment"] == "DEV") || (test["propEnvironment"] == "Dev")){

		datagen["parentOrgName"] = "AUTOMATION TEST ORG DEV92 PARENT 1"; datagen["parentOrgId"] = "2491"; datagen["testDefaultAbnSet"] = "67320421670"
		datagen["defaultAdmin"] = "310386051"; datagen["defaultGuid"] = "vPzoY7GoxnjrxKzErzRZKDvNTEYhQ7" //created external user Kroonini Baionand in DEV for the default parent via soap
		datagen["orgAllSections"]="4737";datagen["orgDataItemPI01"]="4705";datagen["orgDataItemPI02"]="4706";datagen["orgDataItemPI03"]="4707";datagen["orgDataItemPI04"]="4708";datagen["orgDataItemPI05"]="4709";datagen["orgDataItemPI06"]="4710";datagen["orgDataItemPI07"]="4711"
		datagen["orgDataItemPI08"]="4712";datagen["orgDataItemPI09"]="4713";datagen["orgDataItemPI10"]="4714";datagen["orgDataItemPI11"]="4715";datagen["orgDataItemPI12"]="4716";datagen["orgDataItemPI13"]="4717";datagen["orgDataItemPI14"]="4718";datagen["orgDataItemPI15"]="4719"
		datagen["orgDataItemPI16"]="4720";datagen["orgDataItemPI17"]="4721";datagen["orgDataItemPI18"]="4722";datagen["orgDataItemPI19"]="4723";datagen["orgDataItemPI20"]="4724";datagen["orgDataItemPI21"]="4725";datagen["orgDataItemPI22"]="4726";datagen["orgDataItemPI23"]="4727"
		datagen["orgDataItemPI24"]="4728";datagen["orgDataModule1"]="4729";datagen["orgDataModule2"]="4730";datagen["orgDataModule3"]="4731";datagen["orgDataModule4"]="4732";datagen["orgDataModule5"]="4733";datagen["orgDataModule6"]="4734";datagen["orgDataModule7"]="4735"
		datagen["orgDataModule8"]="4736"
		}


//****************************************************************
// EG Do stuff based on epic combos
//****************************************************************

	// check if running Org/User and if so do nothing
	if ((test["propTestCase1"] == "Epic1")&amp;&amp;(test["propTestCase2"] == "Epic2")) {  
		//do something 
		}

	
	else if ((test["propTestCase1"] == "Epic2")||(test["propTestCase2"] == "Epic3")) { 
		//do something else	
		}


//******************
// Mocking Logic
//******************
	if (test["propMock"] == "on"){
		testRunner.testCase.testSuite.project.getMockServiceByName("LocalhostMock").start() //start the mock service
		datagen["propEndpoint1"] = datagen["propEndpoint2"] = datagen["propEndpoint3"] = datagen["propEndpoint4"] = datagen["propEndpoint5"] = "http://localhost:591/" //set the endpoints to the mock service
		
		//set some dummy data (substitutions for real responses, ie to mimick real values where possible; also set hard-coded values that we dont care about for mocking)
		mockdatagen["respSomeProperty1"] = "some mock value1"; mockdatagen["respSomeProperty2"] = "some mock value2"; 
		}

sleep 1000	
//***********
// Save Data 
//***********
	props.saveToProperties(testRunner.testCase, test) //data for test case consumpsion
	props.saveToProperties(testRunner.testCase.testSuite, testLogger) //data for holding in test suite properties
	props.saveToProperties(testRunner.testCase, datagen); 
	props.saveToProperties(testRunner.testCase.testSuite.project.mockServices["LocalhostMock"], mockdatagen) //mock data for holding in mock service properties

log.info "epic3-data"		</script></con:config></con:testStep><con:testStep type="request" id="52c4e988-f54a-45aa-ae28-c9d4a5b8e2d3" name="submitE3DummyData"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MDRDataServiceSoap</con:interface><con:operation>SubmitDummyData</con:operation><con:request name="submitE3DummyData" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="626aab2e-4db7-4132-b0e5-b5cc3f820f1b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#propEndpoint1}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:imp="http://improve.org.au/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <imp:SubmitDummyData>\r
         <!--Optional:-->\r
         <imp:DummySummaryData>\r
            <SomeInput>${#TestCase#input3}</SomeInput>
         </imp:DummySummaryData>\r
      </imp:SubmitDummyData>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="XPath Match" id="1fb6dca8-add8-4fd0-be73-f2779790203b" name="assertResponse"><con:configuration><path>//result1</path><content>happyDays1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f7abe1bb-d2a7-4e2f-90c3-b2b62b1aefa6" name="Script Assertion"><con:configuration><scriptText>/*
 *  Script : SOAP Response Assertion Script
 *  Author : Michael De Robertis

 *  	How to get CDATA response data
 *  	How to get response data
 *  	Write back to Test Case Ppoperties for consumption
 */



def response = context.response
//assert response, 'response is empty or null'

//Closure to parse and extract the data
def getData = { data, element ->
  def pXml = new XmlSlurper().parseText(data)
  def codes = pXml.'**'.findAll { it.name() == element}  
}

// Get the cdata part
def cdata1 = getData(response, 'Response1')[0] as String
def cdata2 = getData(response, 'Response2')[0] as String
def cdata3 = getData(response, 'Response3')[0] as String

// Get the substring userid bit
def resp1 = cdata1
def resp2 = cdata2
def resp3 = cdata3

messageExchange.modelItem.testStep.testCase.setPropertyValue("Response1", resp1)
messageExchange.modelItem.testStep.testCase.setPropertyValue("Response2", resp2)
messageExchange.modelItem.testStep.testCase.setPropertyValue("Response3", resp3)

// add a mini delay
sleep 1000
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://improve.org.au/SubmitDummyData"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="httprequest" name="abnLookup" id="2bb98179-0cc9-4a09-b768-8901101a1f4d"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="9949f5c6-d63c-4020-98aa-67e66c3cf2f2" name="abnLookup" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://abr.business.gov.au/search/resultsactive</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" id="0bbfd3ef-7e72-4cea-8730-db14b052d092" name="searchAbn"><con:configuration><scriptText>//********************
// Select a random ABN
//********************

import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder (messageExchange.responseContentAsXml)

Random random = new Random()
String ranNum = "${random.nextInt(212-13)+13}"

for (item in holder.getNodeValues("//form/*:input[${ranNum}]/@value"))
x = (item.split(",")[0]).toString()
//log.info x
messageExchange.modelItem.testStep.testCase.setPropertyValue("orgToCreate", x)
//messageExchange.modelItem.testStep.testCase.testSuite.project.setPropertyValue("orgToCreateMOCK", x) //old method for mock
//messageExchange.modelItem.testStep.testCase.testSuite.project.mockServices["LocalhostMock"].setPropertyValue("orgToCreateMOCK", x)
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>searchtext</con:name><con:value>${#TestCase#abnLookupSearchCriterion}</con:value><con:style>QUERY</con:style></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="log" id="89761c03-5281-436f-b4ff-1aed09a24420"><con:settings/><con:config><script>import com.gurutester.*
PropertiesUtil props = new PropertiesUtil();
testConditions = props.getMyProperties(testRunner.testCase)
props.logResults(testRunner.testCase, "${testConditions["projectLocation"]}", "${testConditions["TestID"]}", "${testConditions["propEnvironment"]}");
log.info "epic3-log"		
</script></con:config></con:testStep><con:setupScript>import com.gurutester.*;

PropertiesUtil props = new PropertiesUtil();
props.enableAllSteps(testRunner.testCase);
props.removeProperties(testRunner.testCase);

log.info "Epic3-setup"


</con:setupScript><con:tearDownScript><![CDATA[import com.gurutester.*;
PropertiesUtil props = new PropertiesUtil();

//**************************************************
// ALM Customisation for QC_Id, QC_Upload
//	Current design provides QC_Id by default
//	and other QC_Id_xxx variations if applicable
//	to the customisation. In those cases this script
//	picks up those options as required (In this case getting QC_Id_org)
//
//	Enable QC_Upload as disabled from test Suite
//***************************************************  

// Set QC_Id to QC_Id_org if if Dragon Fly is enabled and testOrgEpic = newExternal
if ((testRunner.testCase.testSuite.project.getPropertyValue("QC_Dragonfly_Plugin")=='enabled')&&(testRunner.testCase.testSuite.getPropertyValue("propTestCase1")=="Epic3"))
	{
	testRunner.testCase.setPropertyValue("QC_Id", "${testRunner.testCase.testSuite.getPropertyValue("QC_Id_Epic3")}")
	testRunner.testCase.setPropertyValue("QC_Upload", "enabled")	
	}


else if ((testRunner.testCase.testSuite.project.getPropertyValue("QC_Dragonfly_Plugin")=='enabled')&&(testRunner.testCase.testSuite.getPropertyValue("propTestCase1")=="Epic1")&&(testRunner.testCase.testSuite.getPropertyValue("propTestCase2")=="Epic2")&&(testRunner.testCase.testSuite.getPropertyValue("propTestCase3")=="Epic3"))
	{
	testRunner.testCase.setPropertyValue("QC_Id", "${testRunner.testCase.testSuite.getPropertyValue("QC_Id_Epic1_Epic2_Epic3")}")
	testRunner.testCase.setPropertyValue("QC_Upload", "enabled")	
	}



// Otherwise remove QC_Id
else {
	
	testRunner.testCase.removeProperty("QC_Id")
	testRunner.testCase.removeProperty("QC_Upload")	
	}


// enable all steps
props.enableAllSteps(testRunner.testCase);

log.info "Epic3-teardown"]]></con:tearDownScript><con:properties><con:property><con:name>setLogger</con:name><con:value>nullCustomised Step conditions have been applied for the Test</con:value></con:property><con:property><con:name>003_set</con:name><con:value>nullCustomised Step conditions have been applied for the Test</con:value></con:property><con:property><con:name>projectLocation</con:name><con:value>U:\Documents\soapui\projects\concepts</con:value></con:property><con:property><con:name>projectEnvironment</con:name><con:value>DEV</con:value></con:property><con:property><con:name>projectEnvironmentDB</con:name><con:value>dev</con:value></con:property><con:property><con:name>input1</con:name><con:value>input1Data</con:value></con:property><con:property><con:name>input2</con:name><con:value>input2Data</con:value></con:property><con:property><con:name>input3</con:name><con:value>input3Data</con:value></con:property><con:property><con:name>dataFirstName</con:name><con:value>Brionwis</con:value></con:property><con:property><con:name>dataLastName</con:name><con:value>Boessten</con:value></con:property><con:property><con:name>systemUser</con:name><con:value>a_derobm</con:value></con:property><con:property><con:name>dataTester</con:name><con:value>a_derobm</con:value></con:property><con:property><con:name>dataGivenNameKey</con:name><con:value>givenName</con:value></con:property><con:property><con:name>dataLastNameKey</con:name><con:value>sn</con:value></con:property><con:property><con:name>dataRequestSystem</con:name><con:value>DP</con:value></con:property><con:property><con:name>dataFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>dataAbnAttribute</con:name><con:value>ABNorganization</con:value></con:property><con:property><con:name>dataPasswordKey</con:name><con:value>password</con:value></con:property><con:property><con:name>dataPassword</con:name><con:value>passw0rd</con:value></con:property><con:property><con:name>dataAccType</con:name><con:value>AKEY</con:value></con:property><con:property><con:name>dataAccTCId</con:name><con:value>401</con:value></con:property><con:property><con:name>dataTermsValue</con:name><con:value>&lt;![CDATA[This is some Terms And Conditions sample text for Test Automation and it contains a CEND ]]]]&gt;&lt;![CDATA[>]]&gt;</con:value></con:property><con:property><con:name>dataTrue</con:name><con:value>true</con:value></con:property><con:property><con:name>dataEmailAddress</con:name><con:value>automation.testing@somedomain.com.au</con:value></con:property><con:property><con:name>dataPhoneNumber</con:name><con:value>(02) 6211 2222</con:value></con:property><con:property><con:name>dataUsage</con:name><con:value>HOME</con:value></con:property><con:property><con:name>dataUsageAssert</con:name><con:value>BUSN</con:value></con:property><con:property><con:name>dataServicesName</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>dataAssetTitle</con:name><con:value>AUTOTEST_ASSET15822</con:value></con:property><con:property><con:name>dataAssetDescription</con:name><con:value>This is a description for AUTOTEST_ASSET15822</con:value></con:property><con:property><con:name>dataReportingRndRefId</con:name><con:value>0</con:value></con:property><con:property><con:name>systemHost</con:name><con:value>CW2K16TS01</con:value></con:property><con:property><con:name>dataRegisterPersonExpectedOutcome</con:name><con:value>SUCCESS_NEW_PERSON</con:value></con:property><con:property><con:name>dataAddTokenExpectedOutcome</con:name><con:value>Active</con:value></con:property><con:property><con:name>dataUpdateRolesExpectedOutcome</con:name><con:value>UPDATED</con:value></con:property><con:property><con:name>dataExistingGroupingExpectedResponse</con:name><con:value>ALREADY_EXISTS</con:value></con:property><con:property><con:name>dataUpdateUserGroupingsExpectedOutcome</con:name><con:value>UPDATED</con:value></con:property><con:property><con:name>dataSaveDataAssetExpectedOutcome</con:name><con:value>UPDATED</con:value></con:property><con:property><con:name>dataState</con:name><con:value>Australian Capital Territory</con:value></con:property><con:property><con:name>dataStateAbbr</con:name><con:value>ACT</con:value></con:property><con:property><con:name>dataStepAfterRevisionRequired</con:name><con:value>nil</con:value></con:property><con:property><con:name>dataRevisionRequired</con:name><con:value>nil</con:value></con:property><con:property><con:name>dataPublicationRemoveCount</con:name><con:value>nil</con:value></con:property><con:property><con:name>dataReinstateCount</con:name><con:value>nil</con:value></con:property><con:property><con:name>abnLookupSearchCriterion</con:name><con:value>lemon</con:value></con:property><con:property><con:name>orgFofmsid</con:name><con:value>66-lemon-15</con:value></con:property><con:property><con:name>dataOrgType</con:name><con:value>Local Government</con:value></con:property><con:property><con:name>dateTime1</con:name><con:value>2019-12-09T03:26:51.99999999+10:30</con:value></con:property><con:property><con:name>dateTime2</con:name><con:value>20191209</con:value></con:property><con:property><con:name>dateTime3</con:name><con:value>201912091526051</con:value></con:property><con:property><con:name>dateTime4</con:name><con:value>2019-12-09</con:value></con:property><con:property><con:name>dataYesterday</con:name><con:value>2019-12-08</con:value></con:property><con:property><con:name>dataToday</con:name><con:value>2019-12-09</con:value></con:property><con:property><con:name>dataTomorrow</con:name><con:value>2019-12-10</con:value></con:property><con:property><con:name>dataLastMonth</con:name><con:value>2019-11-09</con:value></con:property><con:property><con:name>dataLastQuarter</con:name><con:value>2019-08-11</con:value></con:property></con:properties></con:testCase><con:testCase id="a9052b09-1dba-45c2-87c3-7373e678625c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Runner" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="read" id="c81917be-47c0-48c5-8c53-e63c55cca066"><con:settings/><con:config><script>import com.eviware.soapui.support.UISupport
import groovy.swing.SwingBuilder
import java.awt.FlowLayout as FL  
import javax.swing.BoxLayout as BXL
import groovy.sql.Sql 
import java.util.concurrent.TimeUnit
import com.gurutester.*;

//***************************************************
// Instantiate required classes from gurutester
//***************************************************
PropertiesUtil props = new PropertiesUtil();
SystemRelated sr = new SystemRelated();
DatabaseUtilities db = new DatabaseUtilities();

//**************
// Definitions
//**************
	def getSuite=[:],setSuite = [:], test=[:], qcID /*dbProps=[:]*/
	getSuite = props.getMyProperties(testRunner.testCase.testSuite)

//*******************
// SwingBuilder GUI
//*******************
	def s = new SwingBuilder()
	s.setVariable('myDialog-properties',[:])
	def vars = s.variables

	def gui = s.dialog(title:'Test Plan',size:[500,600],modal:true)
	
	{

	// BUILD AS REQUIRED (IF REQURED)
	panel() {
		boxLayout(axis:BXL.Y_AXIS)

		//test identifier
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('TestID')
			textField(id:'testid',"e2esimgui${new java.text.SimpleDateFormat("yyyyMMdd'T'hhmm").format(new Date())}",columns:20)}
		
		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('testEpicCondition')
			testEpicCondition = comboBox(items:["Epic1", "Epic2", "Epic3", "Epic1_Epic2_Epic3"], selectedIndex:0)}

		panel(alignmentX:0f) {
			flowLayout(alignment:FL.LEFT)
			label('QC_Id')
			qcId = comboBox(items:["", "206","207","208","209"], selectedIndex:0)}

		
		panel(alignmentX: 0f) {
			flowLayout(alignment:FL.LEFT)
			button('OK', preferredSize:[80,24],
				actionPerformed:{
					vars.dialogResult = 'OK' 

					dispose() 
					})
			
			button('Cancel', preferredSize:[80,24],
				actionPerformed:{
					vars.dialogResult = 'Cancel' 
					testRunner.cancel( "Stop the testRunner" )
					dispose() })}}}

//**********************
// Apply Test Strategy 
//**********************
	def testInput

	switch(getSuite["propStrategy"]) {
		case "database":
		case "Database":
			setSuite["strategyLogger"] = setSuite["strategyLogger"] + ". Database Test Data source chosen for the Test Strategy"	
			//Read the source and count the number of test cases ****should go in Runner-setup****

			// Get the count
			testCount =  db.getDbTestCaseData("${getSuite["username"]}", "${getSuite["projectName"]}", "${getSuite["propSchema"]}", "count", 666); //if count set the next value doesnt matter
			if (testCount.next()){ setSuite["numberOfRows"] = testCount.getInt("testSetSize") }
			setSuite["numberOfTests"] = setSuite["numberOfRows"]
			setSuite["strategyLogger"] = setSuite["strategyLogger"] + ". The number of tests set to run in ${getSuite["propSchema"]}.TESTCASEDATA of " + "${setSuite["numberOfTests"]}" + " has been stored in readiness for execution"
			
			//Get the test case data for the testCounter (current) row
			testInput =  db.getDbTestCaseData("${getSuite["username"]}", "${getSuite["projectName"]}", "${getSuite["propSchema"]}", "data", getSuite["testCounter"].toInteger()); //if data set need to set the counter 

			
			// Map the QC_Id
			if (testInput.next()){test["QC_Id"] = testInput.getString("ALMTESTID");
			//logging
			setSuite["strategyLogger"] = setSuite["strategyLogger"] + ". Test Case ${testInput.getString("TESTID")} read in."
			}


		break;
	
		case "CSV":
		case "csv":
			
			//Read in the source and count the number of tests
			def f = new File (getSuite["propCsv1"]); List r = f.readLines(); rows = r.size.toInteger()
			testInput = r[getSuite["testCounter"].toInteger()].split(',')
			setSuite["numberOfRows"] = rows.toString()
			setSuite["numberOfTests"] = (rows-1).toString()
			setSuite["strategyLogger"] = "The number of tests in csv file of " + f + " has been stored in readiness for execution"

			// Map the QC_Id			
			test["QC_Id"] = testInput[16]
			

		break;		
		case "GUI":
		case "gui":	

			epicType = UISupport.prompt("Here is a useless prompt but which can be incorporated into your gui workflow if that tickles your fancy","x", "Pick Swing Builder", "Pick me")
			if (epicType == "Pick me"){
				
				log.info "Running Pick me"
				testid = "e2esimgui${new java.text.SimpleDateFormat("yyyyMMdd'T'hhmm").format(new Date())}"; testObjective = "${epicType}"
				setSuite["TestID"]= testid 
				setSuite["TestObjective"]= testObjective
				// DO OTHER STUFF AS PER THE TEST CASE DESIGN

				}

			else if (epicType == "Pick Swing Builder"){
				gui.show()
				
				//set defaults for an external submission
				setSuite["TestID"] = vars.testid.text
				setSuite["testEpicCondition"] = testEpicCondition.getSelectedItem()
				test["testEpicCondition"] = setSuite["testEpicCondition"]
				// DO OTHER STUFF AS PER YOUR TEST CASE DESIGN
				setSuite["QC_Id"]= qcId.getSelectedItem() //for swingbuilder gui set the qc_id to the value in the test suite
				
				testObjective = "Verify ${testEpicCondition.getSelectedItem()} and here is a blurb for your reading pleasure"
				setSuite["TestObjective"] = testObjective
			
				}

			else {
				// DO SOMETHING ELSE
				}
		
		break;} 
		

//**********************************************
// PLACEHOLDER 

// Set other required epic conditions if required
//	eg to drive which tests are executed
//	and how those tests setup steps and data
//***********************************************


//******************************************
// Map data source to properties
//	Separate switch to the above
//	given the database/csv common
//	logic
//
// 	Use for other common csv/databse logic
//	as required
//******************************************

	// MODIFY MAPPING DESIGN AS PER YOUR NEED
	if ((getSuite["propStrategy"] =="csv") || (getSuite["propStrategy"]=="CSV")){

		test["TestID"] = testInput[0]; test["TestObjective"] = testInput[1]; test["testEpicCondition"] = testInput[2]; test["testAssetAttachmentType"] = testInput[3]
		test["testAssetChangeType"] = testInput[4];	test["testAssetType"] = testInput[5]
		test["testAssetAction1"] = testInput[6]; test["testAssetAction2"] = testInput[7]; test["testAssetAction3"] = testInput[8];test["testAssetAction4"] = testInput[9]; test["testAssetAction5"] = testInput[10]; test["testAssetAction6"] = testInput[11]
		test["testRoles"] = testInput[12]; test["testGroupings"] = testInput[13]; test["testGroupAction"] = testInput[14]; ; test["testOrg"] = testInput[15]
		test["testOrgEpic"] = testInput[15];
	}

	else if ((getSuite["propStrategy"] =="database") || (getSuite["propStrategy"]=="Database")){
		log.info "DB INPUT CHECKS: ${getSuite["username"]} ${getSuite["projectName"]} ${getSuite["propSchema"]} data ${getSuite["testCounter"].toInteger()}"
		testData =  db.getDbTestCaseData("${getSuite["username"]}", "${getSuite["projectName"]}", "${getSuite["propSchema"]}", "data", getSuite["testCounter"].toInteger()); //if data set need to set the counter 
		if (testData.next()){
	    	test["TestID"] = testInput.getString("TESTID"); 
		test["TestObjective"] = testInput.getString("TESTOBJECTIVE"); 
		test["testEpicCondition"] = testInput.getString("MISC1"); 
		test["testAssetAttachmentType"] = testInput.getString("APPLICATION");
		test["testAssetChangeType"] = testInput.getString("TESTCONDITION1");	
		test["testAssetType"] = testInput.getString("TESTCONDITION2");	
		test["testAssetAction1"] = testInput.getString("TESTCONDITION3");	
		test["testAssetAction2"] = testInput.getString("TESTCONDITION4");	
		test["testAssetAction3"] = testInput.getString("TESTCONDITION5");	
		test["testAssetAction4"] = testInput.getString("TESTCONDITION6");	
		test["testAssetAction5"] = testInput.getString("TESTCONDITION7");	
		test["testAssetAction6"] = testInput.getString("TESTCONDITION8");	
		test["testRoles"] = testInput.getString("TESTCONDITION9");	
		test["testGroupings"] = testInput.getString("TESTCONDITION10");	
		test["testGroupAction"] = testInput.getString("TESTCONDITION11");	
		test["testOrg"] = testInput.getString("TESTCONDITION12");	
		test["testOrgEpic"] = testInput.getString("TESTCONDITION12");	
		
		}

	}
	 	
	// ***is this needed??**
	else {test["TestID"] = setSuite["TestID"] ; test["TestObjective"] = setSuite["TestObjective"] /*; test["Application"] = getSuite["Application"]*/
	//log.info " HERE?? "
	}

//**********************************************************************************************
// Set ALM Test Case Credentials
//	Design use QC_Id but for multi-segment with Org and User components the following are 
//	constants which always apply and which are enabled as per that segment test case 
//
//**********************************************************************************************

	// Set the QC Id constants
	setSuite["QC_Id_Epic1"] = "206"
	setSuite["QC_Id_Epic2"] = "207"
	setSuite["QC_Id_Epic3"] = "208"
	setSuite["QC_Id_Epic1_Epic2_Epic3"] = "209"


//***********************************************************************
// Test Case setup
//	Using test[testEpicCondition] to set the test cases for running
//	Setting a default which runs Org User and Asset (ie as per previous versions)
//	Ensures GUI will run without need to incorporate these data conditions
//	in the Gui logic.
// 	Logic is customised and reliant on hardcoded values
//************************************************************************
// THIS SECTION IS NOW REDUNDANT AS THE LOGIC IS APLIED IN RUN


	// Epic 1 only
	if (test["testEpicCondition"] =="Epic1") {
		
		setSuite["propTestCase1"] = "Epic1"
		setSuite["propTestCase2"] = setSuite["propTestCase3"] = ""
		}

	// Epic 2 only
	if (test["testEpicCondition"] =="Epic2") {
		setSuite["propTestCase1"] = "Epic2"
		setSuite["propTestCase2"] = setSuite["propTestCase3"] = ""
		}
	
	// Epic 3 only
	if (test["testEpicCondition"] =="Epic3") {
		setSuite["propTestCase1"] = "Epic3"
		setSuite["propTestCase2"] = setSuite["propTestCase3"] = ""
		}
	
	// Epics 1 2 and 3
	if (test["testEpicCondition"] =="Epic1_Epic2_Epic3") {
		setSuite["propTestCase1"] = "Epic1"
		setSuite["propTestCase2"] = "Epic2"
		setSuite["propTestCase3"] = "Epic3"
		}

	// Runner with Org, User, Asset (B2G Asset Submissions)
	if (test["testEpicCondition"] =="Epic1_Epic2_Epic3") {
		setSuite["propTestCase1"] = "Epic1"
		setSuite["propTestCase2"] = "Epic2"
		setSuite["propTestCase3"] = "Epic3"	}

	
//******************
// Logging update
//******************
	test["currentTest"] = "ID: " + test["TestID"] + " " + "Objective: " + test["TestObjective"] 
	test["002_read"] = test["currentTest"] + " has been loaded"
	log.info test["002_read"] 

//******************************************************
// Save Data to Test Case Properties and update logging
//******************************************************
	setSuite["propsLogger"] = "Properties in ${getSuite["propEnvironment"]} and system related are loaded, user:${getSuite["username"]}, host:${getSuite["hostname"]}, home:${getSuite["userHomeFolder"]} were loaded into SoapUI Properties"
	setSuite["000_TESTSTRATEGY"] = setSuite["strategyLogger"] + ", " + setSuite["propsLogger"]; log.info setSuite["propsLogger"]
	setSuite["otherSimDataLogger"] = "Data from User Simulator sourced and set"; setSuite["000_TESTSTRATEGY"]= setSuite["strategyLogger"] + ", " + setSuite["propsLogger"] + ", " + setSuite["otherSimDataLogger"]

	props.saveToProperties(testRunner.testCase.testSuite, test)
	props.saveToProperties(testRunner.testCase.testSuite, setSuite) // or saveToPropertiesLocal(testCase.testSuite, setSuite) to use the local version

log.info "Runner-read step completed"
</script></con:config></con:testStep><con:testStep type="groovy" name="run" id="ac4cc33d-a3eb-4b12-a0cb-5263e1c27870"><con:settings/><con:config><script>import java.util.concurrent.TimeUnit
import com.gurutester.*;

//***************************************************
// Instantiate required classes from gurutester
//***************************************************
	PropertiesUtil props = new PropertiesUtil();

//**************
// Definitions
//**************
	def getSuite=[:]//,setSuite = [:], test=[:], qcID /*dbProps=[:]*/
	
//*********************************
// Setup the Test Case for Running 
//*********************************

	getSuite = props.getMyProperties(testRunner.testCase.testSuite)

//*****************
// Run the Tests
//*****************

	// MODIFY LOGIC AS REQURED
	switch(getSuite["testEpicCondition"]) {
		case "Epic1":
			log.info "running Epic1"
			(testRunner.testCase.testSuite.getTestCaseByName("Epic1")).run( null,true);
			TimeUnit.SECONDS.sleep(90)
		break;
		case "Epic2":
			log.info "running Epic2"
			(testRunner.testCase.testSuite.getTestCaseByName("Epic2")).run( null,true);
			TimeUnit.SECONDS.sleep(90)
		break;
		case "Epic3":
			log.info "running Epic3"
			(testRunner.testCase.testSuite.getTestCaseByName("Epic3")).run( null,true);
			TimeUnit.SECONDS.sleep(90)
		break;
		case "Epic1_Epic2_Epic3":
			log.info running "Epic1,2 and 3"
			(testRunner.testCase.testSuite.getTestCaseByName("Epic1")).run( null,true);
			TimeUnit.SECONDS.sleep(90);
			(testRunner.testCase.testSuite.getTestCaseByName("Epic2")).run( null,true);
			TimeUnit.SECONDS.sleep(60)
			(testRunner.testCase.testSuite.getTestCaseByName("Epic3")).run( null,true);
			TimeUnit.SECONDS.sleep(10)
		
		break;
	}

//PUT Customisations here if needed (such as delays or other settings)



log.info "Runner-run-${testRunner.testCase.testSuite.project.getName()} step completed"			</script></con:config></con:testStep><con:testStep type="groovy" name="loop" id="37481016-1f06-415d-8abf-282a8f52a99a"><con:settings/><con:config><script>//*************************
// Get Counts
//*************************
	def propStrategy = testRunner.testCase.testSuite.getPropertyValue("propStrategy")
	def numberOfRows, numberOfTests, testCounter, nextTestCounter, testID, testObjective

	testID = testRunner.testCase.testSuite.getPropertyValue("TestID")
	testObjective = testRunner.testCase.testSuite.getPropertyValue("TestObjective")



//*************************
// Report on test completed
//*************************
	def stepLogger = "Test " + "${testID}" + " " + "${testObjective}" + " was completed"
	log.info stepLogger



//**************************
// Apply Counter logic
//************************** 
switch(propStrategy) {
	case "GUI":
	case "gui":
		testRunner.testCase.testSuite.setPropertyValue("Stop", "T")
	break;
	
	case "database":
	case "Database":
	case "csv":
	case "CSV":	
		numberOfRows = testRunner.testCase.testSuite.getPropertyValue("numberOfRows").toInteger()
		numberOfTests = testRunner.testCase.testSuite.getPropertyValue("numberOfTests").toInteger()
		testCounter = testRunner.testCase.testSuite.getPropertyValue("testCounter").toInteger()
		nextTestCounter = testRunner.testCase.testSuite.getPropertyValue("nextTestCounter").toInteger()

		testCounter = testCounter + 1
		nextTestCounter = nextTestCounter + 1
		testRunner.testCase.testSuite.setPropertyValue("testCounter", testCounter.toString())
		testRunner.testCase.testSuite.setPropertyValue("nextTestCounter", nextTestCounter.toString())

	// check if at the end of the test list
	if (testCounter > numberOfTests) {
		testRunner.testCase.testSuite.setPropertyValue("Stop", "T")
		log.info "Bulk Test Run completed"
		//no loop
		assert true}
	else {
		testRunner.testCase.testSuite.setPropertyValue("Stop", "F")
		//need to continue the loop
		log.info "Going to the next test"
		sleep(5000) //temp delay to see logic
		testRunner.gotoStepByName("read")}
	break;
}

log.info "Runnner-loop step completed"

</script></con:config></con:testStep><con:setupScript>import com.eviware.soapui.support.UISupport
import java.util.concurrent.TimeUnit
import com.gurutester.*;

//***************************************************
// Instantiate required classes from gurutester
//***************************************************
PropertiesUtil props = new PropertiesUtil();
SystemRelated sr = new SystemRelated();
DatabaseUtilities db = new DatabaseUtilities();

//*********************
// Property Map defs
//*********************
	def getSuite=[:], getProj=[:], setTest = [:], setSuite = [:], setProj=[:], dbProps=[:], fileProps=[:]
	
//***************************************
// Clear properties and enable all steps
//  enabled here instead of teardown because sometimes when the simulator
//	run takes longer than expected the runner will clear properties before logging results
//***************************************

	//props.removeProperties(testCase.testSuite); 
	//props.removeProperties(testRunner.testCase);


//***************************************
// Initialisations
//	Now looking for the test suite name in the the properties name
//***************************************
	//getProj = props.getMyProperties(testRunner.testCase.testSuite.project)
	getProj = props.getMyProperties(testRunner.testCase.testSuite)  //modified to run via test suite
	/*setSuite["propEnvironment"] = "DEV";*/
	setSuite["propEnvironment"] = getProj["projectEnvironment"]
	setSuite["projectName"] = testRunner.testCase.testSuite.project.name  
	setSuite["projectLocation"]=getProj["projectLocation"]
	setSuite["propsLocation"] = "${getProj["projectLocation"]}\\bin\\${setSuite["projectName"]}_${testCase.testSuite.getName()}.properties"; 

	if (setSuite["propEnvironment"]=="MOCK") {setSuite["propMock"]="on"} else {setSuite["propMock"]="off"}

//********************
// Get Properties file
//********************
	props.readFile("${setSuite["propsLocation"]}", testRunner.testCase.testSuite)
	
	// Save to hash map
	fileProps = props.getMyProperties(testRunner.testCase.testSuite)
	setSuite["strategyLogger"] = "${fileProps["propStrategy"]} Strategy chosen"

//***********************************************
// Initialisations for properties not set in file
//***********************************************
	if (fileProps["propStartInMinutes"]==null){setSuite["propStartInMinutes"]="0"; TimeUnit.MINUTES.sleep(setSuite["propStartInMinutes"].toInteger())}; else {TimeUnit.MINUTES.sleep(fileProps["propStartInMinutes"].toInteger())}
	if (fileProps["propProperties"]==null) {setSuite["propProperties"]= "db"} 
	if (fileProps["propJdbcSteps"]==null) {setSuite["propJdbcSteps"]= "off"}
	if (fileProps["propKeepData"]==null) {setSuite["propKeepData"]= "false"}	

//*********************************************
// Get Properties and Test Environment from DB  
//*********************************************
	log.info "Using schema: ${fileProps["propSchema"]}"
	res = db.getDbTestProperties("${fileProps["propStrategy"].toString()}", "${setSuite["propEnvironment"].toString()}", "${setSuite["projectName"].toString()}", "${fileProps["propSchema"]}");

//**********************************************************
// Override above property settings based on propProperties
//**********************************************************
	//if local, use the library settings stored in the file
	if (fileProps["propProperties"] == "local") {} //nothing to do
	
	//if set to db, get everything stored in db
	if (setSuite["propProperties"] == 'db') {
		dbProps["propPropertiesLABEL"]='db'
		log.info "DB INPUT CHECKS: ${fileProps["propStrategy"].toString()} ${setSuite["propEnvironment"].toString()} ${setSuite["projectName"].toString()} ${fileProps["propSchema"]}"
		res = db.getDbTestProperties("${fileProps["propStrategy"].toString()}", "${setSuite["propEnvironment"].toString()}", "${setSuite["projectName"].toString()}", "${fileProps["propSchema"]}");
log.info res
		if (res.next()){ 

		// MAPPING IS BASED ON CURRENT PROJECTS RUNNING THE FRAMEWORK
		dbProps["propMock"] = res.getString(2);
		dbProps["propCore"] = res.getString(4);
		dbProps["propScript"] = res.getString(5);
		dbProps["propEndpoint1"] = res.getString(7);
		dbProps["propEndpoint2"] = res.getString(8);
		dbProps["propEndpoint3"] = res.getString(9);
		dbProps["propEndpoint4"] = res.getString(10)
		dbProps["propEndpoint5"] = res.getString(11);
		dbProps["propAdminUser1"] = res.getString(13);
		dbProps["propAdminUser2"] = res.getString(14);
		dbProps["propsLabel"] = res.getString(15);
		dbProps["propAdminUser3"] = res.getString(18);
		dbProps["propIntUser1"] = res.getString(19);
		dbProps["propIntUser2"] = res.getString(20);
		dbProps["propIntUser3"] = res.getString(21);
		dbProps["propIntUser4"] = res.getString(22);
		dbProps["propALMUser"] = res.getString(23);
		dbProps["propALMPw"] = res.getString(24);
		dbProps["propALMDragonflyPlugin"] = res.getString(25); 
		dbProps["propALMURL"] = res.getString(26);
		dbProps["propALMDomain"] = res.getString(27);
		dbProps["propALMProject"] = res.getString(28);
		dbProps["propALMTestPlanDirectory"] = res.getString(29);
		dbProps["propALMTestLabDirectory"] = res.getString(30);
		dbProps["propALMProjectPath"] = res.getString(31);
		dbProps["propALMSoapUIPath"] = res.getString(32);
		dbProps["propALMOverrideTestRuns"] = res.getString(33);

     	}
		
		// redundant (old logic for calling soapui based library) - leave for now
		setSuite["propCore"]=dbProps["propCore"]; setSuite["propScript"]=dbProps["propScript"]
		props.saveToProperties(testRunner.testCase.testSuite, dbProps)
		} 

	
//*****************************************************************
// Apply ALM / DragonFly Project Integration if set in properties
//*****************************************************************
	if (dbProps["propALMDragonflyPlugin"]== 'enabled') {   //optimise as required (eg include include checks on the test environment and strategy 
			// set project properties as required by DragonFly   
						
			setProj["QC_URL"]= dbProps["propALMURL"];
			setProj["QC_Domain"]= dbProps["propALMDomain"];
			setProj["QC_Project"]= dbProps["propALMProject"];
			setProj["QC_TestPlanDirectory"]= dbProps["propALMTestPlanDirectory"];
			setProj["QC_TestLabDirectory"]= dbProps["propALMTestLabDirectory"];
			setProj["QC_ProjectPath"]= dbProps["propALMProjectPath"]
			setProj["QC_soapUIPath"]= dbProps["propALMSoapUIPath"];
			setProj["QC_Dragonfly_Plugin"]= dbProps["propALMDragonflyPlugin"];
			setProj["QC_Override_Test_Runs"]= dbProps["propALMOverrideTestRuns"]
			setProj["LABEL"] = "dragonfly enabled for Runner"
			
			if (fileProps["propALMUser"]!=null) {setProj["QC_user"] = fileProps["propALMUser"]}; else {setProj["QC_user"] = dbProps["propALMUser"]}
			if (fileProps["propALMPw"]!=null) {setProj["QC_password"] = fileProps["propALMPw"]}; else {setProj["QC_password"] = dbProps["propALMPw"]}			
			
			// Prompt for a password ***FIX LOGIC IN FUTURE**
			if ((getProj["QC_password"] == "")||(getProj["QC_password"] ==null)||(getProj["QC_password"] =="null")||(getProj["QC_password"] ==" ")) {}
			}
	else {setProj["QC_URL"]= setProj["QC_Domain"]= setProj["QC_Project"]= setProj["QC_user"]= setProj["QC_password"] ="N/A"; setProj["QC_Dragonfly_Plugin"]="disabled"
		setProj["LABEL"] = "dragonfly disabled from Runner"}


//***********************************************
// Initialisations for properties set in file and db 
// (file overrides)
//***********************************************
	// File and DB properties already loaded and all of the following could exist in both, hence set to the file ones
	if (fileProps["propALMUser"]!=null) {setProj["QC_user"] = fileProps["propALMUser"]}; else {setProj["QC_user"] = dbProps["propALMUser"]}


//**************************************
// Use Library to set environment stuff
//**************************************
	setSuite["username"] = sr.username
	setSuite["userHomeFolder"] = sr.userHomeFolder
	setSuite["hostname"] = sr.hostname


//*******************************************
// Define ALM Test Set, QC_ID, and QC_Upload
//*******************************************	
	setSuite["QC_TestSet"] = "${setSuite["propEnvironment"]}"

	//Force the disablement of Dragonfly setup for test cases here (enable for simulator test cases through test suite props)
	setTest["QC_Id"]=""; setTest["QC_Upload"]="disabled"; setTest["QC_Req_Ids"]=""; setTest["QC_Req_Recursive"]=""; setTest["QC_Mapped_Test_Id"]="" //Disable Runner to ALM
	setSuite["QC_Id"]=""; setSuite["QC_Upload"]="enabled"; setSuite["QC_Req_Ids"]=""; setSuite["QC_Req_Recursive"]=""; setSuite["QC_Mapped_Test_Id"]="" //For Test Case to ALM (when getting testSuite props)

//*************************
// initialise the counters
//*************************
// MDR TEST 11/2
setSuite["Stop"] = "F";	setSuite["testCounter"]= "1"; setSuite["nextTestCounter"]= "2";



// Using this as a dummy service instead of having a proper one for DEV, SIT, etc (to keep the template independent from any project)
testRunner.testCase.testSuite.project.getMockServiceByName("LocalMockService").start() //start the mock service


//***************
// Logging &amp; Save
//***************
	props.saveToProperties(testRunner.testCase, setTest)	
	props.saveToProperties(testRunner.testCase.testSuite, setSuite)
	props.saveToProperties(testRunner.testCase.testSuite, fileProps)
	props.saveToProperties(testRunner.testCase.testSuite.project, setProj)
	log.info "Runner-Setup-${setSuite["projectName"]} completed for ${fileProps["propStrategy"]} data driven into environment ${setSuite["propEnvironment"]}"

</con:setupScript><con:tearDownScript>import com.gurutester.*;
PropertiesUtil props = new PropertiesUtil();

props.removeProperties(testCase.testSuite); 


// turn mocking off if on
/*
def mockStatus = testRunner.testCase.getPropertyValue("propMock")
if (mockStatus == "on") {
	testRunner.testCase.testSuite.project.getMockServiceByName("LocalhostMock").getMockRunner().stop()
	}
*/

// Using this as a dummy service instead of having a proper one for DEV, SIT, etc (to keep the template independent from any project)
testRunner.testCase.testSuite.project.getMockServiceByName("MockService").getMockRunner().stop() //start the mock service
</con:tearDownScript><con:properties><con:property><con:name>QC_Id</con:name><con:value/></con:property><con:property><con:name>QC_Upload</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_Req_Ids</con:name><con:value/></con:property><con:property><con:name>QC_Req_Recursive</con:name><con:value/></con:property><con:property><con:name>QC_Mapped_Test_Id</con:name><con:value/></con:property></con:properties></con:testCase><con:properties><con:property><con:name>projectEnvironment</con:name><con:value>DEV</con:value></con:property><con:property><con:name>projectEnvironmentDB</con:name><con:value>dev</con:value></con:property><con:property><con:name>projectLocation</con:name><con:value>U:\Documents\soapui\projects\concepts</con:value></con:property><con:property><con:name>propDBAutoUser</con:name><con:value>test</con:value></con:property><con:property><con:name>propDBAutoPwd</con:name><con:value>password</con:value></con:property><con:property><con:name>propCsv1</con:name><con:value>u:\Documents\soapui\projects\concepts\data\buildVerification.csv</con:value></con:property><con:property><con:name>propDBInTest</con:name><con:value>jdbc:oracle:thin:someuser/somepassword@someserver:1521/${#Project#projectEnvironmentDB}12c02</con:value></con:property><con:property><con:name>propStrategy</con:name><con:value>csv</con:value></con:property><con:property><con:name>propSchema</con:name><con:value>testingservices</con:value></con:property><con:property><con:name>propDriver</con:name><con:value>com.mysql.jdbc.Driver</con:value></con:property><con:property><con:name>propDBConnection</con:name><con:value>jdbc:mysql://10.11.21.128:3306/testingservices</con:value></con:property><con:property><con:name>propPropertiesLABEL</con:name><con:value>db</con:value></con:property><con:property><con:name>propMock</con:name><con:value>off</con:value></con:property><con:property><con:name>propCore</con:name><con:value>spare</con:value></con:property><con:property><con:name>propScript</con:name><con:value>spare</con:value></con:property><con:property><con:name>propEndpoint1</con:name><con:value>http://localhost:591</con:value></con:property><con:property><con:name>propEndpoint2</con:name><con:value>http://localhost:591</con:value></con:property><con:property><con:name>propEndpoint3</con:name><con:value>not required</con:value></con:property><con:property><con:name>propEndpoint4</con:name><con:value>not required</con:value></con:property><con:property><con:name>propEndpoint5</con:name><con:value>not required</con:value></con:property><con:property><con:name>propAdminUser1</con:name><con:value>not required</con:value></con:property><con:property><con:name>propAdminUser2</con:name><con:value>not required</con:value></con:property><con:property><con:name>propsLabel</con:name><con:value>CONCEPTS db in DEV</con:value></con:property><con:property><con:name>propAdminUser3</con:name><con:value>not required</con:value></con:property><con:property><con:name>propIntUser1</con:name><con:value>not required</con:value></con:property><con:property><con:name>propIntUser2</con:name><con:value>not required</con:value></con:property><con:property><con:name>propIntUser3</con:name><con:value>not required</con:value></con:property><con:property><con:name>propIntUser4</con:name><con:value>not required</con:value></con:property><con:property><con:name>propALMUser</con:name><con:value>autotest02</con:value></con:property><con:property><con:name>propALMPw</con:name><con:value>Password123</con:value></con:property><con:property><con:name>propALMDragonflyPlugin</con:name><con:value>disabled</con:value></con:property><con:property><con:name>propALMURL</con:name><con:value>http://cwalma01.acceptance.health:8080/qcbin</con:value></con:property><con:property><con:name>propALMDomain</con:name><con:value>TESTINGSERVICES</con:value></con:property><con:property><con:name>propALMProject</con:name><con:value>ATC</con:value></con:property><con:property><con:name>propALMTestPlanDirectory</con:name><con:value>Subject\concepts</con:value></con:property><con:property><con:name>propALMTestLabDirectory</con:name><con:value>Root\concepts\regression</con:value></con:property><con:property><con:name>propALMProjectPath</con:name><con:value>to do</con:value></con:property><con:property><con:name>propALMSoapUIPath</con:name><con:value>C:\Program Files\SmartBear\SoapUI-5.2.1\bin\testrunner.bat</con:value></con:property><con:property><con:name>propALMOverrideTestRuns</con:name><con:value>enabled</con:value></con:property><con:property><con:name>propEnvironment</con:name><con:value>DEV</con:value></con:property><con:property><con:name>projectName</con:name><con:value>concepts</con:value></con:property><con:property><con:name>propsLocation</con:name><con:value>U:\Documents\soapui\projects\concepts\bin\concepts_AUTOTEST_01.properties</con:value></con:property><con:property><con:name>strategyLogger</con:name><con:value>The number of tests in csv file of u:\Documents\soapui\projects\concepts\data\buildVerification.csv has been stored in readiness for execution</con:value></con:property><con:property><con:name>propStartInMinutes</con:name><con:value>0</con:value></con:property><con:property><con:name>propProperties</con:name><con:value>db</con:value></con:property><con:property><con:name>propJdbcSteps</con:name><con:value>off</con:value></con:property><con:property><con:name>propKeepData</con:name><con:value>false</con:value></con:property><con:property><con:name>username</con:name><con:value>a_derobm</con:value></con:property><con:property><con:name>userHomeFolder</con:name><con:value>C:\Users\a_derobm</con:value></con:property><con:property><con:name>hostname</con:name><con:value>CW2K16TS01</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>DEV</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>206</con:value></con:property><con:property><con:name>QC_Upload</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_Req_Ids</con:name><con:value/></con:property><con:property><con:name>QC_Req_Recursive</con:name><con:value/></con:property><con:property><con:name>QC_Mapped_Test_Id</con:name><con:value/></con:property><con:property><con:name>Stop</con:name><con:value>F</con:value></con:property><con:property><con:name>testCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>nextTestCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TestID</con:name><con:value>e2esimcsv_bv_concept_test_01</con:value></con:property><con:property><con:name>TestObjective</con:name><con:value>Template Test Case 01</con:value></con:property><con:property><con:name>testEpicCondition</con:name><con:value>Epic1</con:value></con:property><con:property><con:name>testAssetAttachmentType</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetChangeType</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetType</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetAction1</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetAction2</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetAction3</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetAction4</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetAction5</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testAssetAction6</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testRoles</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testGroupings</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testGroupAction</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testOrg</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>testOrgEpic</con:name><con:value>dummyDataCsv</con:value></con:property><con:property><con:name>currentTest</con:name><con:value>ID: e2esimcsv_bv_concept_test_01 Objective: Template Test Case 01</con:value></con:property><con:property><con:name>002_read</con:name><con:value>ID: e2esimcsv_bv_concept_test_01 Objective: Template Test Case 01 has been loaded</con:value></con:property><con:property><con:name>numberOfRows</con:name><con:value>2</con:value></con:property><con:property><con:name>numberOfTests</con:name><con:value>1</con:value></con:property><con:property><con:name>QC_Id_Epic1</con:name><con:value>206</con:value></con:property><con:property><con:name>QC_Id_Epic2</con:name><con:value>207</con:value></con:property><con:property><con:name>QC_Id_Epic3</con:name><con:value>208</con:value></con:property><con:property><con:name>QC_Id_Epic1_Epic2_Epic3</con:name><con:value>209</con:value></con:property><con:property><con:name>propTestCase1</con:name><con:value>Epic1</con:value></con:property><con:property><con:name>propTestCase3</con:name><con:value/></con:property><con:property><con:name>propTestCase2</con:name><con:value/></con:property><con:property><con:name>propsLogger</con:name><con:value>Properties in DEV and system related are loaded, user:a_derobm, host:CW2K16TS01, home:C:\Users\a_derobm were loaded into SoapUI Properties</con:value></con:property><con:property><con:name>000_TESTSTRATEGY</con:name><con:value>The number of tests in csv file of u:\Documents\soapui\projects\concepts\data\buildVerification.csv has been stored in readiness for execution, Properties in DEV and system related are loaded, user:a_derobm, host:CW2K16TS01, home:C:\Users\a_derobm were loaded into SoapUI Properties, Data from User Simulator sourced and set</con:value></con:property><con:property><con:name>otherSimDataLogger</con:name><con:value>Data from User Simulator sourced and set</con:value></con:property></con:properties><con:setupScript>import com.eviware.soapui.support.UISupport

def userHomeFolder = System.getProperty("user.home")
def projectLocation = testSuite.getPropertyValue("projectLocation")
def projectEnvironmentExists = testSuite.getPropertyValue("projectTestEnvironment")

String testEnvironment = UISupport.getDialogs().prompt("${testSuite.getName()}", "Set the environment where you are testing", 'MOCK', 'DEV', 'SIT')
testSuite.setPropertyValue("projectEnvironment", testEnvironment.toString()) 

if (testEnvironment.toString()=='SIT'){testSuite.setPropertyValue("projectEnvironmentDB", 'tst') }
else if (testEnvironment.toString()=='DEV'){testSuite.setPropertyValue("projectEnvironmentDB", 'dev') }
else {testSuite.setPropertyValue("projectEnvironmentDB", '') }
//if (projectEnvironment=="MOCK") {propMock="on"; project.setPropertyValue("projectMock", "${propMock}") }


// Set the workspace path if does not exist
//if ((projectLocation == "")||(projectLocation ==null)||(projectLocation =="null")) {
projectLocation = UISupport.getDialogs().prompt("${testSuite.project.getName()}", "Set the path where your SoapUI Project is located","U:\\Documents\\soapui\\projects\\${testSuite.project.name}")
testSuite.setPropertyValue("projectLocation", "${projectLocation}") 

//}</con:setupScript><con:tearDownScript>
import com.gurutester.*;
PropertiesUtil props = new PropertiesUtil();
props.removeProperties(testSuite)

</con:tearDownScript></con:testSuite><con:testSuite id="1c04202a-365c-49b5-b88d-3bf0665dee3f" name="Response Handling"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b34cd4f6-d819-44df-897c-46d0a8594d61" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="XPath" searchProperties="true"><con:settings/><con:testStep type="groovy" name="get value at input row 2" id="011afd29-3338-421f-a34f-66c5ddce367e"><con:settings/><con:config><script>/*

&lt;/h1>
	&lt;form>
		&lt;input value="200"
		&lt;input value="123"
		&lt;input value="444"
*/


import com.eviware.soapui.support.XmlHolder     //run the soapui method to get xml responses
def holder = new XmlHolder (messageExchange.responseContentAsXml)     //hold the response in variable holder
for (item in holder.getNodeValues("//form/*:input[2]/@value"))    //store the second input row in variable item

//and if you needed a random row then apply the above function instead of hardcoding to get row 2
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a2cc2009-88b5-42bb-b98b-9593bfd4b6c0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Json" searchProperties="true"><con:settings/><con:testStep type="groovy" name="read response" id="264443e8-416a-4251-a721-8ac90c6f3fb1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper

def response = context.expand( '${TEST STEP NAME#Response}' ).toString()
log.info(response)

def slurper = new JsonSlurper()
def json = slurper.parseText response

log.info(json.firstName)  //WHERE firstName exists in the response
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="55946181-5371-4ed0-baf7-02a6e7f58460" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="XmlHolder" searchProperties="true"><con:settings/><con:testStep type="groovy" name="define holders and variable to store required elements" id="fcc6b40c-ac73-455e-80e5-607050168f89"><con:settings/><con:config><script>// Define holders and variables to store required elements
def holder = new XmlHolder (messageExchange.responseContentAsXml)

def statusCount = holder["count(//NAME)"]
def status = holder.getNodeValues("//NAME").toString()
def rrId = holder.getNodeValues("//REPORTING_ROUND_ID").toString()
def rrRefId = holder.getNodeValues("//REPORTING_ROUND_REF_ID").toString()
def folderId = holder.getNodeValues("//FOLDER_LKUP_ID").toString()
def revisionNumber = holder.getNodeValues("//REVISION_NUMBER").toString()
def ih_lkup_id = holder.getNodeValues("//INDIGENOUSHEALTH_LKUP_ID").toString()

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="477cb905-e681-4cfe-b1a5-0fd2e9bab9db" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Loop and process" searchProperties="true"><con:settings/><con:testStep type="groovy" name="loop" id="fa9a4f4e-07ee-4ed6-a120-c7b3c53e0a09"><con:settings/><con:config><script>// Logic for looping through rows for a specific value

def holder = new XmlHolder (messageExchange.responseContentAsXml)
def statusCount = holder["count(//NAME)"]
def lookingFor = "ABC"

for (int i = 0; i &lt; statusCount.toInteger(); i++){
	
	// removing opening and closing square brackets to check if statusList[i] = ABC
	if (lookingFor.contains(statusList[i].toString().replaceAll("\\[","").replaceAll("\\]","").replaceAll("\\,","")))
		{

		// do something
				
		}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="084d0460-d933-4403-b41c-d735ccddc7e0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get record" searchProperties="true"><con:settings/><con:testStep type="groovy" name="jdbc response random row number between 1 and max row number" id="ce2602e3-7a3b-47ab-9bce-966c75daa70c"><con:settings/><con:config><script>import java.util.concurrent.TimeUnit
import com.eviware.soapui.support.XmlHolder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder(messageExchange.responseContentAsXml)
def resultsCount = holder.getNodeValues("//Row").size()

Random random = new Random()

ranNum = (random.nextInt(resultsCount-1)+1).toString()

x = holder.getNodeValues("//Row[${ranNum}]/USER_ID").toString()
x = x.getAt(1..x.length() - 1); 
userId = x.substring(0, x.length() - 1)

context.testCase.setPropertyValue("randomUserId", userId)
</script></con:config></con:testStep><con:testStep type="groovy" name="cdata soap response" id="df1782a9-a0fd-4d25-9c33-cb14fadd5289"><con:settings/><con:config><script>// Set variables for test case and step controls from other suites

	def project = context.testCase.testSuite.project;
	def testSuite = project.getTestSuiteByName('TEST')
	def assetSimulator = testSuite.getTestCaseByName('AssetSimulator')

// Hold the response
def response = context.response

//Closure to parse and extract the data
def getData = { data, element ->
  def pXml = new XmlSlurper().parseText(data)
  def codes = pXml.'**'.findAll { it.name() == element}  
}

// Get the cdata part
def cdata1 = getData(response, 'extaccountId')[1] as String
def userId = getData(response, 'extaccountId')[0] as String
context.testCase.testSuite.setPropertyValue("existingUserGuid", cdata1)
context.testCase.setPropertyValue("existingUserGuid", cdata1)
testSuite.setPropertyValue("existingUserGuid", cdata1)
assetSimulator.setPropertyValue("existingUserGuid", cdata1)

context.testCase.testSuite.setPropertyValue("existingUserId", userId)
context.testCase.setPropertyValue("existingUserId", userId)
testSuite.setPropertyValue("existingUserId", userId)
assetSimulator.setPropertyValue("existingUserId", userId)

log.info cdata1</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:mockService id="8464b271-4ddf-49e1-a641-5d38f88f0d0e" port="591" path="/" host="localhost" name="LocalMockService" bindToHostOnly="false" docroot=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockService@require-soap-action">false</con:setting></con:settings><con:properties/><con:mockOperation name="SubmitDummyData" id="e01088c9-6ee1-4cf3-b80b-e8bcaaab479d" interface="MDRDataServiceSoap" operation="SubmitDummyData"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:response name="Response 1" id="6fe2ec2c-10c8-48ad-b77c-6cacea316363" httpResponseStatus="200" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:imp="http://improve.org.au/" xmlns:urn="urn:improve-org-au:xsd">
   <soapenv:Header/>
   <soapenv:Body>
      <imp:SubmitDummyDataResponse>
         <urn:SubmitDummyDataResult>
         	<result1>happyDays1</result1>
         	<result2>happyDays2</result2>
         </urn:SubmitDummyDataResult>
      </imp:SubmitDummyDataResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://improve.org.au/SubmitDummyData"/></con:response><con:dispatchConfig/></con:mockOperation></con:mockService><con:properties><con:property><con:name>projectLocation</con:name><con:value>U:\Documents\soapui\projects\concepts</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>N/A</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>autotest02</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>N/A</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>N/A</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>N/A</con:value></con:property><con:property><con:name>QC_Dragonfly_Plugin</con:name><con:value>disabled</con:value></con:property><con:property><con:name>LABEL</con:name><con:value>dragonfly disabled from Runner</con:value></con:property></con:properties><con:afterLoadScript>/*
import com.gurutester.*;

//************************************
// remove all properties
//************************************
PropertiesUtil props = new PropertiesUtil();
props.removeProperties(project)

*/

/*
String[] propToRemove = new String[project.getPropertyCount()];
propToRemove = project.getPropertyNames();
for ( int i = 0 ; i &lt; propToRemove.size(); i++ ){
    project.removeProperty( propToRemove[i] );
	}
*/

import com.eviware.soapui.support.UISupport

def userHomeFolder = System.getProperty("user.home")
def projectLocation = project.getPropertyValue("projectLocation")
def projectEnvironmentExists = project.getPropertyValue("projectTestEnvironment")

project.setPropertyValue("projectLocation", "${projectLocation}") 
project.testSuite.setPropertyValue("timTest", "Whyalla") 
</con:afterLoadScript><con:beforeSaveScript>import com.eviware.soapui.support.UISupport

def userHomeFolder = System.getProperty("user.home")
def projectLocation = project.getPropertyValue("projectLocation")
def projectEnvironmentExists = project.getPropertyValue("projectTestEnvironment")

// Set the workspace path if does not exist
if ((projectLocation == "")||(projectLocation ==null)||(projectLocation =="null")) {
//String projectLocation = UISupport.getDialogs().prompt("Value", "Set the path where your SoapUI Project is located", "${userHomeFolder}\\Documents\\Michael\\soapui\\projects\\dataportal")
projectLocation = UISupport.getDialogs().prompt("Value", "Set the path where your SoapUI Project is located", "${userHomeFolder}\\Documents\\soapui\\projects\\${project.name}")
project.setPropertyValue("projectLocation", "${projectLocation}") 

project.testSuite.setPropertyValue("timTest", "Whyalla") 
}










import com.eviware.soapui.support.UISupport

def userHomeFolder = System.getProperty("user.home")
def projectLocation = project.getPropertyValue("projectLocation")
def projectEnvironmentExists = project.getPropertyValue("projectTestEnvironment")

// Set the workspace path if does not exist
if ((projectLocation == "")||(projectLocation ==null)||(projectLocation =="null")) {
//String projectLocation = UISupport.getDialogs().prompt("Value", "Set the path where your SoapUI Project is located", "${userHomeFolder}\\Documents\\Michael\\soapui\\projects\\dataportal")
//projectLocation = UISupport.getDialogs().prompt("Value", "Set the path where your SoapUI Project is located","U:\\Documents\\soapui\\projects\\dataportal" ,"${userHomeFolder}\\Documents\\soapui\\projects\\${project.name}")
projectLocation = UISupport.getDialogs().prompt("${project.getName()}", "Set the path where your SoapUI Project is located","U:\\Documents\\soapui\\projects\\${project.name}")
project.setPropertyValue("projectLocation", "${projectLocation}") 
}



// Set the test environment 
/*

String projectEnvironment = UISupport.getDialogs().prompt("${project.getName()}", "Set the environment where you are testing", 'MOCK', 'DEV', 'SIT')
project.setPropertyValue("projectEnvironment", projectEnvironment.toString()) 

if (projectEnvironment.toString()=='SIT'){project.setPropertyValue("projectEnvironmentDB", 'tst') }
else if (projectEnvironment.toString()=='DEV'){project.setPropertyValue("projectEnvironmentDB", 'dev') }
else {project.setPropertyValue("projectEnvironmentDB", '') }
//if (projectEnvironment=="MOCK") {propMock="on"; project.setPropertyValue("projectMock", "${propMock}") }

*/</con:beforeSaveScript><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>